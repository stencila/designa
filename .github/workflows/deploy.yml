name: Build and Publish packages

on:
  pull_request:
    branches: '*'
  push:
    branches:
      - master

env:
  CI: true

jobs:
  build:
    # ignore commits with `[skip ci]`
    if: contains(github.event.head_commit.message, '[skip ci]') != true

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: restore Lerna
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
      # Retry bootstrap command in case it fails. Lerna can be flaky sometimes.
      - run: npm run bootstrap || npm run bootstrap

      - name: Build Brand Assets
        run: npm run build:brand

      - name: Build Styles
        run: npm run build:styles

      - name: Test
        run: npm run test

      # Rebuild components as the `test` command builds Components in `dev` mode
      - name: Build Components
        run: npm run build:components

      - name: Build storybook
        run: npm run storybook:build -- --quiet

      # Publish storybook to Chromatic https://www.chromatic.com/
      - name: Publish Storybook to Chromatic
        # Donâ€™t send package update PRs to Chromatic
        if: success() && startsWith(github.head_ref, 'renovate/dev') != true
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

      # Publish packages if running on main branch
      - name: Configure services
        run: |
          git config --global user.email "$GIT_AUTHOR_EMAIL"
          git config --global user.name "$GIT_AUTHOR_NAME"
          git remote set-url origin "https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" > /dev/null 2>&1
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc 2> /dev/null
        env:
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Verify that NPM authentication succeeded, try to prevent failed releases
      - name: Check NPM authentication
        if: success() && (github.ref == 'refs/heads/master')
        run: npm whoami

      - name: Publish package
        run: npx lerna publish --yes
        if: success() && (github.ref == 'refs/heads/master')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

        # Deploy Storybook to Github Pages
      - name: Deploy to GitHub Pages
        if: success() && (github.ref == 'refs/heads/master')
        uses: crazy-max/ghaction-github-pages@v2
        with:
          build_dir: docs
          committer: ${{ secrets.GIT_AUTHOR_NAME }} <${{ secrets.GIT_AUTHOR_EMAIL }}>
          author: ${{ secrets.GIT_AUTHOR_NAME }} <${{ secrets.GIT_AUTHOR_EMAIL }}>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
