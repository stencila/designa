{"file":"stencila-image-plotly.entry.cjs.js","mappings":"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","names":["createPlotContainer","injectScriptSrc","h","Host"],"sources":["./src/components/imageDynamic/imagePlotly/imagePlotlyUtils.ts","./src/components/imageDynamic/imagePlotly/imagePlotly.css?tag=stencila-image-plotly&mode=default&encapsulation=scoped","./src/components/imageDynamic/imagePlotly/imagePlotly.css?tag=stencila-image-plotly&mode=material&encapsulation=scoped","./src/components/imageDynamic/imagePlotly/imagePlotly.tsx"],"sourcesContent":["import { MediaObject, Node } from '@stencila/schema'\nimport { Data, Layout, Config } from 'plotly.js'\n\nexport const plotlyMediaType = 'application/vnd.plotly.v1+json'\n\nexport interface PlotlyObject {\n  data: Data[]\n  config?: Partial<Config>\n  layout?: Partial<Layout>\n}\n\nexport interface PlotlyNode\n  extends PlotlyObject,\n    MediaObject,\n    Record<string, unknown> {\n  mediaType: string\n}\n\nexport const isPlotlyObject = (node: Node): node is PlotlyNode => {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'mediaType' in node &&\n    node.mediaType === plotlyMediaType\n  )\n}\n",":host {\n  display: block;\n}\n\n:host.imgHidden::slotted(picture) > :not(.js-plotly-plot) {\n  display: none;\n}\n",":host {\n  display: block;\n}\n\n:host.imgHidden::slotted(picture) > :not(.js-plotly-plot) {\n  display: none;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { Config, Data, Layout } from 'plotly.js'\nimport { injectScriptSrc } from '../../utils/jsDeps'\nimport { createPlotContainer } from '../imageDynamicUtils'\nimport { plotlyMediaType, PlotlyObject } from './imagePlotlyUtils'\n\nconst plotlySrc = 'https://cdn.plot.ly/plotly-latest.min.js'\n\nlet plotlyIsLoaded: boolean\n\n@Component({\n  tag: 'stencila-image-plotly',\n  styleUrls: {\n    default: 'imagePlotly.css',\n    material: 'imagePlotly.css',\n  },\n  scoped: true,\n})\nexport class ImagePlotlyComponent {\n  @Element() private el: HTMLStencilaImagePlotlyElement\n  private plotContainer: HTMLDivElement | null\n\n  /**\n   * The Plotly data to render as an interactive visualization.\n   */\n  @Prop() data?: Data[]\n\n  /**\n   * The Plotly layout settings object\n   */\n  @Prop() layout?: Partial<Layout>\n\n  /**\n   * The Plotly configuration object\n   */\n  @Prop() config?: Partial<Config>\n\n  @State() private plotIsRendered = false\n\n  /** Custom event emitter to indicate that the loading of the Plotly.js script has finished */\n  @Event({\n    eventName: 'stencila-plotly-load',\n  })\n  public plotlyLoad: EventEmitter\n\n  /** When detecting that the Plotly.js has loaded, render the data if it hasnâ€™t been rendered already */\n  @Listen('stencila-plotly-load', { target: 'window' })\n  public onPlotlyLoad(): void {\n    if (!this.plotIsRendered) {\n      this.renderPlot()\n    }\n  }\n\n  private renderPlot = () => {\n    const {\n      data,\n      layout = this.layout,\n      config = this.config,\n    } = this.getPlotContent() ?? {}\n\n    if (!data) return\n\n    this.plotContainer = this.plotContainer ?? createPlotContainer(this.el)\n\n    window.Plotly?.react(this.plotContainer, data, layout, config)\n      .then(() => {\n        if (!this.plotIsRendered) {\n          this.plotIsRendered = true\n        }\n      })\n      .catch((err) => {\n        console.error('Failed to render plot', err)\n      })\n  }\n\n  private getPlotContent = (): PlotlyObject | undefined => {\n    if (this.data) {\n      return { data: this.data, layout: this.layout, config: this.config }\n    }\n\n    const plotEl = this.el.querySelector<HTMLScriptElement>(\n      `[type=\"${plotlyMediaType}\"]`\n    )\n\n    if (plotEl) {\n      try {\n        const content = plotEl.textContent\n        const contentParsed = JSON.parse(content ?? '') as Data[] | PlotlyObject\n        return Array.isArray(contentParsed)\n          ? { data: contentParsed }\n          : contentParsed\n      } catch (err) {\n        console.error('Could not parse plot data')\n      }\n    }\n\n    return undefined\n  }\n\n  componentWillLoad(): Promise<unknown> | void {\n    if (!this.plotIsRendered && plotlyIsLoaded) {\n      this.renderPlot()\n    } else {\n      injectScriptSrc({\n        src: plotlySrc,\n        onLoad: () => {\n          plotlyIsLoaded = true\n          this.plotlyLoad.emit()\n        },\n      })\n    }\n  }\n\n  componentShouldUpdate(\n    nexValue: unknown,\n    oldValue: unknown,\n    varName: string\n  ): boolean {\n    if (varName === 'plotIsRendered' && oldValue === nexValue) {\n      return false\n    }\n    return true\n  }\n\n  componentWillUpdate(): void {\n    this.renderPlot()\n  }\n\n  render(): HTMLStencilaImagePlotlyElement {\n    return <Host class={{ imgHidden: this.plotIsRendered }}></Host>\n  }\n}\n"],"version":3}