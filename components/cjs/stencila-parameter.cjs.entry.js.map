{"file":"stencila-parameter.entry.cjs.js","mappings":"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","names":["getProperties","h","Fragment","getSlotByName","Host"],"sources":["./src/components/utils/input.ts","./src/components/parameter/types.ts","./src/components/parameter/validators/booleanValidator.tsx","./src/components/parameter/validators/constantValidator.tsx","./src/components/parameter/validators/integerValidator.tsx","./src/components/parameter/validators/numberValidator.tsx","./src/components/parameter/validators/stringValidator.tsx","./src/components/parameter/validators/index.tsx","./src/components/parameter/parameter.css?tag=stencila-parameter&mode=default&encapsulation=scoped","./src/components/parameter/parameter.css?tag=stencila-parameter&mode=material&encapsulation=scoped","./src/components/parameter/parameter.tsx"],"sourcesContent":["export const getInputValue = (input: Element) => {\n  if (input instanceof HTMLInputElement) {\n    if (input.type === 'checkbox') {\n      return input.checked\n    } else if (input.type === 'number') {\n      return Number.parseFloat(input.value)\n    } else {\n      return input.value\n    }\n  }\n  if (input instanceof HTMLSelectElement) {\n    return input.value\n  }\n}\n","import { ValidatorTypes as ValidatorTypeSchema } from '@stencila/schema'\n\nexport type ValidatorTypes = Exclude<ValidatorTypeSchema['type'], 'Validator'>\n\nexport const isValidatorType = (\n  maybeValidator: string\n): maybeValidator is ValidatorTypes => {\n  return (\n    maybeValidator === 'Validator' ||\n    maybeValidator === 'ArrayValidator' ||\n    maybeValidator === 'BooleanValidator' ||\n    maybeValidator === 'ConstantValidator' ||\n    maybeValidator === 'EnumValidator' ||\n    maybeValidator === 'IntegerValidator' ||\n    maybeValidator === 'NumberValidator' ||\n    maybeValidator === 'StringValidator' ||\n    maybeValidator === 'TupleValidator'\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default: valueEl?.getAttribute('placeholder')?.toLowerCase() ?? undefined,\n  }\n}\n\nexport const BooleanValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input\n          type=\"checkbox\"\n          name=\"default\"\n          checked={values.default === 'true'}\n        />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nexport const ConstantValidator = (): FunctionalComponent => {\n  return (\n    <Fragment>\n      <label>\n        Value\n        <input name=\"value\" />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default:\n      valueEl?.getAttribute('placeholder') ??\n      valueEl?.getAttribute('value') ??\n      undefined,\n    minimum: valueEl?.getAttribute('min') ?? undefined,\n    maximum: valueEl?.getAttribute('max') ?? undefined,\n  }\n}\n\nexport const IntegerValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"number\" name=\"default\" step=\"1\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum\n        <input type=\"number\" name=\"minimum\" step=\"1\" value={values.minimum} />\n      </label>\n\n      <label>\n        Maximum\n        <input type=\"number\" name=\"maximum\" step=\"1\" value={values.maximum} />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default:\n      valueEl?.getAttribute('placeholder') ??\n      valueEl?.getAttribute('value') ??\n      undefined,\n    minimum: valueEl?.getAttribute('min') ?? undefined,\n    maximum: valueEl?.getAttribute('max') ?? undefined,\n  }\n}\n\nexport const NumberValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"number\" name=\"default\" step=\"any\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum\n        <input type=\"number\" name=\"minimum\" step=\"any\" value={values.minimum} />\n      </label>\n\n      <label>\n        Maximum\n        <input type=\"number\" name=\"maximum\" step=\"any\" value={values.maximum} />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default: valueEl?.getAttribute('placeholder') ?? undefined,\n    minLength: valueEl?.getAttribute('minLength') ?? undefined,\n    maxLength: valueEl?.getAttribute('maxLength') ?? undefined,\n    pattern: valueEl?.getAttribute('pattern') ?? undefined,\n  }\n}\n\nexport const StringValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"text\" name=\"default\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum length\n        <input\n          type=\"number\"\n          step=\"1\"\n          name=\"minLength\"\n          value={values.minLength}\n          min=\"0\"\n        />\n      </label>\n\n      <label>\n        Maximum length\n        <input\n          type=\"number\"\n          step=\"1\"\n          name=\"maxLength\"\n          value={values.maxLength}\n        />\n      </label>\n\n      <label>\n        Pattern (RegEx)\n        <input type=\"text\" name=\"pattern\" value={values.pattern} />\n      </label>\n    </Fragment>\n  )\n}\n","import { FunctionalComponent, h } from '@stencil/core'\nimport { ValidatorTypes } from '../types'\nimport { BooleanValidator } from './booleanValidator'\nimport { ConstantValidator } from './constantValidator'\nimport { IntegerValidator } from './integerValidator'\nimport { NumberValidator } from './numberValidator'\nimport { StringValidator } from './stringValidator'\n\ninterface Props {\n  onValidatorChange: (e: Event) => void\n  type?: ValidatorTypes\n  valueElRef?: Element\n}\n\nconst validateField = (e: Event) => {\n  const target = e.target as HTMLSelectElement | HTMLInputElement\n  target.reportValidity()\n}\n\nconst getValidator =\n  (valueElRef?: Element) => (validatorType: Props['type']) => {\n    switch (validatorType) {\n      case 'NumberValidator': {\n        return <NumberValidator valueEl={valueElRef}></NumberValidator>\n      }\n      case 'IntegerValidator': {\n        return <IntegerValidator valueEl={valueElRef}></IntegerValidator>\n      }\n      case 'StringValidator': {\n        return <StringValidator valueEl={valueElRef}></StringValidator>\n      }\n      case 'ConstantValidator': {\n        return <ConstantValidator valueEl={valueElRef}></ConstantValidator>\n      }\n      case 'BooleanValidator': {\n        return <BooleanValidator valueEl={valueElRef}></BooleanValidator>\n      }\n    }\n  }\n\nexport const Validator = (props: Props): FunctionalComponent => {\n  return (\n    <stencila-menu autoClose={false} menuPosition=\"bottom-start\">\n      <stencila-button\n        iconOnly={true}\n        icon=\"equalizer\"\n        size=\"xsmall\"\n        slot=\"toggle\"\n        aria-label=\"Toggle menu\"\n        color=\"key\"\n        minimal={true}\n      ></stencila-button>\n\n      <form\n        onChange={props.onValidatorChange}\n        onInput={validateField}\n        onFocusin={validateField}\n      >\n        <label>\n          Type\n          <select name=\"validator\">\n            <option disabled selected={props.type === undefined}>\n              Select…\n            </option>\n            <option\n              value=\"BooleanValidator\"\n              selected={props.type === 'BooleanValidator'}\n            >\n              Boolean\n            </option>\n            <option\n              value=\"IntegerValidator\"\n              selected={props.type === 'IntegerValidator'}\n            >\n              Integer\n            </option>\n            <option\n              value=\"NumberValidator\"\n              selected={props.type === 'NumberValidator'}\n            >\n              Number\n            </option>\n            <option\n              value=\"StringValidator\"\n              selected={props.type === 'StringValidator'}\n            >\n              String\n            </option>\n            <option\n              value=\"EnumValidator\"\n              selected={props.type === 'EnumValidator'}\n            >\n              Enum\n            </option>\n          </select>\n        </label>\n\n        {getValidator(props.valueElRef)(props.type)}\n      </form>\n    </stencila-menu>\n  )\n}\n","@import '~@stencila/style-stencila/dist/molecules/parameter.css';\n","@import '~@stencila/style-stencila/dist/molecules/parameter.css';\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { getInputValue } from '../utils/input'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { isValidatorType, ValidatorTypes } from './types'\nimport { Validator } from './validators'\n\n/**\n * Stencila Parameter component\n *\n * @slot name - The name of the parameter\n * @slot value - The current value of the parameter\n */\n@Component({\n  tag: 'stencila-parameter',\n  styleUrls: {\n    default: 'parameter.css',\n    material: 'parameter.css',\n  },\n  scoped: true,\n})\nexport class Parameter {\n  @Element() el: HTMLStencilaParameterElement\n\n  private labelSlotRef: Element | undefined = undefined\n  private valueSlotRef: Element | undefined = undefined\n\n  /**\n   * The context of the component. In `read` mode the parameter validator and its\n   * properties cannot be edited.\n   */\n  @Prop({ reflect: true }) mode: 'read' | 'edit' = 'edit'\n\n  /**\n   * The Stencila `Validator` Schema with which to configure and validate the parameter.\n   */\n  @Prop({ mutable: true }) validator?: ValidatorTypes\n\n  @State() paramName = ''\n\n  /**\n   * Event emitted when either the name of value of the parameter changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `value` or `name`.\n   */\n  @Event({\n    eventName: 'stencila-parameter-change',\n  })\n  public parameterChange: EventEmitter\n\n  private onParamChange = (e: Event) => {\n    const target = e.currentTarget as HTMLInputElement | HTMLSelectElement\n    const isValid = this.validateValue(target)\n    if (isValid) {\n      this.parameterChange.emit({\n        property: 'value',\n        value: getInputValue(target),\n      })\n    }\n  }\n\n  private onParamNameChange = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.parameterChange.emit({\n      property: 'name',\n      value: target.textContent,\n    })\n  }\n\n  /**\n   * Event emitted when either the type or property of the parameter validator\n   * changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `validator` or `property`.\n   */\n  @Event({\n    eventName: 'stencila-validator-change',\n  })\n  public validatorChange: EventEmitter\n\n  onValidatorChange = (e: Event) => {\n    const target = e.target as HTMLInputElement | HTMLSelectElement\n    const value = getInputValue(target)\n\n    if (\n      target.name === 'validator' &&\n      typeof value === 'string' &&\n      target.value !== this.validator &&\n      isValidatorType(value)\n    ) {\n      this.validator = value\n\n      this.validatorChange.emit({\n        type: 'validator',\n        value,\n      })\n    } else {\n      this.validatorChange.emit({\n        type: 'property',\n        name: target.name,\n        value,\n      })\n    }\n  }\n\n  private validateValue = (target: HTMLInputElement | HTMLSelectElement) => {\n    return target.reportValidity()\n  }\n\n  private getValidatorFromMetaEl = (): ValidatorTypes | undefined => {\n    const validatorMetaEl = this.el.querySelector('meta[itemprop=\"validator\"]')\n    const validatorAttrParts =\n      validatorMetaEl?.getAttribute('itemtype')?.split('/') ?? []\n\n    const validatorAttr = validatorAttrParts[validatorAttrParts.length - 1]\n\n    return isValidatorType(validatorAttr) ? validatorAttr : undefined\n  }\n\n  componentWillLoad() {\n    if (this.validator === undefined) {\n      this.validator = this.getValidatorFromMetaEl()\n    }\n\n    this.labelSlotRef = getSlotByName(this.el)('name')[0]\n\n    const valueEl = getSlotByName(this.el)('value')\n    this.valueSlotRef = valueEl[0]\n    for (const input of valueEl) {\n      input.addEventListener('input', this.onParamChange)\n      input.addEventListener('focus', this.onParamChange)\n    }\n  }\n\n  disconnectedCallback() {\n    const valueEl = getSlotByName(this.el)('value')\n    for (const input of valueEl) {\n      input.removeEventListener('input', this.onParamChange)\n      input.removeEventListener('focus', this.onParamChange)\n    }\n  }\n\n  public render() {\n    const labelText = this.labelSlotRef?.textContent ?? 'parameter'\n\n    return (\n      <Host>\n        <span class=\"actions\">\n          {this.mode === 'edit' && (\n            <Validator\n              type={this.validator}\n              onValidatorChange={this.onValidatorChange}\n              valueElRef={this.valueSlotRef}\n            ></Validator>\n          )}\n\n          <span\n            class=\"name\"\n            contentEditable={this.mode === 'edit'}\n            onClick={(e) => {\n              if (this.mode === 'edit') {\n                e.preventDefault()\n              }\n            }}\n            onInput={this.onParamNameChange}\n            ref={(el) => (this.labelSlotRef = el)}\n          >\n            <slot name=\"name\" />\n          </span>\n        </span>\n\n        <form class=\"value\" title={labelText}>\n          <slot name=\"value\" />\n        </form>\n      </Host>\n    )\n  }\n}\n"],"version":3}