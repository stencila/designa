{"file":"yaml-5b067a0d.js","mappings":"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","names":[],"sources":["./node_modules/@codemirror/legacy-modes/mode/yaml.js"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"version":3}