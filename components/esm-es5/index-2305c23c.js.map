{"version":3,"sources":["@stencil/core/internal/app-data","node_modules/@stencil/core/internal/client/index.js?app-data=conditional"],"names":["NAMESPACE","scopeId","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queuePending","win","window","doc","document","head","H","HTMLElement","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","supportsShadow","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","Context","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","map","_a","flags","name","method","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","$lazyInstance$","$queuedListeners$","consoleError","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","__spreadArray","attachStyles","$cmpMeta$","$hostElement$","endAttachStyles","$tagName$","shadowRoot","getRootNode","$modeName$","classList","cmp","computeMode","modeResolutionChain","find","m","setMode","getMode","ref","getHostRef","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","isComplexType","o","nodeName","vnodeData","children","_i","arguments","length","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","Array","isArray","String","$text$","newVNode","classData_1","className","class","Object","keys","filter","k","join","vdomFnUtils","vnode","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","Host","isHost","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","apply","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses_1","parseClassList","newClasses_1","remove","prop","removeProperty","setProperty","slice","isComplex","n","xlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","createTextNode","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","some","nodeToRelocate","vNode","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","previousSibling","getElement","createEvent","emit","detail","emitEvent","bubbles","composed","cancelable","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","then","updateComponent","__awaiter","endUpdate","rc","endRender","callRender","childrenPromises","postUpdate","postUpdateComponent","all","render","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","namespace","arg","thenFn","parsePropertyValue","propValue","propType","parseFloat","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","$watchers$","watchMethods","watchMethodName","componentShouldUpdate","proxyComponent","Cstr","watchers","members","entries","prototype_1","prototype","memberFlags","defineProperty","this","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName_1","Map","attributeChangedCallback","attrName","_oldValue","_this","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","sent","isProxied","endNewInstance","scopeId_1","endRegisterStyles","schedule","connectedCallback","endConnected","setContentReference","$listeners$","contentRefElm","createComment","firstChild","disconnectedCallback","rmListener","patchCloneNode","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","call","i_1","slotted","nonStencilNode","stencilPrivates","every","privateField","__appendChild","patchSlotAppendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","HostElement","_super","__extends","self","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","getContext","_elm","context","write","read","readTask","tick","Fragment","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","import","concat","importedModule","queueDomReads","queueDomWrites","queueTask","queue","flush","consume","performance","now"],"mappings":"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","sourcesContent":["export const NAMESPACE = 'stencila-components';\nexport const BUILD = /* stencila-components */ { allRenderFn: true, appendChildSlotFix: true, asyncLoading: true, asyncQueue: false, attachStyles: true, cloneNodeFix: true, cmpDidLoad: true, cmpDidRender: false, cmpDidUnload: true, cmpDidUpdate: false, cmpShouldUpdate: true, cmpWillLoad: true, cmpWillRender: false, cmpWillUpdate: true, connectedCallback: false, constructableCSS: true, cssAnnotations: true, cssVarShim: false, devTools: false, disconnectedCallback: true, dynamicImportShim: true, element: false, event: true, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: false, hostListenerTargetDocument: false, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: false, hydrateServerSide: false, hydratedAttribute: false, hydratedClass: true, initializeNextTick: false, invisiblePrehydration: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: true, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, safari10: true, scoped: true, scopedSlotTextContentFix: false, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: true, shadowDomShim: false, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: true, taskQueue: true, transformTagName: false, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };\nexport const Env = /* stencila-components */ {};\n","let scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.14.2 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* Passive */) !== 0,\n        capture: (flags & 2 /* Capture */) !== 0,\n    })\n    : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */),\n            hasConnected: !!(flags & 1 /* hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* isWatchReady */),\n            isListenReady: !!(flags & 256 /* isListenReady */),\n            needsRerender: !!(flags & 512 /* needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        BUILD.isDebug || BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) &&\n        (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            let stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"]}