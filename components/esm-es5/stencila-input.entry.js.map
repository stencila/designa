{"version":3,"sources":["src/components/input/input.css?tag=stencila-input&mode=default&encapsulation=scoped","src/components/input/input.material.css?tag=stencila-input&mode=material&encapsulation=scoped","src/components/input/input.tsx"],"names":["defaultInputCss","inputMaterialCss","Input","hostRef","this","autoFocus","type","hideLabel","inline","required","readOnly","value","prototype","render","_type","inputmode","pattern","_label","label","undefined","aria-label","_a","name","aria-labelledby","concat","h","Host","class","iconStart","icon","Object","assign","placeholder"],"mappings":"mEAAA,IAAMA,gBAAkB,kjDCAxB,IAAMC,iBAAmB,0nDCWZC,MAAK,WARlB,SAAAA,EAAAC,4BAYUC,KAAAC,UAAY,MAiBLD,KAAAE,KACb,OAgBMF,KAAAG,UAAY,MAKZH,KAAAI,OAAS,MAeTJ,KAAAK,SAAW,MAKJL,KAAAM,SAAW,MAKlBN,KAAAO,MAA0B,GAE3BT,EAAAU,UAAAC,OAAA,iBACL,IAAMC,EACJV,KAAKE,OAAS,SACV,CACEA,KAAM,OACNS,UAAW,UACXC,QAAS,UAEX,CAAEV,KAAMF,KAAKE,MAEnB,IAAMW,EACJb,KAAKc,QAAUC,WAAaf,KAAKG,UAC7B,CACEa,cAAcC,EAAAjB,KAAKc,SAAK,MAAAG,SAAA,EAAAA,EAAIjB,KAAKkB,MAEnC,CAAEC,kBAAmB,GAAAC,OAAGpB,KAAKkB,KAAI,WAEvC,OACEG,EAACC,KAAI,CAACC,MAAO,CAAEnB,OAAQJ,KAAKI,SACzBJ,KAAKwB,YAAcT,WAClBM,EAAA,gBAAA,CAAeI,KAAMzB,KAAKwB,YAE5BH,EAAA,QAAAK,OAAAC,OAAA,GACMjB,EACAG,EAAM,CAEVZ,UAAWD,KAAKC,UAChBU,UAAWX,KAAKW,UAChBO,KAAMlB,KAAKkB,KACXU,YAAa5B,KAAK4B,YAClBvB,SAAUL,KAAKK,SACfE,MAAOP,KAAKO,MACZD,SAAUN,KAAKM,uBAtGP","sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/input.css';\n","@import '~@stencila/style-material/dist/atoms/input.css';\n","import { Component, Host, h, Prop } from '@stencil/core'\nimport { IconNames } from '../icon/iconNames'\n\n@Component({\n  tag: 'stencila-input',\n  styleUrls: {\n    default: 'input.css',\n    material: 'input.material.css',\n  },\n  scoped: true,\n})\nexport class Input {\n  /**\n   * Automatically bring cursor focus to the input field on render.\n   */\n  @Prop() autoFocus = false\n\n  /**\n   * A hint to the browser for which keyboard to display.\n   */\n  @Prop() inputmode?:\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search'\n\n  /**\n   * Type of input field.\n   */\n  @Prop() public type: 'text' | 'password' | 'number' | 'file' | 'search' =\n    'text'\n\n  /**\n   * The name of the input, submitted as the value's label inside the form data.\n   */\n  @Prop() name!: string\n\n  /**\n   * Accessible text label for the input field. Defaults to the input's `name` prop.\n   */\n  @Prop() label?: string\n\n  /**\n   * Visually conceal the input label.\n   * Use sparingly for simple forms only with a descriptive action button.\n   */\n  @Prop() hideLabel = false\n\n  /**\n   * Render the label and input field as inline elements.\n   */\n  @Prop() inline = false\n\n  /**\n   * Short hint demonstrating expected input value. Shown when the input is empty.\n   */\n  @Prop() public placeholder?: string\n\n  /**\n   * Icon to show at the start of the input field.\n   */\n  @Prop() public iconStart?: IconNames\n\n  /**\n   * When `true` value must be provided before submitting.\n   */\n  @Prop() required = false\n\n  /**\n   * Indicate that this is a controlled input, preventing user editing of the value\n   */\n  @Prop() public readOnly = false\n\n  /**\n   * Text value of the input.\n   */\n  @Prop() value?: number | string = ''\n\n  public render() {\n    const _type =\n      this.type === 'number'\n        ? {\n            type: 'text',\n            inputmode: 'numeric',\n            pattern: '[0-9]*',\n          }\n        : { type: this.type }\n\n    const _label =\n      this.label === undefined || this.hideLabel\n        ? {\n            'aria-label': this.label ?? this.name,\n          }\n        : { 'aria-labelledby': `${this.name}-label` }\n\n    return (\n      <Host class={{ inline: this.inline }}>\n        {this.iconStart !== undefined && (\n          <stencila-icon icon={this.iconStart}></stencila-icon>\n        )}\n        <input\n          {..._type}\n          {..._label}\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus={this.autoFocus}\n          inputmode={this.inputmode}\n          name={this.name}\n          placeholder={this.placeholder}\n          required={this.required}\n          value={this.value}\n          readOnly={this.readOnly}\n        />\n      </Host>\n    )\n  }\n}\n"]}