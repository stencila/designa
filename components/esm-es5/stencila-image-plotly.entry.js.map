{"version":3,"sources":["src/components/imageDynamic/imagePlotly/imagePlotlyUtils.ts","src/components/imageDynamic/imagePlotly/imagePlotly.css?tag=stencila-image-plotly&mode=default&encapsulation=scoped","src/components/imageDynamic/imagePlotly/imagePlotly.css?tag=stencila-image-plotly&mode=material&encapsulation=scoped","src/components/imageDynamic/imagePlotly/imagePlotly.tsx"],"names":["plotlyMediaType","defaultImagePlotlyCss","materialImagePlotlyCss","plotlySrc","plotlyIsLoaded","ImagePlotlyComponent","hostRef","_this","this","plotIsRendered","renderPlot","_d","_a","getPlotContent","data","_e","layout","_f","config","plotContainer","_b","createPlotContainer","el","_c","window","Plotly","react","then","catch","err","console","error","plotEl","querySelector","concat","content","textContent","contentParsed","JSON","parse","Array","isArray","undefined","prototype","onPlotlyLoad","componentWillLoad","injectScriptSrc","src","onLoad","plotlyLoad","emit","componentShouldUpdate","nexValue","oldValue","varName","componentWillUpdate","render","h","Host","class","imgHidden"],"mappings":"+LAGO,IAAMA,gBAAkB,iCCH/B,IAAMC,sBAAwB,iLCA9B,IAAMC,uBAAyB,oLCgB/B,IAAMC,UAAY,2CAElB,IAAIC,mBAUSC,qBAAoB,WARjC,SAAAA,EAAAC,GAAA,IAAAC,EAAAC,yFA2BmBA,KAAAC,eAAiB,MAgB1BD,KAAAE,WAAa,qBACb,IAAAC,GAIFC,EAAAL,EAAKM,oBAAgB,MAAAD,SAAA,EAAAA,EAAI,GAH3BE,EAAIH,EAAAG,KACJC,EAAAJ,EAAAK,OAAAA,EAAMD,SAAA,EAAGR,EAAKS,OAAMD,EACpBE,EAAAN,EAAAO,OAAAA,EAAMD,SAAA,EAAGV,EAAKW,OAAMD,EAGtB,IAAKH,EAAM,OAEXP,EAAKY,eAAgBC,EAAAb,EAAKY,iBAAa,MAAAC,SAAA,EAAAA,EAAIC,oBAAoBd,EAAKe,KAEpEC,EAAAC,OAAOC,UAAM,MAAAF,SAAA,OAAA,EAAAA,EAAEG,MAAMnB,EAAKY,cAAeL,EAAME,EAAQE,GACpDS,MAAK,WACJ,IAAKpB,EAAKE,eAAgB,CACxBF,EAAKE,eAAiB,SAGzBmB,OAAM,SAACC,GACNC,QAAQC,MAAM,wBAAyBF,OAIrCrB,KAAAK,eAAiB,WACvB,GAAIN,EAAKO,KAAM,CACb,MAAO,CAAEA,KAAMP,EAAKO,KAAME,OAAQT,EAAKS,OAAQE,OAAQX,EAAKW,QAG9D,IAAMc,EAASzB,EAAKe,GAAGW,cACrB,UAAAC,OAAUlC,gBAAe,OAG3B,GAAIgC,EAAQ,CACV,IACE,IAAMG,EAAUH,EAAOI,YACvB,IAAMC,EAAgBC,KAAKC,MAAMJ,IAAO,MAAPA,SAAO,EAAPA,EAAW,IAC5C,OAAOK,MAAMC,QAAQJ,GACjB,CAAEvB,KAAMuB,GACRA,EACJ,MAAOR,GACPC,QAAQC,MAAM,8BAIlB,OAAOW,WAjDFrC,EAAAsC,UAAAC,aAAA,WACL,IAAKpC,KAAKC,eAAgB,CACxBD,KAAKE,eAkDTL,EAAAsC,UAAAE,kBAAA,WAAA,IAAAtC,EAAAC,KACE,IAAKA,KAAKC,gBAAkBL,eAAgB,CAC1CI,KAAKE,iBACA,CACLoC,gBAAgB,CACdC,IAAK5C,UACL6C,OAAQ,WACN5C,eAAiB,KACjBG,EAAK0C,WAAWC,YAMxB7C,EAAAsC,UAAAQ,sBAAA,SACEC,EACAC,EACAC,GAEA,GAAIA,IAAY,kBAAoBD,IAAaD,EAAU,CACzD,OAAO,MAET,OAAO,MAGT/C,EAAAsC,UAAAY,oBAAA,WACE/C,KAAKE,cAGPL,EAAAsC,UAAAa,OAAA,WACE,OAAOC,EAACC,KAAI,CAACC,MAAO,CAAEC,UAAWpD,KAAKC,iJA/GT","sourcesContent":["import { MediaObject, Node } from '@stencila/schema'\nimport { Data, Layout, Config } from 'plotly.js'\n\nexport const plotlyMediaType = 'application/vnd.plotly.v1+json'\n\nexport interface PlotlyObject {\n  data: Data[]\n  config?: Partial<Config>\n  layout?: Partial<Layout>\n}\n\nexport interface PlotlyNode\n  extends PlotlyObject,\n    MediaObject,\n    Record<string, unknown> {\n  mediaType: string\n}\n\nexport const isPlotlyObject = (node: Node): node is PlotlyNode => {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'mediaType' in node &&\n    node.mediaType === plotlyMediaType\n  )\n}\n",":host {\n  display: block;\n}\n\n:host.imgHidden::slotted(picture) > :not(.js-plotly-plot) {\n  display: none;\n}\n",":host {\n  display: block;\n}\n\n:host.imgHidden::slotted(picture) > :not(.js-plotly-plot) {\n  display: none;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { Config, Data, Layout } from 'plotly.js'\nimport { injectScriptSrc } from '../../utils/jsDeps'\nimport { createPlotContainer } from '../imageDynamicUtils'\nimport { plotlyMediaType, PlotlyObject } from './imagePlotlyUtils'\n\nconst plotlySrc = 'https://cdn.plot.ly/plotly-latest.min.js'\n\nlet plotlyIsLoaded: boolean\n\n@Component({\n  tag: 'stencila-image-plotly',\n  styleUrls: {\n    default: 'imagePlotly.css',\n    material: 'imagePlotly.css',\n  },\n  scoped: true,\n})\nexport class ImagePlotlyComponent {\n  @Element() private el: HTMLStencilaImagePlotlyElement\n  private plotContainer: HTMLDivElement | null\n\n  /**\n   * The Plotly data to render as an interactive visualization.\n   */\n  @Prop() data?: Data[]\n\n  /**\n   * The Plotly layout settings object\n   */\n  @Prop() layout?: Partial<Layout>\n\n  /**\n   * The Plotly configuration object\n   */\n  @Prop() config?: Partial<Config>\n\n  @State() private plotIsRendered = false\n\n  /** Custom event emitter to indicate that the loading of the Plotly.js script has finished */\n  @Event({\n    eventName: 'stencila-plotly-load',\n  })\n  public plotlyLoad: EventEmitter\n\n  /** When detecting that the Plotly.js has loaded, render the data if it hasnâ€™t been rendered already */\n  @Listen('stencila-plotly-load', { target: 'window' })\n  public onPlotlyLoad(): void {\n    if (!this.plotIsRendered) {\n      this.renderPlot()\n    }\n  }\n\n  private renderPlot = () => {\n    const {\n      data,\n      layout = this.layout,\n      config = this.config,\n    } = this.getPlotContent() ?? {}\n\n    if (!data) return\n\n    this.plotContainer = this.plotContainer ?? createPlotContainer(this.el)\n\n    window.Plotly?.react(this.plotContainer, data, layout, config)\n      .then(() => {\n        if (!this.plotIsRendered) {\n          this.plotIsRendered = true\n        }\n      })\n      .catch((err) => {\n        console.error('Failed to render plot', err)\n      })\n  }\n\n  private getPlotContent = (): PlotlyObject | undefined => {\n    if (this.data) {\n      return { data: this.data, layout: this.layout, config: this.config }\n    }\n\n    const plotEl = this.el.querySelector<HTMLScriptElement>(\n      `[type=\"${plotlyMediaType}\"]`\n    )\n\n    if (plotEl) {\n      try {\n        const content = plotEl.textContent\n        const contentParsed = JSON.parse(content ?? '') as Data[] | PlotlyObject\n        return Array.isArray(contentParsed)\n          ? { data: contentParsed }\n          : contentParsed\n      } catch (err) {\n        console.error('Could not parse plot data')\n      }\n    }\n\n    return undefined\n  }\n\n  componentWillLoad(): Promise<unknown> | void {\n    if (!this.plotIsRendered && plotlyIsLoaded) {\n      this.renderPlot()\n    } else {\n      injectScriptSrc({\n        src: plotlySrc,\n        onLoad: () => {\n          plotlyIsLoaded = true\n          this.plotlyLoad.emit()\n        },\n      })\n    }\n  }\n\n  componentShouldUpdate(\n    nexValue: unknown,\n    oldValue: unknown,\n    varName: string\n  ): boolean {\n    if (varName === 'plotIsRendered' && oldValue === nexValue) {\n      return false\n    }\n    return true\n  }\n\n  componentWillUpdate(): void {\n    this.renderPlot()\n  }\n\n  render(): HTMLStencilaImagePlotlyElement {\n    return <Host class={{ imgHidden: this.plotIsRendered }}></Host>\n  }\n}\n"]}