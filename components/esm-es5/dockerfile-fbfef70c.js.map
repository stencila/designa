{"version":3,"sources":["node_modules/@codemirror/legacy-modes/mode/simple-mode.js","node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],"names":["simpleMode","states","ensureState","states_","meta","languageData","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","startState","pending","copyState","s","slice","stack","token","tokenFunction","indentFunction","name","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","asToken","apply","replace","result","next","this","regex","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec","from","fromRegex","shells","shellsAsArrayRegex","expose","exposeRegex","others","instructions","concat","instructionRegex","instructionOnlyLine","instructionWithArguments","dockerFile","start","single","double","array","arguments","commentTokens","line"],"mappings":"AAAO,SAASA,WAAWC,GACzBC,YAAYD,EAAQ,SACpB,IAAIE,EAAU,GAAIC,EAAOH,EAAOI,cAAgB,GAAIC,EAAiB,MACrE,IAAK,IAAIC,KAASN,EAAQ,GAAIM,GAASH,GAAQH,EAAOO,eAAeD,GAAQ,CAC3E,IAAIE,EAAON,EAAQI,GAAS,GAAIG,EAAOT,EAAOM,GAC9C,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAIE,EAAOH,EAAKC,GAChBF,EAAKK,KAAK,IAAIC,KAAKF,EAAMZ,IACzB,GAAIY,EAAKG,QAAUH,EAAKI,OAAQX,EAAiB,MAGrD,MAAO,CACLY,WAAY,WACV,MAAO,CAACX,MAAO,QAASY,QAAS,KAAMH,OAAQV,EAAiB,GAAK,OAEvEc,UAAW,SAASb,GAClB,IAAIc,EAAI,CAACd,MAAOA,EAAMA,MAAOY,QAASZ,EAAMY,QAASH,OAAQT,EAAMS,QAAUT,EAAMS,OAAOM,MAAM,IAChG,GAAIf,EAAMgB,MACRF,EAAEE,MAAQhB,EAAMgB,MAAMD,MAAM,GAC9B,OAAOD,GAETG,MAAOC,cAActB,GACrBa,OAAQU,eAAevB,EAASC,GAChCC,aAAcD,GAIlB,SAASF,YAAYD,EAAQ0B,GAC3B,IAAK1B,EAAOO,eAAemB,GACzB,MAAM,IAAIC,MAAM,mBAAqBD,EAAO,mBAGhD,SAASE,QAAQC,EAAKC,GACpB,IAAKD,EAAK,MAAO,OACjB,IAAIE,EAAQ,GACZ,GAAIF,aAAeG,OAAQ,CACzB,GAAIH,EAAII,WAAYF,EAAQ,IAC5BF,EAAMA,EAAIK,WACL,CACLL,EAAMM,OAAON,GAEf,OAAO,IAAIG,QAAQF,IAAU,MAAQ,GAAK,KAAO,MAAQD,EAAM,IAAKE,GAGtE,SAASK,QAAQP,GACf,IAAKA,EAAK,OAAO,KACjB,GAAIA,EAAIQ,MAAO,OAAOR,EACtB,UAAWA,GAAO,SAAU,OAAOA,EAAIS,QAAQ,MAAO,KACtD,IAAIC,EAAS,GACb,IAAK,IAAI7B,EAAI,EAAGA,EAAImB,EAAIlB,OAAQD,IAC9B6B,EAAO1B,KAAKgB,EAAInB,IAAMmB,EAAInB,GAAG4B,QAAQ,MAAO,MAC9C,OAAOC,EAGT,SAASzB,KAAKF,EAAMZ,GAClB,GAAIY,EAAK4B,MAAQ5B,EAAKC,KAAMZ,YAAYD,EAAQY,EAAK4B,MAAQ5B,EAAKC,MAClE4B,KAAKC,MAAQd,QAAQhB,EAAK8B,OAC1BD,KAAKlB,MAAQa,QAAQxB,EAAKW,OAC1BkB,KAAK7B,KAAOA,EAGd,SAASY,cAAcxB,GACrB,OAAO,SAAS2C,EAAQrC,GACtB,GAAIA,EAAMY,QAAS,CACjB,IAAI0B,EAAOtC,EAAMY,QAAQ2B,QACzB,GAAIvC,EAAMY,QAAQP,QAAU,EAAGL,EAAMY,QAAU,KAC/CyB,EAAOG,KAAOF,EAAKG,KAAKpC,OACxB,OAAOiC,EAAKrB,MAGd,IAAIyB,EAAWhD,EAAOM,EAAMA,OAC5B,IAAK,IAAII,EAAI,EAAGA,EAAIsC,EAASrC,OAAQD,IAAK,CACxC,IAAIuC,EAAOD,EAAStC,GACpB,IAAIwC,IAAYD,EAAKrC,KAAKuC,KAAOR,EAAOQ,QAAUR,EAAOS,MAAMH,EAAKP,OACpE,GAAIQ,EAAS,CACX,GAAID,EAAKrC,KAAK4B,KAAM,CAClBlC,EAAMA,MAAQ2C,EAAKrC,KAAK4B,UACnB,GAAIS,EAAKrC,KAAKC,KAAM,EACxBP,EAAMgB,QAAUhB,EAAMgB,MAAQ,KAAKT,KAAKP,EAAMA,OAC/CA,EAAMA,MAAQ2C,EAAKrC,KAAKC,UACnB,GAAIoC,EAAKrC,KAAKyC,KAAO/C,EAAMgB,OAAShB,EAAMgB,MAAMX,OAAQ,CAC7DL,EAAMA,MAAQA,EAAMgB,MAAM+B,MAG5B,GAAIJ,EAAKrC,KAAKG,OACZT,EAAMS,OAAOF,KAAK8B,EAAOW,cAAgBX,EAAOY,YAClD,GAAIN,EAAKrC,KAAKI,OACZV,EAAMS,OAAOsC,MACf,IAAI9B,EAAQ0B,EAAK1B,MACjB,GAAIA,GAASA,EAAMc,MAAOd,EAAQA,EAAM2B,GACxC,GAAIA,EAAQvC,OAAS,GAAKsC,EAAK1B,cAAgB0B,EAAK1B,OAAS,SAAU,CACrEjB,EAAMY,QAAU,GAChB,IAAK,IAAIsC,EAAI,EAAGA,EAAIN,EAAQvC,OAAQ6C,IAClC,GAAIN,EAAQM,GACVlD,EAAMY,QAAQL,KAAK,CAACkC,KAAMG,EAAQM,GAAIjC,MAAO0B,EAAK1B,MAAMiC,EAAI,KAChEb,EAAOc,OAAOP,EAAQ,GAAGvC,QAAUuC,EAAQ,GAAKA,EAAQ,GAAGvC,OAAS,IACpE,OAAOY,EAAM,QACR,GAAIA,GAASA,EAAMmC,KAAM,CAC9B,OAAOnC,EAAM,OACR,CACL,OAAOA,IAIboB,EAAOH,OACP,OAAO,MAIX,SAASf,eAAezB,EAAQG,GAC9B,OAAO,SAASG,EAAOqD,GACrB,GAAIrD,EAAMS,QAAU,MAAQZ,EAAKyD,kBAAoBzD,EAAK0D,gBAAgBC,QAAQxD,EAAMA,QAAU,EAChG,OAAO,KAET,IAAIwC,EAAMxC,EAAMS,OAAOJ,OAAS,EAAGoD,EAAQ/D,EAAOM,EAAMA,OACxD0D,EAAM,OAAS,CACb,IAAK,IAAItD,EAAI,EAAGA,EAAIqD,EAAMpD,OAAQD,IAAK,CACrC,IAAIuC,EAAOc,EAAMrD,GACjB,GAAIuC,EAAKrC,KAAKI,QAAUiC,EAAKrC,KAAKqD,oBAAsB,MAAO,CAC7D,IAAIC,EAAIjB,EAAKP,MAAMyB,KAAKR,GACxB,GAAIO,GAAKA,EAAE,GAAI,CACbpB,IACA,GAAIG,EAAKT,MAAQS,EAAKpC,KAAMkD,EAAQ/D,EAAOiD,EAAKT,MAAQS,EAAKpC,MAC7D8C,EAAYA,EAAUtC,MAAM6C,EAAE,GAAGvD,QACjC,SAASqD,IAIf,MAEF,OAAOlB,EAAM,EAAI,EAAIxC,EAAMS,OAAO+B,IChItC,IAAIsB,KAAO,OACX,IAAIC,UAAY,IAAIrC,OAAO,cAAgBoC,KAAO,OAAQ,KAE1D,IAAIE,OAAS,CAAC,MAAO,MAAO,aAAc,SAC1C,IAAIC,mBAAqB,IAAIvC,OAAO,WAAasC,OAAOZ,KAAK,KAAO,aAAc,KAElF,IAAIc,OAAS,SACb,IAAIC,YAAc,IAAIzC,OAAO,WAAawC,OAAS,UAAW,KAE9D,IAAIE,OAAS,CACX,MAAO,OAAQ,aAAc,QAAS,MACtC,MAAO,OAAQ,SAAU,OACzB,UAAW,UAAW,aAAc,cAAe,SAIrD,IAAIC,aAAe,CAACP,KAAMI,QAAQI,OAAON,QAAQM,OAAOF,QACpDG,iBAAmB,IAAMF,aAAajB,KAAK,KAAO,IAClDoB,oBAAsB,IAAI9C,OAAO,UAAY6C,iBAAmB,gBAAiB,KACjFE,yBAA2B,IAAI/C,OAAO,UAAY6C,iBAAmB,SAAU,KAEvE,IAACG,WAAajF,WAAW,CACnCkF,MAAO,CAEL,CACEvC,MAAO,WACPS,IAAK,KACL5B,MAAO,WAET,CACEmB,MAAO2B,UACP9C,MAAO,CAAC,KAAM,WACd4B,IAAK,KACLX,KAAM,QAGR,CACEE,MAAOoC,oBACPvD,MAAO,CAAC,KAAM,UAAW,KAAM,SAC/B4B,IAAK,MAEP,CACET,MAAO6B,mBACPhD,MAAO,CAAC,KAAM,UAAW,MACzB4B,IAAK,KACLX,KAAM,SAER,CACEE,MAAO+B,YACPlD,MAAO,CAAC,KAAM,UAAW,MACzB4B,IAAK,KACLX,KAAM,UAGR,CACEE,MAAOqC,yBACPxD,MAAO,CAAC,KAAM,UAAW,MACzB4B,IAAK,KACLX,KAAM,aAER,CACEE,MAAO,IACPnB,MAAO,OAGX6C,KAAM,CACJ,CACE1B,MAAO,OACPnB,MAAO,KACPiB,KAAM,SAER,CAEEE,MAAO,cACPnB,MAAO,CAAC,KAAM,SACdiB,KAAM,SAER,CACEE,MAAO,mBACPnB,MAAO,CAAC,KAAM,WACdiB,KAAM,SAGR,CACEjB,MAAO,KACPiB,KAAM,UAGV0C,OAAQ,CACN,CACExC,MAAO,iBACPnB,MAAO,UAET,CACEmB,MAAO,IACPnB,MAAO,SACP8B,IAAK,OAGT8B,OAAQ,CACN,CACEzC,MAAO,iBACPnB,MAAO,UAET,CACEmB,MAAO,IACPnB,MAAO,SACP8B,IAAK,OAGT+B,MAAO,CACL,CACE1C,MAAO,KACPnB,MAAO,KACPiB,KAAM,SAER,CACEE,MAAO,qBACPnB,MAAO,WAGXiD,OAAQ,CACN,CACE9B,MAAO,OACPnB,MAAO,SACPiB,KAAM,SAER,CACEE,MAAO,UACPnB,MAAO,KACPiB,KAAM,SAER,CACEE,MAAO,MACPnB,MAAO,UAET,CACEmB,MAAO,SACPnB,MAAO,MAGT,CACEA,MAAO,KACPiB,KAAM,UAGV6C,UAAW,CACT,CACE3C,MAAO,WACPS,IAAK,KACL5B,MAAO,WAET,CACEmB,MAAO,sBACPnB,MAAO,SACPiB,KAAM,SAER,CACEE,MAAO,IACPnB,MAAO,SACPV,KAAM,UAER,CACE6B,MAAO,sBACPnB,MAAO,SACPiB,KAAM,SAER,CACEE,MAAO,IACPnB,MAAO,SACPV,KAAM,UAER,CACE6B,MAAO,gBACPnB,MAAO,MAET,CACEmB,MAAO,WACPnB,MAAO,KACPiB,KAAM,SAER,CACEE,MAAO,UACPnB,MAAO,MAGT,CACEA,MAAO,KACPiB,KAAM,UAGVpC,aAAc,CACZkF,cAAe,CAACC,KAAM","sourcesContent":["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n","import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n"]}