{"version":3,"sources":["src/components/toast/toast.css?tag=stencila-toast&mode=default","src/components/toast/toast.css?tag=stencila-toast&mode=material","src/components/toast/toast.tsx"],"names":["defaultToastCss","materialToastCss","StencilaToast","hostRef","_this","this","dismissable","duration","type","ToastTypes","neutral","getIconByType","dismiss","window","clearTimeout","timeout","_b","_a","el","parentElement","removeChild","pauseAutoDismiss","autoDismiss","undefined","setTimeout","styleActionButtons","buttons","Array","from","getSlotByName","reduce","actions","__spreadArray","children","filter","tagName","toLowerCase","classList","contains","forEach","idx","setAttribute","prototype","componentWillLoad","componentDidLoad","render","h","Host","position","onMouseEnter","onMouseLeave","class","icon","iconStyle","name","color","iconOnly","minimal","size","onClick"],"mappings":"meAAA,IAAMA,gBAAkB,kiNCAxB,IAAMC,iBAAmB,siNCgBZC,cAAa,WAP1B,SAAAA,EAAAC,GAAA,IAAAC,EAAAC,8BAkBUA,KAAAC,YAAe,MAMfD,KAAAE,SAAY,IAKZF,KAAAG,KAAkBC,WAAWC,QAO7BL,KAAAM,cAAgB,WACtB,OAAQP,EAAKI,MACX,IAAK,UAAW,CACd,MAAO,kBAET,IAAK,SAAU,CACb,MAAO,SAET,IAAK,OAAQ,CACX,MAAO,gBAET,IAAK,UACL,QAAS,CACP,MAAO,cAKLH,KAAAO,QAAU,mBAChBC,OAAOC,aAAaV,EAAKW,UACzBC,GAAAC,EAAAb,EAAKc,MAAE,MAAAD,SAAA,OAAA,EAAAA,EAAEE,iBAAa,MAAAH,SAAA,OAAA,EAAAA,EAAEI,YAAYhB,EAAKc,KAGnCb,KAAAgB,iBAAmB,WACzBR,OAAOC,aAAaV,EAAKW,UAGnBV,KAAAiB,YAAc,WACpB,GAAIlB,EAAKG,WAAagB,WAAanB,EAAKG,UAAY,EAAG,CACrD,OAGFM,OAAOC,aAAaV,EAAKW,SAEzBX,EAAKW,QAAUF,OAAOW,YAAW,WAC/BpB,EAAKQ,YACJR,EAAKG,WAGFF,KAAAoB,mBAAqB,iBAC3B,IAAMC,EAAUC,MAAMC,MAAKX,EAAAY,cAAczB,EAAKc,GAAnBW,CAAuB,cAAU,MAAAZ,SAAA,EAAAA,EAAI,IAC7Da,QACC,SAACC,EAAoBb,GAAO,OAAAc,cAAAA,cAAA,GAAID,EAAO,MAAKJ,MAAMC,KAAKV,EAAGe,UAAS,QACnE,IAEDC,QACC,SAAChB,GACC,OAAAA,EAAGiB,QAAQC,gBAAkB,oBAC5BlB,EAAGmB,UAAUC,SAAS,kBAG7BZ,EAAQa,SAAQ,SAACrB,EAAIsB,GACnBtB,EAAGuB,aAAa,OAAQ,UAExB,GAAID,IAAQ,EAAG,CACbtB,EAAGuB,aAAa,QAASrC,EAAKI,MAGhC,GAAIgC,EAAM,EAAG,CACXtB,EAAGuB,aAAa,QAAS,WACzBvB,EAAGuB,aAAa,UAAW,gBAKjCvC,EAAAwC,UAAAC,kBAAA,WACEtC,KAAKoB,sBAGPvB,EAAAwC,UAAAE,iBAAA,WACEvC,KAAKiB,eAGPpB,EAAAwC,UAAAG,OAAA,WACE,OACEC,EAACC,KAAI,CACHvC,KAAMH,KAAKG,KACXwC,SAAU3C,KAAK2C,SACf1C,YAAaD,KAAKC,cAAgB,MAAQD,KAAKE,WAAa,EAC5D0C,aAAc5C,KAAKgB,iBACnB6B,aAAc7C,KAAKiB,aAEnBwB,EAAA,MAAA,CAAKK,MAAM,eACTL,EAAA,gBAAA,CACEM,KAAM/C,KAAKM,gBACX0C,UAAU,UAIdP,EAAA,MAAA,CAAKK,MAAM,WACTL,EAAA,OAAA,CAAMQ,KAAK,UAEXR,EAAA,OAAA,MAEAA,EAAA,OAAA,CAAMQ,KAAK,cAGXjD,KAAKC,cAAgB,MAAQD,KAAKE,WAAa,IAC/CuC,EAAA,kBAAA,CACES,MAAM,UACNC,SAAU,KACVJ,KAAK,QACLK,QAAS,KACTC,KAAK,QACLC,QAAStD,KAAKO,QACduC,MAAM,gJAtIQ","sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/toast.css';\n","@import '~@stencila/style-stencila/dist/atoms/toast.css';\n","import { Component, Element, h, Host, Prop } from '@stencil/core'\nimport { IconNames } from '../icon/iconNames'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { ToastPosition, ToastType, ToastTypes } from './toastController'\n\n/*\n * Individual Toast component.\n * To present on the page see `./toastController.ts`\n */\n@Component({\n  tag: 'stencila-toast',\n  styleUrls: {\n    default: 'toast.css',\n    material: 'toast.css',\n  },\n})\nexport class StencilaToast {\n  @Element()\n  private el: HTMLStencilaToastElement | null\n\n  private timeout: number\n\n  /**\n   * If true, shows a \"close\" button to immediately dismiss the toast.\n   * Note that this prop has no effect if `duration` is set to zero, in which case\n   * the toast will always show the \"close\" button.\n   */\n  @Prop() dismissable? = false\n\n  /**\n   * Duration in milliseconds for how long the toast should be display\n   * Setting `duration` to `0` will disable auto-dismissal of the toast.\n   */\n  @Prop() duration? = 4_000\n\n  /**\n   * Type of the toast to show. Affects the component colour scheme.\n   */\n  @Prop() type: ToastType = ToastTypes.neutral\n\n  /**\n   * Where on the screen to show the Toast. Overrides the base position set in the `ToastController` instance.\n   */\n  @Prop() position: ToastPosition | undefined\n\n  private getIconByType = (): IconNames => {\n    switch (this.type) {\n      case 'success': {\n        return 'checkbox-circle'\n      }\n      case 'danger': {\n        return 'forbid'\n      }\n      case 'warn': {\n        return 'error-warning'\n      }\n      case 'neutral':\n      default: {\n        return 'question'\n      }\n    }\n  }\n\n  private dismiss = () => {\n    window.clearTimeout(this.timeout)\n    this.el?.parentElement?.removeChild(this.el)\n  }\n\n  private pauseAutoDismiss = () => {\n    window.clearTimeout(this.timeout)\n  }\n\n  private autoDismiss = () => {\n    if (this.duration !== undefined && this.duration <= 0) {\n      return\n    }\n\n    window.clearTimeout(this.timeout)\n\n    this.timeout = window.setTimeout(() => {\n      this.dismiss()\n    }, this.duration)\n  }\n\n  private styleActionButtons = () => {\n    const buttons = Array.from(getSlotByName(this.el)('actions') ?? [])\n      .reduce(\n        (actions: Element[], el) => [...actions, ...Array.from(el.children)],\n        []\n      )\n      .filter(\n        (el) =>\n          el.tagName.toLowerCase() === 'stencila-button' &&\n          !el.classList.contains('closeButton')\n      )\n\n    buttons.forEach((el, idx) => {\n      el.setAttribute('size', 'xsmall')\n\n      if (idx === 0) {\n        el.setAttribute('color', this.type)\n      }\n\n      if (idx > 0) {\n        el.setAttribute('color', 'neutral')\n        el.setAttribute('minimal', 'minimal')\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.styleActionButtons()\n  }\n\n  componentDidLoad() {\n    this.autoDismiss()\n  }\n\n  render() {\n    return (\n      <Host\n        type={this.type}\n        position={this.position}\n        dismissable={this.dismissable === true || this.duration === 0}\n        onMouseEnter={this.pauseAutoDismiss}\n        onMouseLeave={this.autoDismiss}\n      >\n        <div class=\"toastAccent\">\n          <stencila-icon\n            icon={this.getIconByType()}\n            iconStyle=\"fill\"\n          ></stencila-icon>\n        </div>\n\n        <div class=\"content\">\n          <slot name=\"title\"></slot>\n\n          <slot></slot>\n\n          <slot name=\"actions\"></slot>\n        </div>\n\n        {(this.dismissable === true || this.duration === 0) && (\n          <stencila-button\n            color=\"neutral\"\n            iconOnly={true}\n            icon=\"close\"\n            minimal={true}\n            size=\"small\"\n            onClick={this.dismiss}\n            class=\"closeButton\"\n          ></stencila-button>\n        )}\n      </Host>\n    )\n  }\n}\n"]}