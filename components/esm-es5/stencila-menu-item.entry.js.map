{"version":3,"sources":["src/components/menuItem/menuItem.css?tag=stencila-menu-item&mode=default&encapsulation=scoped","src/components/menuItem/menuItem.material.css?tag=stencila-menu-item&mode=material&encapsulation=scoped","src/components/menuItem/menuItem.tsx"],"names":["defaultMenuItemCss","menuItemMaterialCss","MenuItem","hostRef","this","size","role","disabled","divider","prototype","render","ariaAttrs","aria-disabled","h","Host","Object","assign","_a","el","slot","Fragment","icon","undefined"],"mappings":"iGAAA,IAAMA,mBAAqB,8sECA3B,IAAMC,oBAAsB,qqECWfC,SAAQ,WARrB,SAAAA,EAAAC,4BAqBiBC,KAAAC,KAAiD,UAKjDD,KAAAE,KACb,WAK8BF,KAAAG,SAAW,MAMXH,KAAAI,QAAU,MAEnCN,EAAAO,UAAAC,OAAA,iBACL,IAAMC,EAAY,CAChBC,gBAAiBR,KAAKG,UAAYH,KAAKI,QACvCF,KAAMF,KAAKE,MAGb,OACEO,EAACC,KAAIC,OAAAC,OAAA,GAAKL,EAAS,CAAEN,KAAMD,KAAKC,SAC7BY,EAAAb,KAAKc,MAAE,MAAAD,SAAA,OAAA,EAAAA,EAAEE,QAAS,SACjBN,EAACO,SAAQ,KACNhB,KAAKiB,OAASC,WACbT,EAAA,gBAAA,CAAeQ,KAAMjB,KAAKiB,OAE5BR,EAAA,OAAA,OAGFA,EAAA,KAAA,KACGT,KAAKiB,OAASC,WACbT,EAAA,gBAAA,CAAeQ,KAAMjB,KAAKiB,OAE5BR,EAAA,OAAA,uIApDS","sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/menuItem.css';\n","@import '~@stencila/style-material/dist/atoms/menuItem.css';\n","import { Element, Component, h, Host, Prop, Fragment } from '@stencil/core'\nimport { IconNames } from '../icon/iconNames'\n\n@Component({\n  tag: 'stencila-menu-item',\n  styleUrls: {\n    default: 'menuItem.css',\n    material: 'menuItem.material.css',\n  },\n  scoped: true,\n})\nexport class MenuItem {\n  @Element() el: HTMLStencilaMenuItemElement | undefined\n\n  /**\n   * Name of the icon to show before the label\n   * @see Icon component for possible values\n   */\n  @Prop()\n  icon: IconNames | undefined\n\n  /**\n   * The overall size of the component.\n   */\n  @Prop() public size: 'xsmall' | 'small' | 'default' | 'large' = 'default'\n\n  /**\n   * The overall size of the component.\n   */\n  @Prop() public role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' =\n    'menuitem'\n\n  /**\n   * Determines whether the menu item is enabled/clickable or not\n   */\n  @Prop({ reflect: true }) public disabled = false\n\n  /**\n   * Renders the menu item as a section divider.\n   * It does not have any click or hover handlers\n   */\n  @Prop({ reflect: true }) public divider = false\n\n  public render() {\n    const ariaAttrs = {\n      'aria-disabled': this.disabled || this.divider,\n      role: this.role,\n    }\n\n    return (\n      <Host {...ariaAttrs} size={this.size}>\n        {this.el?.slot === 'toggle' ? (\n          <Fragment>\n            {this.icon !== undefined && (\n              <stencila-icon icon={this.icon}></stencila-icon>\n            )}\n            <slot />\n          </Fragment>\n        ) : (\n          <li>\n            {this.icon !== undefined && (\n              <stencila-icon icon={this.icon}></stencila-icon>\n            )}\n            <slot />\n          </li>\n        )}\n      </Host>\n    )\n  }\n}\n"]}