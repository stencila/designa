{"version":3,"sources":["src/components/codeFragment/codeFragment.css?tag=stencila-code-fragment&mode=default&encapsulation=scoped","src/components/codeFragment/codeFragment.css?tag=stencila-code-fragment&mode=material&encapsulation=scoped","src/components/codeFragment/codeFragment.tsx"],"names":["defaultCodeFragmentCss","materialCodeFragmentCss","CodeFragmentComponent","class_1","hostRef","_this","this","mode","languageCapabilities","fileFormatMap","executableLanguages","_b","_a","window","stencilaWebClient","onSelectLanguage","language","languageChange","emit","lookupFormat","programmingLanguage","contentChangeHandler","e","target","currentTarget","contentChange","textContent","selectTextSlot","el","querySelector","prototype","onDiscoverExecutableLanguages","_c","detail","languages","getTextContents","slot","Promise","resolve","render","h","Host","class","LanguagePickerInline","activeLanguage","onSetLanguage","disabled","contentEditable","onInput","role","name"],"mappings":"+qDAAA,IAAMA,uBAAyB,w+FCA/B,IAAMC,wBAA0B,sgGCmCnBC,sBAAqB,WARlC,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,0KAgBEA,KAAAC,KAAwB,OAYjBD,KAAAE,qBAAsCC,cAMtCH,KAAAI,qBACLC,GAAAC,EAAAC,OAAOC,qBAAiB,MAAAF,SAAA,OAAA,EAAAA,EAAEF,uBAAmB,MAAAC,SAAA,EAAAA,EAAI,GAkB3CL,KAAAS,iBAAmB,SAACC,GAC1BX,EAAKY,eAAeC,KAAKC,aAAaH,IACtCX,EAAKe,oBAAsBJ,GASrBV,KAAAe,qBAAuB,SAACC,SAC9B,IAAMC,EAASD,EAAEE,cACjBnB,EAAKoB,cAAcP,MAAKN,EAAAW,EAAOG,eAAW,MAAAd,SAAA,EAAAA,EAAI,KAGxCN,KAAAqB,eAAiB,WACvB,OAAAtB,EAAKuB,GAAGC,cAAc,UAhCxB1B,EAAA2B,UAAAC,8BAAA,SAA8BC,OAC5BC,EAAMD,EAAAC,OAEN3B,KAAKI,oBAAsBuB,EAAOC,WAmCvB/B,EAAA2B,UAAAK,gBAAN,wGACCC,EAAO9B,KAAKqB,iBAClB,MAAA,CAAA,EAAOU,QAAQC,SAAQ1B,EAAAwB,IAAI,MAAJA,SAAI,OAAA,EAAJA,EAAMV,eAAW,MAAAd,SAAA,EAAAA,EAAI,YAGvCT,EAAA2B,UAAAS,OAAA,iBACL,OACEC,EAACC,KAAI,CAACC,MAAM,QACVF,EAAA,OAAA,CAAME,MAAM,oBACVF,EAACG,qBAAoB,CACnBC,gBAAgBhC,EAAAN,KAAKc,uBAAmB,MAAAR,SAAA,EAAAA,EAAI,GAC5CF,oBAAqBJ,KAAKI,oBAC1BmC,cAAevC,KAAKS,iBACpBP,qBAAsBF,KAAKE,qBAC3BsC,SAAUxC,KAAKC,OAAS,UAI5BiC,EAAA,OAAA,CACEE,MAAM,OACNK,gBAAiBzC,KAAKC,OAAS,OAC/ByC,QAAS1C,KAAKe,qBACd4B,KAAK,WAELT,EAAA,OAAA,CAAMU,KAAK,0IA5Fa","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/codeFragment.css';\n","@import '~@stencila/style-stencila/dist/molecules/codeFragment.css';\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core'\nimport { CodeFragment } from '@stencila/schema'\nimport {\n  CodeComponent,\n  DiscoverExecutableLanguagesEvent,\n} from '../code/codeTypes'\nimport { LanguagePickerInline } from '../codeExpression/languageSelect'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\n\n/**\n * @slot text - The contents of the code fragment\n */\n@Component({\n  tag: 'stencila-code-fragment',\n  styleUrls: {\n    default: 'codeFragment.css',\n    material: 'codeFragment.css',\n  },\n  scoped: true,\n})\nexport class CodeFragmentComponent implements CodeComponent<CodeFragment> {\n  @Element() private el: HTMLStencilaCodeExpressionElement\n\n  /**\n   * The context of the component. In `read` mode the code content and its\n   * language cannot be edited.\n   */\n  @Prop({ reflect: true })\n  mode: 'read' | 'edit' = 'read'\n\n  /**\n   * Programming language of the CodeFragment\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string | undefined\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop({ mutable: true })\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n  }\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Function to call when the user selects a new language from the language picker dropdown.\n   */\n  private onSelectLanguage = (language: string): void => {\n    this.languageChange.emit(lookupFormat(language))\n    this.programmingLanguage = language\n  }\n\n  /**\n   * Event emitted when the source code of the `CodeExpression` node is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<string>\n\n  private contentChangeHandler = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.contentChange.emit(target.textContent ?? '')\n  }\n\n  private selectTextSlot = (): HTMLElement | null =>\n    this.el.querySelector(`.text`)\n\n  /**\n   * Returns the text contents from the inline code editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    const slot = this.selectTextSlot()\n    return Promise.resolve(slot?.textContent ?? '')\n  }\n\n  public render() {\n    return (\n      <Host class=\"text\">\n        <span class=\"actionsSecondary\">\n          <LanguagePickerInline\n            activeLanguage={this.programmingLanguage ?? ''}\n            executableLanguages={this.executableLanguages}\n            onSetLanguage={this.onSelectLanguage}\n            languageCapabilities={this.languageCapabilities}\n            disabled={this.mode === 'read'}\n          ></LanguagePickerInline>\n        </span>\n\n        <span\n          class=\"text\"\n          contentEditable={this.mode === 'edit'}\n          onInput={this.contentChangeHandler}\n          role=\"textbox\"\n        >\n          <slot name=\"text\" />\n        </span>\n      </Host>\n    )\n  }\n}\n"]}