{"version":3,"sources":["src/components/documentToolbar/documentToolbar.css?tag=stencila-document-toolbar&mode=default","src/components/documentToolbar/documentToolbar.css?tag=stencila-document-toolbar&mode=material","src/components/documentToolbar/documentToolbar.tsx"],"names":["defaultDocumentToolbarCss","materialDocumentToolbarCss","StencilaDocumentToolbar","hostRef","_this","this","position","isExecutable","Object","keys","_b","_a","window","stencilaWebClient","executableLanguages","length","shiftIsPressed","altIsPressed","onKeyPress","e","shiftKey","altKey","addKeyListeners","addEventListener","removeKeyListeners","removeEventListener","runDocument","isPending","executeStatus","codeExecuteCancelEvent","emit","nodeId","scope","kernelRestart","codeExecuteEvent","ordering","prototype","onDiscoverExecutableLanguages","_c","detail","languages","render","h","Host","slot","onKeyDown","color","icon","size","onClick","disabled","dataEl","onMouseEnter","onMouseLeave","tooltip","undefined","sourceUrl","href","target","rel"],"mappings":"wIAAA,IAAMA,0BAA4B,ksCCAlC,IAAMC,2BAA6B,ssCC4BtBC,wBAAuB,WAPpC,SAAAA,EAAAC,GAAA,IAAAC,EAAAC,wPAoBSA,KAAAC,SAA+B,QAStCD,KAAAE,aACEC,OAAOC,MAAKC,GAAAC,EAAAC,OAAOC,qBAAiB,MAAAF,SAAA,OAAA,EAAAA,EAAEG,uBAAmB,MAAAJ,SAAA,EAAAA,EAAI,IAAIK,OAAS,EAG5EV,KAAAW,eAAiB,MAGjBX,KAAAY,aAAe,MAEPZ,KAAAa,WAAa,SAACC,GACpBf,EAAKY,eAAiBG,EAAEC,SACxBhB,EAAKa,aAAeE,EAAEE,QAGhBhB,KAAAiB,gBAAkB,WACxBV,OAAOW,iBAAiB,UAAWnB,EAAKc,YACxCN,OAAOW,iBAAiB,QAASnB,EAAKc,aAGhCb,KAAAmB,mBAAqB,WAC3BZ,OAAOa,oBAAoB,UAAWrB,EAAKc,YAC3CN,OAAOa,oBAAoB,QAASrB,EAAKc,YACzCd,EAAKY,eAAiB,MACtBZ,EAAKa,aAAe,OAoCdZ,KAAAqB,YAAc,SAACP,GACrB,GAAIQ,UAAUvB,EAAKwB,eAAgB,CACjCxB,EAAKyB,uBAAuBC,KAAK,CAC/BC,OAAQ,KACRC,MAAO,YAEJ,CACL,GAAI5B,EAAKa,aAAc,CAErBb,EAAK6B,cAAcH,WACd,CAEL1B,EAAK8B,iBAAiBJ,KAAK,CACzBC,OAAQ,KACRI,SAAUhB,EAAEC,SAAW,aAAe,mBA9C9ClB,EAAAkC,UAAAC,8BAAA,SAA8BC,OAC5BC,EAAMD,EAAAC,OAENlC,KAAKE,aAAeC,OAAOC,KAAK8B,EAAOC,WAAWzB,OAAS,GAiD7Db,EAAAkC,UAAAK,OAAA,WACE,OACEC,EAACC,KAAI,CAACrC,SAAUD,KAAKC,UACnBoC,EAAA,mBAAA,KACEA,EAAA,OAAA,CAAME,KAAK,SACTF,EAAA,kBAAA,CACEG,UAAWxC,KAAKa,WAChB4B,MAAM,QACNC,KACE1C,KAAKY,aACD,UACAU,UAAUtB,KAAKuB,eACf,OACA,OAENoB,KAAK,QACLC,QAAS5C,KAAKqB,YACdwB,UAAW7C,KAAKE,aAChB4C,OAAO,uBACPC,aAAc/C,KAAKiB,gBACnB+B,aAAchD,KAAKmB,mBACnB8B,QACEjD,KAAKY,aACDsC,UACAlD,KAAKW,eACL,8CACA,4BAGLX,KAAKY,aACF,kBACAU,UAAUtB,KAAKuB,eACf,aACA,YAIPvB,KAAKmD,YAAcD,WAClBb,EAAA,OAAA,CAAME,KAAK,OACTF,EAAA,kBAAA,CACEI,MAAM,QACNW,KAAMpD,KAAKmD,UACXE,OAAO,SACPC,IAAI,oBACJZ,KAAK,gBACLC,KAAK,QACLG,OAAO,0BAAwB,uBAnJX","sourcesContent":["@import '~@stencila/style-stencila/dist/objects/documentToolbar.css';\n","@import '~@stencila/style-stencila/dist/objects/documentToolbar.css';\n","import {\n  Component,\n  ComponentInterface,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core'\nimport {\n  CodeExecuteCancelEvent,\n  CodeExecuteEvent,\n  DiscoverExecutableLanguagesEvent,\n  ExecuteStatus,\n} from '../code/codeTypes'\nimport { isPending } from '../code/codeUtils'\n\n// =============================================================================\n\n@Component({\n  tag: 'stencila-document-toolbar',\n  styleUrls: {\n    default: 'documentToolbar.css',\n    material: 'documentToolbar.css',\n  },\n})\nexport class StencilaDocumentToolbar implements ComponentInterface {\n  /**\n   * The URL of the document being decorated. Could be a Snapshot from Stencila Hub, a Project URL, or something else.\n   */\n  @Prop()\n  sourceUrl: string\n\n  /**\n   * When `fixed` the Navbar will remain pinned to the top of the screen.\n   * Note that if the Navbar component is not followed by a sibling element,\n   * you will have to set `margin-top: 3rem` on the following element yourself.\n   */\n  @Prop()\n  public position: 'fixed' | 'static' = 'fixed'\n\n  /**\n   * The execution status of the document\n   */\n  @Prop()\n  executeStatus: ExecuteStatus\n\n  @State()\n  isExecutable: boolean =\n    Object.keys(window.stencilaWebClient?.executableLanguages ?? {}).length > 0\n\n  @State()\n  shiftIsPressed = false\n\n  @State()\n  altIsPressed = false\n\n  private onKeyPress = (e: KeyboardEvent): void => {\n    this.shiftIsPressed = e.shiftKey\n    this.altIsPressed = e.altKey\n  }\n\n  private addKeyListeners = () => {\n    window.addEventListener('keydown', this.onKeyPress)\n    window.addEventListener('keyup', this.onKeyPress)\n  }\n\n  private removeKeyListeners = () => {\n    window.removeEventListener('keydown', this.onKeyPress)\n    window.removeEventListener('keyup', this.onKeyPress)\n    this.shiftIsPressed = false\n    this.altIsPressed = false\n  }\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.isExecutable = Object.keys(detail.languages).length > 0\n  }\n\n  /**\n   * Emitted to indicate that code node should be executed\n   *\n   */\n  @Event({\n    eventName: 'stencila-code-execute',\n  })\n  public codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  /**\n   * Emitted to indicate that language kernels should be restarted\n   *\n   */\n  @Event({\n    eventName: 'stencila-kernel-restart',\n  })\n  public kernelRestart: EventEmitter<Record<string, never>>\n\n  /**\n   * Emitted to indicate that the execution of the code node should be cancelled/interrupted.\n   */\n  @Event({\n    eventName: 'stencila-code-execute-cancel',\n  })\n  public codeExecuteCancelEvent: EventEmitter<CodeExecuteCancelEvent['detail']>\n\n  private runDocument = (e: MouseEvent) => {\n    if (isPending(this.executeStatus)) {\n      this.codeExecuteCancelEvent.emit({\n        nodeId: null,\n        scope: 'All',\n      })\n    } else {\n      if (this.altIsPressed) {\n        // Restart kernel\n        this.kernelRestart.emit()\n      } else {\n        // Execute document\n        this.codeExecuteEvent.emit({\n          nodeId: null,\n          ordering: e.shiftKey ? 'Appearance' : 'Topological',\n        })\n      }\n    }\n  }\n\n  render(): HTMLElement {\n    return (\n      <Host position={this.position}>\n        <stencila-toolbar>\n          <span slot=\"start\">\n            <stencila-button\n              onKeyDown={this.onKeyPress}\n              color=\"stock\"\n              icon={\n                this.altIsPressed\n                  ? 'restart'\n                  : isPending(this.executeStatus)\n                  ? 'stop'\n                  : 'play'\n              }\n              size=\"small\"\n              onClick={this.runDocument}\n              disabled={!this.isExecutable}\n              dataEl=\"Toolbar/Run Document\"\n              onMouseEnter={this.addKeyListeners}\n              onMouseLeave={this.removeKeyListeners}\n              tooltip={\n                this.altIsPressed\n                  ? undefined\n                  : this.shiftIsPressed\n                  ? 'Run in sequentially, in order of appearance'\n                  : 'Run in topological order'\n              }\n            >\n              {this.altIsPressed\n                ? 'Restart kernels'\n                : isPending(this.executeStatus)\n                ? 'Cancel all'\n                : 'Run all'}\n            </stencila-button>\n          </span>\n\n          {this.sourceUrl !== undefined && (\n            <span slot=\"end\">\n              <stencila-button\n                color=\"stock\"\n                href={this.sourceUrl}\n                target=\"_blank\"\n                rel=\"nofollow noopener\"\n                icon=\"external-link\"\n                size=\"small\"\n                dataEl=\"Toolbar/Project Source\"\n              >\n                Source\n              </stencila-button>\n            </span>\n          )}\n        </stencila-toolbar>\n      </Host>\n    )\n  }\n}\n"]}