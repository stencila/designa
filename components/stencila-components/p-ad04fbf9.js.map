{"version":3,"sources":["node_modules/@lezer/lr/dist/index.js"],"names":["Stack","[object Object]","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","filter","_","i","concat","cx","parser","context","StackContext","start","push","length","action","depth","type","dPrec","dynamicPrecedence","pushState","getGoto","minRepeatTerm","storeNode","reduceContext","base","count","stateFlag","baseStateID","pop","term","end","size","isReduce","cur","top","index","next","nextEnd","nextState","maxNode","shiftContext","reduce","shift","value","reused","updateContext","tracker","reuse","stream","reset","off","slice","isNode","sim","SimulatedStack","stateSlot","hasAction","nextStates","best","s","some","v","result","split","validAction","target","forceReduce","deadEnd","data","other","dialectID","dialect","flags","last","hash","newCx","emitContext","emitLookAhead","strict","Recover","goto","StackBufferCursor","maybeNext","id","CachedToken","extended","mask","nullToken","InputStream","input","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","from","range","to","readNext","offset","assoc","idx","charCodeAt","resolved","resolveOffset","endOffset","RangeError","nextChunk","getChunk","n","setDone","read","r","Math","max","min","TokenGroup","readToken","prototype","contextual","fallback","extend","ExternalTokenizer","options","group","groupMask","scan","accEnd","allows","overrides","acceptToken","low","high","mid","advance","decodeArray","Type","Uint16Array","array","out","stop","digit","verbose","process","test","env","LOG","stackIDs","Safety","cutAt","tree","side","cursor","fullCursor","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","nodeSet","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","setLookAhead","eofTerm","specialized","specializers","set","pair","putAction","Rec","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","newStacks","stopped","stoppedTokens","advanceStack","tok","getMainToken","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","forceAll","maxRemaining","sort","a","b","outer","j","sameState","splice","stackID","strictCx","cxHash","cached","nodeAt","match","types","contextHash","useNode","inner","defaultReduce","getActions","localStack","apply","pushStackDedup","restarted","tokenEnd","restart","done","advanceFully","force","forceBase","insert","recoverByInsert","recoverByDelete","close","build","create","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","Parser","super","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skipped","skippedNodes","DefaultBufferLength","tokenArray","tokenData","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","findOffset","config","copy","assign","info","t","found","find","contextTracker","wrap","topNode","prec","values","part","Uint8Array"],"mappings":"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","sourcesContent":["import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.pushState(s, this.pos);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        // Do a binary search on the state's edges\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.fullCursor();\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 13 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };\n"]}