{"version":3,"sources":["src/components/codeDependency/codeDependency.css?tag=stencila-code-dependency&mode=default&encapsulation=scoped","src/components/codeDependency/codeDependency.material.css?tag=stencila-code-dependency&mode=material&encapsulation=scoped","src/components/codeDependency/codeDependency.tsx"],"names":["defaultCodeDependencyCss","codeDependencyMaterialCss","CodeDependency","exports","class_1","prototype","render","_b","this","nodeKind","label","concat","nodeId","href","target","h","Host","CodeExecuteStatus","executeStatus","executeRequired","class","_a","programmingLanguage","undefined"],"mappings":"sOAAA,IAAMA,EAA2B,+9ECAjC,IAAMC,EAA4B,OCYrBC,EAAcC,EAAA,2BAAA,mCA+ClBC,EAAAC,UAAAC,OAAA,iBACC,IAAAC,EACJC,KAAKC,WAAa,QAAUD,KAAKE,MAC7B,CAACF,KAAKE,MAAO,SACb,CAAC,IAAAC,OAAIH,KAAKI,QAAU,IAHnBC,EAAIN,EAAA,GAAEO,EAAMP,EAAA,GAInB,OACEQ,EAACC,EAAI,KACHD,EAAA,IAAA,CAAGF,KAAMA,EAAMC,OAAQA,GACrBC,EAACE,EAAiB,CAChBC,cAAeV,KAAKU,cACpBC,gBAAiBX,KAAKW,gBACtBV,SAAUD,KAAKC,WAEjBM,EAAA,MAAA,CAAKK,MAAM,WACTL,EAAA,MAAA,CAAKK,MAAM,UACRC,EAAAb,KAAKE,SAAK,MAAAW,SAAA,EAAAA,EAAIb,KAAKI,OAEnBJ,KAAKc,sBAAwBC,WAC5BR,EAAA,OAAA,KAAOP,KAAKc,sBAIhBP,EAAA,MAAA,KACEA,EAAA,OAAA,CAAMK,MAAM,UAAUZ,KAAKC,wBAtEd","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/codeDependency.css';\n",null,"import { Component, h, Host, Prop } from '@stencil/core'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport { ExecuteRequired, ExecuteStatus } from '../code/codeTypes'\n\n@Component({\n  tag: 'stencila-code-dependency',\n  styleUrls: {\n    default: 'codeDependency.css',\n    material: 'codeDependency.material.css',\n  },\n  scoped: true,\n})\nexport class CodeDependency {\n  /**\n   * The Node ID, should match the HTML `id` attribute.\n   */\n  @Prop()\n  nodeId: string\n\n  /**\n   * User assigned label for the node\n   */\n  @Prop()\n  label: string | undefined\n\n  /**\n   * Node kind, such as `CodeChunk`, `CodeExpression`, `Parameter`, etc.\n   * Aligns with the Stencila Schema node types.\n   */\n  @Prop()\n  nodeKind: string\n\n  /**\n   * Whether the dependency should be automatically re-executed based on semantic\n   * analysis of the code.\n   */\n  @Prop()\n  executeAuto: 'Always' | 'Auto' | 'Never'\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus?: ExecuteStatus\n\n  /**\n   * Programming language of the CodeExpression, note that not all nodes have this\n   * property (`Parameter` for example).\n   */\n  @Prop()\n  programmingLanguage?: string\n\n  public render() {\n    const [href, target] =\n      this.nodeKind === 'File' && this.label\n        ? [this.label, 'blank']\n        : [`#${this.nodeId}`, '']\n    return (\n      <Host>\n        <a href={href} target={target}>\n          <CodeExecuteStatus\n            executeStatus={this.executeStatus}\n            executeRequired={this.executeRequired}\n            nodeKind={this.nodeKind}\n          ></CodeExecuteStatus>\n          <div class=\"content\">\n            <div class=\"label\">\n              {this.label ?? this.nodeId}\n\n              {this.programmingLanguage !== undefined && (\n                <code>{this.programmingLanguage}</code>\n              )}\n            </div>\n\n            <div>\n              <span class=\"status\">{this.nodeKind}</span>\n            </div>\n          </div>\n        </a>\n      </Host>\n    )\n  }\n}\n"]}