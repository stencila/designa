{"version":3,"sources":["src/components/actionMenu/actionMenu.css?tag=stencila-action-menu&mode=default&encapsulation=scoped","src/components/actionMenu/actionMenu.css?tag=stencila-action-menu&mode=material&encapsulation=scoped","src/components/actionMenu/actionMenu.tsx"],"names":["defaultActionMenuCss","materialActionMenuCss","slots","default","persistentActions","ActionMenu","[object Object]","hostRef","this","isCollapsed","toggleActionMenu","width","isAnimating","isTransitioning","calculateWidth","actionContainerRef","getBoundingClientRect","observer","window","MutationObserver","checkForSecondaryActions","hasSecondaryActions","Array","from","el","children","some","child","slot","requestAnimationFrame","addEventListener","observe","characterData","subtree","disconnect","length","h","class","name","secondaryActions","hidden","onClick","icon","color","minimal","size","iconOnly","ariaLabel","actionContainer","ref","style","--max-width"],"mappings":"kDAAA,MAAMA,EAAuB,urDCA7B,MAAMC,EAAwB,8sDCE9B,MAAMC,EAAQ,CACZC,QAAS,GACTC,kBAAmB,2BAWRC,EAAU,MARvBC,YAAAC,aAmBmBC,KAAAC,YAAc,MAEvBD,KAAAE,iBAAmB,IAAOF,KAAKC,aAAeD,KAAKC,YAE1CD,KAAAG,MAAQ,OACRH,KAAAI,YAAc,MAGvBJ,KAAAK,gBAAkB,MAElBL,KAAAM,eAAiB,KACvB,GAAIN,KAAKO,oBAAsBP,KAAKK,kBAAoB,MAAO,CAC7DL,KAAKG,MAAQ,OAEb,MAAMA,EAAQH,KAAKO,mBAAmBC,wBAAwBL,MAE9DH,KAAKG,MAAQ,GAAGA,QAIZH,KAAAS,SAAW,IAAIC,OAAOC,iBAAiBX,KAAKM,gBAE5CN,KAAAY,yBAA2B,KACjCZ,KAAKa,oBAAsBC,MAAMC,KAAKf,KAAKgB,GAAGC,UAAUC,MAAMC,GACrDA,EAAMC,OAAS,KAExB,OAAOpB,KAAKa,qBAGJf,oBACRE,KAAKY,2BAGGd,mBACR,GAAIE,KAAKO,mBAAoB,CAC3BG,OAAOW,uBAAsB,KAC3B,GAAIrB,KAAKO,oBAAsBP,KAAKa,oBAAqB,CACvDb,KAAKO,mBAAmBe,iBACtB,mBACA,IAAOtB,KAAKK,gBAAkB,OAGhCL,KAAKO,mBAAmBe,iBACtB,iBACA,IAAOtB,KAAKK,gBAAkB,QAGhCL,KAAKS,SAASc,QAAQvB,KAAKgB,GAAI,CAC7BQ,cAAe,KACfC,QAAS,OAGXzB,KAAKM,iBACLN,KAAKC,YAAc,UAMjBH,uBACRE,KAAKS,SAASiB,aAGT5B,SACL,GAAIE,KAAKgB,GAAGC,SAASU,QAAU,EAAG,OAAO,KAEzC,OACEC,EAAA,MAAA,KACEA,EAAA,OAAA,CAAMC,MAAM,qBACVD,EAAA,OAAA,CAAME,KAAMpC,EAAME,qBAGpBgC,EAAA,OAAA,CACEC,MAAO,CACLE,iBAAkB,KAClBC,QAAShC,KAAKa,sBAGhBe,EAAA,kBAAA,CACEK,QAASjC,KAAKE,iBACdgC,KAAK,OACLC,MAAM,MACNC,QAAS,KACTC,KAAK,SACLC,SAAU,KACVC,UAAU,uBAGZX,EAAA,OAAA,CACEC,MAAO,CACLW,gBAAiB,KACjBpC,YAAaJ,KAAKI,YAClBH,YAAaD,KAAKC,aAEpBwC,IAAMzB,GAAQhB,KAAKO,mBAAqBS,EACxC0B,MAAO,CAAEC,cAAe3C,KAAKG,QAE7ByB,EAAA,OAAA","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/actionMenu.css';\n","@import '~@stencila/style-stencila/dist/molecules/actionMenu.css';\n","import { Component, Element, h, Prop, State } from '@stencil/core'\n\nconst slots = {\n  default: '',\n  persistentActions: 'persistentActions',\n}\n\n@Component({\n  tag: 'stencila-action-menu',\n  styleUrls: {\n    default: 'actionMenu.css',\n    material: 'actionMenu.css',\n  },\n  scoped: true,\n})\nexport class ActionMenu {\n  @Element() private el: HTMLStencilaActionMenuElement\n\n  /**\n   * List of buttons to include in Action Menu.\n   */\n  @Prop()\n  public actions: HTMLButtonElement[]\n\n  @State() private hasSecondaryActions: boolean\n\n  @State() private isCollapsed = false\n\n  private toggleActionMenu = () => (this.isCollapsed = !this.isCollapsed)\n\n  @State() private width = 'auto'\n  @State() private isAnimating = false\n\n  private actionContainerRef: HTMLSpanElement | undefined\n  private isTransitioning = false\n\n  private calculateWidth = () => {\n    if (this.actionContainerRef && this.isTransitioning === false) {\n      this.width = 'auto'\n\n      const width = this.actionContainerRef.getBoundingClientRect().width\n\n      this.width = `${width}px`\n    }\n  }\n\n  private observer = new window.MutationObserver(this.calculateWidth)\n\n  private checkForSecondaryActions = (): boolean => {\n    this.hasSecondaryActions = Array.from(this.el.children).some((child) => {\n      return child.slot === ''\n    })\n    return this.hasSecondaryActions\n  }\n\n  protected componentWillLoad(): void {\n    this.checkForSecondaryActions()\n  }\n\n  protected componentDidLoad(): void {\n    if (this.actionContainerRef) {\n      window.requestAnimationFrame(() => {\n        if (this.actionContainerRef && this.hasSecondaryActions) {\n          this.actionContainerRef.addEventListener(\n            'transitionstart',\n            () => (this.isTransitioning = true)\n          )\n\n          this.actionContainerRef.addEventListener(\n            'transitionend',\n            () => (this.isTransitioning = false)\n          )\n\n          this.observer.observe(this.el, {\n            characterData: true,\n            subtree: true,\n          })\n\n          this.calculateWidth()\n          this.isCollapsed = true\n        }\n      })\n    }\n  }\n\n  protected disconnectedCallback(): void {\n    this.observer.disconnect()\n  }\n\n  public render() {\n    if (this.el.children.length <= 0) return null\n\n    return (\n      <nav>\n        <span class=\"persistentActions\">\n          <slot name={slots.persistentActions} />\n        </span>\n\n        <span\n          class={{\n            secondaryActions: true,\n            hidden: !this.hasSecondaryActions,\n          }}\n        >\n          <stencila-button\n            onClick={this.toggleActionMenu}\n            icon=\"more\"\n            color=\"key\"\n            minimal={true}\n            size=\"xsmall\"\n            iconOnly={true}\n            ariaLabel=\"Toggle Action Menu\"\n          ></stencila-button>\n\n          <span\n            class={{\n              actionContainer: true,\n              isAnimating: this.isAnimating,\n              isCollapsed: this.isCollapsed,\n            }}\n            ref={(el) => (this.actionContainerRef = el)}\n            style={{ '--max-width': this.width }}\n          >\n            <slot />\n          </span>\n        </span>\n      </nav>\n    )\n  }\n}\n"]}