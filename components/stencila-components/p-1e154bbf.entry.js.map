{"version":3,"sources":["src/components/error/error.css?tag=stencila-code-error&mode=default&encapsulation=scoped","src/components/error/error.css?tag=stencila-code-error&mode=material&encapsulation=scoped","src/components/error/error.tsx"],"names":["defaultErrorCss","materialErrorCss","CodeErrorComponent","[object Object]","hostRef","this","hasStackTrace","stackTraceIsOpen","toggleStackTraceIsOpen","e","preventDefault","level","undefined","errorType","_b","_a","getSlotByName","el","textContent","toLowerCase","includes","stackTrace","updateLevel","updateHasStackTrace","h","Host","class","onClick","name","icon","open"],"mappings":"mFAAA,MAAMA,EAAkB,spKCAxB,MAAMC,EAAmB,kuKCcZC,EAAkB,MAR/BC,YAAAC,aAmDUC,KAAAC,cAAgB,MAchBD,KAAAE,iBAAmB,MAEnBF,KAAAG,uBAA0BC,IAChCA,EAAEC,iBACFL,KAAKE,kBAAoBF,KAAKE,kBA1CxBJ,sBACN,GAAIE,KAAKM,QAAUC,UAAW,CAC5B,OAGF,MAAMC,GAAYC,GAAAC,EAAAC,EAAcX,KAAKY,GAAnBD,CAChB,QACA,MAAE,MAAAD,SAAA,OAAA,EAAAA,EAAEG,eAAW,MAAAJ,SAAA,OAAA,EAAAA,EAAEK,cAEnB,UAAWN,IAAc,UAAYA,IAAc,GAAI,CACrDR,KAAKM,MAAQE,EAAUO,SAAS,QAC5B,OACAP,EAAUO,SAAS,QACnB,OACA,YACC,CACLf,KAAKM,MAAQ,SAaTR,4BACN,MAAMkB,GAAaN,EAAAC,EAAcX,KAAKY,GAAnBD,CAAuB,cAAc,MAAE,MAAAD,SAAA,OAAA,EAAAA,EAAEG,YAC5Db,KAAKC,qBAAuBe,IAAe,UAAYA,IAAe,GAiBxElB,oBACEE,KAAKiB,cACLjB,KAAKkB,sBAGPpB,SACE,OACEqB,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,MAAM,WAAWC,QAAStB,KAAKG,wBAClCgB,EAAA,OAAA,CAAMI,KAAK,SACXJ,EAAA,OAAA,CAAMI,KAAK,YACXJ,EAAA,gBAAA,CACEK,KAAK,QACLH,MAAO,mBAAmBrB,KAAKC,cAAgB,GAAK,YAGxDkB,EAAA,mBAAA,CACEM,KAAMzB,KAAKE,iBACXmB,MAAO,sBAAsBrB,KAAKC,cAAgB,GAAK,UAEvDkB,EAAA,OAAA,CAAMI,KAAK","sourcesContent":["@import '~@stencila/style-stencila/dist/objects/errors.css';\n","@import '~@stencila/style-stencila/dist/objects/errors.css';\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core'\nimport { CodeError } from '@stencila/schema'\nimport { getSlotByName } from '../utils/slotSelectors'\n\nexport type Level = 'info' | 'warn' | 'error'\n\n@Component({\n  tag: 'stencila-code-error',\n  styleUrls: {\n    default: 'error.css',\n    material: 'error.css',\n  },\n  scoped: true,\n})\nexport class CodeErrorComponent {\n  /**\n   * The `CodeError` node\n   */\n  @Prop()\n  error?: CodeError\n\n  /**\n   * The severity of the error message\n   */\n  @Prop({ mutable: true, reflect: true })\n  level?: Level\n\n  /**\n   * Update the level, if not defined, based on the content of the `type` slot\n   *\n   * In the future, `CodeError` is likely to be replace with `CodeNotification` (or similar)\n   * and `level` will be a property (so it does not need to be derived here)\n   */\n  private updateLevel() {\n    if (this.level !== undefined) {\n      return\n    }\n\n    const errorType = getSlotByName(this.el)(\n      'type'\n    )[0]?.textContent?.toLowerCase()\n\n    if (typeof errorType === 'string' && errorType !== '') {\n      this.level = errorType.includes('info')\n        ? 'info'\n        : errorType.includes('warn')\n        ? 'warn'\n        : 'error'\n    } else {\n      this.level = 'error'\n    }\n  }\n\n  /**\n   * Flag for whether there is a stack trace\n   */\n  @State()\n  private hasStackTrace = false\n\n  /**\n   * Determine if the `stacktrace` slot has content\n   */\n  private updateHasStackTrace() {\n    const stackTrace = getSlotByName(this.el)('stacktrace')[0]?.textContent\n    this.hasStackTrace = typeof stackTrace === 'string' && stackTrace !== ''\n  }\n\n  /**\n   * Toggle for visibility of the stack trace\n   */\n  @State()\n  private stackTraceIsOpen = false\n\n  private toggleStackTraceIsOpen = (e: MouseEvent) => {\n    e.preventDefault()\n    this.stackTraceIsOpen = !this.stackTraceIsOpen\n  }\n\n  @Element()\n  private el: HTMLStencilaCodeErrorElement | null\n\n  componentWillLoad() {\n    this.updateLevel()\n    this.updateHasStackTrace()\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"overview\" onClick={this.toggleStackTraceIsOpen}>\n          <slot name=\"type\" />\n          <slot name=\"message\" />\n          <stencila-icon\n            icon=\"stack\"\n            class={`stacktrace-icon ${this.hasStackTrace ? '' : 'hide'}`}\n          ></stencila-icon>\n        </div>\n        <stencila-details\n          open={this.stackTraceIsOpen}\n          class={`stacktrace-details ${this.hasStackTrace ? '' : 'hide'}`}\n        >\n          <slot name=\"stacktrace\" />\n        </stencila-details>\n      </Host>\n    )\n  }\n}\n"]}