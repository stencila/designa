{"version":3,"sources":["src/components/editor/languageUtils.ts"],"names":["fileFormatMap","exports","Bash","name","ext","aliases","Calc","Dockerfile","HTML","JavaScript","JSON","LaTeX","Markdown","PlainText","PrQL","Python","R","R Markdown","SQL","TOML","TypeScript","XML","YAML","ZSH","lookupFormat","targetFormat","targetFormatStandardized","toLowerCase","resolvedFormat","_a","Object","values","find","formats","includes"],"mappings":"2EAQaA,EAAaC,EAAA,IAAkB,CAC1CC,KAAM,CACJC,KAAM,OACNC,IAAK,KACLC,QAAS,CAAC,OAAQ,QAAS,OAE7BC,KAAM,CACJH,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZE,WAAY,CACVJ,KAAM,aACNC,IAAK,KACLC,QAAS,CAAC,eAEZG,KAAM,CACJL,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZI,WAAY,CACVN,KAAM,aACNC,IAAK,KACLC,QAAS,CAAC,aAAc,OAE1BK,KAAM,CACJP,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZM,MAAO,CACLR,KAAM,QACNC,IAAK,MACLC,QAAS,CAAC,QAAS,OAAQ,QAE7BO,SAAU,CACRT,KAAM,WACNC,IAAK,KACLC,QAAS,CAAC,WAAY,OAExBQ,UAAW,CACTV,KAAM,aACNC,IAAK,MACLC,QAAS,CAAC,QAEZS,KAAM,CACJX,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZU,OAAQ,CACNZ,KAAM,SACNC,IAAK,KACLC,QAAS,CAAC,SAAU,KAAM,UAE5BW,EAAG,CACDb,KAAM,IACNC,IAAK,IACLC,QAAS,CAAC,MAEZY,aAAc,CACZd,KAAM,aACNC,IAAK,MACLC,QAAS,CAAC,MAAO,aAAc,cAEjCa,IAAK,CACHf,KAAM,MACNC,IAAK,MACLC,QAAS,CAAC,QAEZc,KAAM,CACJhB,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZe,WAAY,CACVjB,KAAM,aACNC,IAAK,KACLC,QAAS,CAAC,aAAc,OAE1BgB,IAAK,CACHlB,KAAM,MACNC,IAAK,MACLC,QAAS,CAAC,QAEZiB,KAAM,CACJnB,KAAM,OACNC,IAAK,OACLC,QAAS,CAAC,SAEZkB,IAAK,CACHpB,KAAM,MACNC,IAAK,MACLC,QAAS,CAAC,cASDmB,EAAYvB,EAAA,KAAG,SAACwB,SAE3B,IAAMC,EAA2BD,EAAaE,cAC9C,IAAMC,GACJC,EAAAC,OAAOC,OAAO/B,GAAegC,MAC3B,SAACC,GACC,OAAAP,IAA6BO,EAAQ9B,MACpC8B,EAAQ7B,MAAQ,MAAQsB,IAA6BO,EAAQ7B,KAC9D6B,EAAQ5B,QAAQ6B,SAASR,SAC5B,MAAAG,SAAA,EAAAA,EAAI7B,EAAca,UAErB,OAAOe","sourcesContent":["export type FileFormat = {\n  name: string\n  ext: string | null\n  aliases: string[]\n}\n\nexport type FileFormatMap = Record<string, FileFormat>\n\nexport const fileFormatMap: FileFormatMap = {\n  Bash: {\n    name: 'Bash',\n    ext: 'sh',\n    aliases: ['bash', 'shell', 'sh'],\n  },\n  Calc: {\n    name: 'Calc',\n    ext: 'calc',\n    aliases: ['calc'],\n  },\n  Dockerfile: {\n    name: 'Dockerfile',\n    ext: null,\n    aliases: ['dockerfile'],\n  },\n  HTML: {\n    name: 'HTML',\n    ext: 'html',\n    aliases: ['html'],\n  },\n  JavaScript: {\n    name: 'JavaScript',\n    ext: 'js',\n    aliases: ['javascript', 'js'],\n  },\n  JSON: {\n    name: 'JSON',\n    ext: 'json',\n    aliases: ['json'],\n  },\n  LaTeX: {\n    name: 'LaTeX',\n    ext: 'tex',\n    aliases: ['latex', 'stex', 'tex'],\n  },\n  Markdown: {\n    name: 'Markdown',\n    ext: 'md',\n    aliases: ['markdown', 'md'],\n  },\n  PlainText: {\n    name: 'Plain Text',\n    ext: 'txt',\n    aliases: ['txt'],\n  },\n  PrQL: {\n    name: 'PrQL',\n    ext: 'prql',\n    aliases: ['prql'],\n  },\n  Python: {\n    name: 'Python',\n    ext: 'py',\n    aliases: ['python', 'py', 'ipynb'],\n  },\n  R: {\n    name: 'R',\n    ext: 'r',\n    aliases: ['r'],\n  },\n  'R Markdown': {\n    name: 'R Markdown',\n    ext: 'rmd',\n    aliases: ['rmd', 'r markdown', 'rmarkdown'],\n  },\n  SQL: {\n    name: 'SQL',\n    ext: 'sql',\n    aliases: ['sql'],\n  },\n  TOML: {\n    name: 'TOML',\n    ext: 'toml',\n    aliases: ['toml'],\n  },\n  TypeScript: {\n    name: 'TypeScript',\n    ext: 'ts',\n    aliases: ['typescript', 'ts'],\n  },\n  XML: {\n    name: 'XML',\n    ext: 'xml',\n    aliases: ['xml'],\n  },\n  YAML: {\n    name: 'YAML',\n    ext: 'yaml',\n    aliases: ['yaml'],\n  },\n  ZSH: {\n    name: 'ZSH',\n    ext: 'zsh',\n    aliases: ['zsh'],\n  },\n}\n\n/**\n * Attempts to look up a language format by the provided string.\n * Falls back to `Plain Text` if a match cannot be found.\n * @param {string} language - Can be one the format name, file extension, or one of the aliases.\n */\nexport const lookupFormat = (targetFormat: string): FileFormat => {\n  // Standardize names to lowercase to simplify matches\n  const targetFormatStandardized = targetFormat.toLowerCase()\n  const resolvedFormat =\n    Object.values(fileFormatMap).find(\n      (formats) =>\n        targetFormatStandardized === formats.name ||\n        (formats.ext !== null && targetFormatStandardized === formats.ext) ||\n        formats.aliases.includes(targetFormatStandardized)\n    ) ?? fileFormatMap.PlainText\n\n  return resolvedFormat\n}\n"]}