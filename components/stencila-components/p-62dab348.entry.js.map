{"version":3,"sources":["src/components/codeExpression/codeExpression.css?tag=stencila-code-expression&mode=default&encapsulation=scoped","src/components/codeExpression/codeExpression.css?tag=stencila-code-expression&mode=material&encapsulation=scoped","src/components/codeExpression/codeExpression.tsx"],"names":["defaultCodeExpressionCss","materialCodeExpressionCss","slots","text","output","errors","CodeExpressionComponent","[object Object]","hostRef","this","hoverTimeOut","undefined","hoverStartedAt","Date","now","readOnly","languageCapabilities","fileFormatMap","executableLanguages","_b","_a","window","stencilaWebClient","isExecutable","shiftIsPressed","onSelectLanguage","language","languageChange","emit","lookupFormat","programmingLanguage","hover","isCodeVisible","toggleCodeVisibility","event","preventDefault","shiftKey","allCodeVisibilityChange","isVisible","selectTextSlot","el","querySelector","contentChangeHandler","e","target","currentTarget","contentChange","textContent","handleKeyDown","key","ctrlKey","execute","catch","err","console","error","checkIfExecutable","executeHandler","Object","keys","length","activeLanguageFormat","name","values","some","format","onExecuteHandler","async","ordering","node","getContents","isPending","executeStatus","codeExecuteCancelEvent","nodeId","id","scope","codeExecuteEvent","computed","codeExpression","executeRef","onMouseOutHandler","relatedTarget","contains","removeHoverState","addHoverState","clearTimeout","diff","setTimeout","onKeyPress","addKeyListeners","addEventListener","removeKeyListeners","removeEventListener","generateContent","h","class","menuPosition","CodeExecuteStatus","executeRequired","slot","aria-label","onClick","color","icon","iconOnly","minimal","size","tooltip","onMouseEnter","onMouseLeave","LanguagePickerInline","activeLanguage","onSetLanguage","disabled","contentEditable","spellcheck","onBlur","onInput","tabIndex","role","xmlns","viewBox","preserveAspectRatio","d","detail","languages","Promise","resolve","getTextContents","res","Error","Host","onMouseOut","onKeyDown"],"mappings":"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","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/codeExpression.css';\n","@import '~@stencila/style-stencila/dist/molecules/codeExpression.css';\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { codeExpression, CodeExpression } from '@stencila/schema'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport {\n  CodeComponent,\n  CodeExecuteCancelEvent,\n  CodeExecuteEvent,\n  CodeExecuteOrdering,\n  CodeVisibilityEvent,\n  DiscoverExecutableLanguagesEvent,\n  ExecuteRequired,\n  ExecuteStatus,\n} from '../code/codeTypes'\nimport { isPending } from '../code/codeUtils'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\nimport { LanguagePickerInline } from './languageSelect'\n\nconst slots = {\n  text: 'text',\n  output: 'output',\n  errors: 'errors',\n}\n\n/**\n * @slot text - The source code of the `CodeChunk`. Corresponds to the `text`\n *              field in the Stencila `CodeExpression` Schema.\n * @slot output - A single output element. Corresponds to the `output` field in\n *                the Stencila `CodeExpression` Schema.\n */\n@Component({\n  tag: 'stencila-code-expression',\n  styleUrls: {\n    default: 'codeExpression.css',\n    material: 'codeExpression.css',\n  },\n  scoped: true,\n})\nexport class CodeExpressionComponent implements CodeComponent<CodeExpression> {\n  @Element() private el: HTMLStencilaCodeExpressionElement\n\n  private hoverTimeOut: number | undefined = undefined\n  private hoverStartedAt = Date.now()\n\n  /**\n   * A callback function to be called with the value of the `CodeExpression`\n   * node when executing the `CodeExpression`.\n   */\n  @Prop() public executeHandler?: (\n    codeExpression: CodeExpression\n  ) => Promise<CodeExpression>\n\n  /**\n   * Disallow editing of the editor contents when set to `true`\n   */\n  @Prop()\n  public readOnly = false\n\n  /**\n   * Programming language of the CodeExpression\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop({ mutable: true })\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n    this.checkIfExecutable()\n  }\n\n  @State() isExecutable = false\n\n  @State()\n  shiftIsPressed = false\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus: ExecuteStatus\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies at\n   * compile time.\n   */\n  @Prop()\n  compileDigest: string\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies from\n   * the latest execution.\n   */\n  @Prop()\n  executeDigest: string\n\n  /**\n   * Time when the latest code execution ended\n   */\n  @Prop()\n  executeEnded: string\n\n  /**\n   * Duration of the latest code execition\n   */\n  @Prop()\n  executeDuration: string\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Function to call when the user selects a new language from the language\n   * picker dropdown.\n   */\n  private onSelectLanguage = (language: string): void => {\n    this.languageChange.emit(lookupFormat(language))\n    this.programmingLanguage = language\n  }\n\n  /**\n   * Stencila CodeExpression node to render\n   */\n  @Prop({\n    mutable: true,\n  })\n  codeExpression?: CodeExpression\n\n  @State() hover = false\n\n  /**\n   * Whether the code section starts out visible or not\n   */\n  @Prop({ mutable: true })\n  isCodeVisible = false\n\n  /**\n   * A global event emitter to show/hide code in all `CodeChunk` or `CodeExpression` components\n   */\n  @Event({\n    eventName: 'stencila-code-visibility-change',\n  })\n  private allCodeVisibilityChange: EventEmitter\n\n  /**\n   * A global event listener to show/hide code in this component\n   */\n  @Listen('stencila-code-visibility-change', { target: 'window' })\n  onAllCodeVisibilityChange(event: CodeVisibilityEvent): void {\n    this.isCodeVisible = event.detail.isVisible\n  }\n\n  /**\n   * Toggle code visibility, either locally, or globally\n   */\n  private toggleCodeVisibility = (event: MouseEvent): void => {\n    event.preventDefault()\n    if (event.shiftKey) {\n      this.allCodeVisibilityChange.emit({ isVisible: !this.isCodeVisible })\n    } else {\n      this.isCodeVisible = !this.isCodeVisible\n    }\n  }\n\n  componentWillLoad(): void {\n    this.checkIfExecutable()\n  }\n\n  /**\n   * Returns the text contents from the inline code editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    const slot = this.selectTextSlot()\n    return Promise.resolve(slot?.textContent ?? '')\n  }\n\n  /**\n   * Returns the `CodeExpression` node with the updated `text` contents from the\n   * editor.\n   */\n  @Method()\n  public async getContents(): Promise<CodeExpression> {\n    return Promise.resolve(\n      codeExpression({\n        text: await this.getTextContents(),\n        programmingLanguage: this.programmingLanguage,\n      })\n    )\n  }\n\n  private selectTextSlot = (): HTMLElement | null =>\n    this.el.querySelector(`.${slots.text}`)\n\n  /**\n   * Event emitted when the source code of the `CodeExpression` node is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<string>\n\n  private contentChangeHandler = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.contentChange.emit(target.textContent ?? '')\n  }\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Enter' && event.ctrlKey) {\n      event.preventDefault()\n      this.execute().catch((err) => {\n        console.error(err)\n      })\n    }\n  }\n\n  /**\n   * Emitted to indicate that code node should be executed\n   *\n   */\n  @Event({\n    eventName: 'stencila-code-execute',\n  })\n  public codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  /**\n   * Emitted to indicate that the execution of the code node should be cancelled/interrupted.\n   */\n  @Event({\n    eventName: 'stencila-code-execute-cancel',\n  })\n  public codeExecuteCancelEvent: EventEmitter<CodeExecuteCancelEvent['detail']>\n\n  /**\n   * Determine if the CodeChunk can be executed or not.\n   * For a CodeChunk to be considered executable it must have a `executeHandler` function attached\n   * and the current `programmingLanguage` must be in the list of `executableLanguages`.\n   */\n  private checkIfExecutable = (): void => {\n    if (\n      this.programmingLanguage === undefined ||\n      !this.executeHandler ||\n      Object.keys(this.executableLanguages ?? {}).length <= 0\n    ) {\n      this.isExecutable = false\n      return\n    }\n\n    const activeLanguageFormat = lookupFormat(this.programmingLanguage).name\n    this.isExecutable =\n      this.executeHandler !== undefined &&\n      Object.values(this.executableLanguages ?? {}).some(\n        (format) => format.name === activeLanguageFormat\n      )\n  }\n\n  private onExecuteHandler = async (\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression> => {\n    const node = await this.getContents()\n\n    // If node is running, emit cancel event and terminate early\n    if (isPending(this.executeStatus)) {\n      this.codeExecuteCancelEvent.emit({ nodeId: this.el.id, scope: 'All' })\n      return node\n    }\n\n    this.codeExecuteEvent.emit({ nodeId: this.el.id, ordering })\n\n    if (this.isExecutable && this.executeHandler) {\n      const computed = await this.executeHandler(node)\n      this.codeExpression = computed\n      return computed\n    }\n\n    return node\n  }\n\n  /**\n   * Run the `CodeExpression`\n   */\n  @Method()\n  public async execute(\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression | Error> {\n    try {\n      const res = await this.onExecuteHandler(ordering)\n      // Add artificial delay to allow user to register the spinner\n      return res\n    } catch (err) {\n      console.error(err)\n      return new Error('Could not execute CodeExpression')\n    }\n  }\n\n  // Create an execute handler bound to this instance\n  // @see https://github.com/typescript-eslint/typescript-eslint/blob/v3.7.0/packages/eslint-plugin/docs/rules/unbound-method.md\n  private executeRef = (ordering: CodeExecuteOrdering) => this.execute(ordering)\n\n  private onMouseOutHandler = (e: MouseEvent): void => {\n    const target = e.target as Node | null\n    const relatedTarget = e.relatedTarget as Node | null\n    if (!target?.contains(relatedTarget)) {\n      this.removeHoverState()\n    }\n  }\n\n  private addHoverState = (): void => {\n    window.clearTimeout(this.hoverTimeOut)\n\n    if (!this.hover) {\n      this.hover = true\n      this.hoverStartedAt = Date.now()\n    }\n  }\n\n  private removeHoverState = (): void => {\n    const diff = Date.now() - this.hoverStartedAt\n    if (this.hover && diff < 60) {\n      this.hoverTimeOut = window.setTimeout(() => {\n        this.hover = false\n      }, 3000)\n    } else if (this.hover) {\n      this.hover = false\n    }\n  }\n\n  private onKeyPress = (e: KeyboardEvent): void => {\n    this.shiftIsPressed = e.shiftKey\n  }\n\n  private addKeyListeners = () => {\n    window.addEventListener('keydown', this.onKeyPress)\n    window.addEventListener('keyup', this.onKeyPress)\n  }\n\n  private removeKeyListeners = () => {\n    window.removeEventListener('keydown', this.onKeyPress)\n    window.removeEventListener('keyup', this.onKeyPress)\n    this.shiftIsPressed = false\n  }\n\n  private generateContent = (): HTMLElement[] => {\n    return [\n      <span class=\"actions\">\n        <stencila-menu menuPosition=\"bottom-start\">\n          <CodeExecuteStatus\n            executeStatus={this.executeStatus}\n            executeRequired={this.executeRequired}\n            slot=\"toggle\"\n          ></CodeExecuteStatus>\n          <slot name=\"code-dependencies\" />\n          <slot name=\"code-dependents\" />\n        </stencila-menu>\n        <stencila-button\n          aria-label=\"Run Code\"\n          class=\"run\"\n          onClick={(e: MouseEvent) =>\n            this.executeRef(e.shiftKey ? 'Single' : 'Topological')\n          }\n          color=\"key\"\n          icon={isPending(this.executeStatus) ? 'stop' : 'play'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={\n            isPending(this.executeStatus)\n              ? 'Cancel'\n              : this.shiftIsPressed\n              ? 'Run only this code'\n              : 'Run'\n          }\n          onMouseEnter={this.addKeyListeners}\n          onMouseLeave={this.removeKeyListeners}\n        ></stencila-button>\n        <stencila-button\n          aria-label={`${this.isCodeVisible ? 'Hide' : 'Show'} Code`}\n          class=\"secondaryAction sourceToggle\"\n          onClick={this.toggleCodeVisibility}\n          color=\"key\"\n          icon={this.isCodeVisible ? 'eye-off' : 'eye'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={`${\n            this.isCodeVisible ? 'Hide' : 'Show'\n          } Code\\nShift click to set for all code`}\n        ></stencila-button>\n        <span class=\"secondaryAction\">\n          <LanguagePickerInline\n            activeLanguage={this.programmingLanguage ?? ''}\n            languageCapabilities={this.languageCapabilities}\n            executableLanguages={this.executableLanguages}\n            onSetLanguage={this.onSelectLanguage}\n            disabled={this.readOnly}\n          ></LanguagePickerInline>\n        </span>\n        <span\n          class=\"text\"\n          contentEditable={!this.readOnly}\n          spellcheck=\"false\"\n          onBlur={this.removeHoverState}\n          onInput={this.contentChangeHandler}\n          tabIndex={this.isCodeVisible ? 0 : -1}\n          role=\"textbox\"\n        >\n          <slot name={slots.text} />\n        </span>\n        <slot name={slots.errors} />\n      </span>,\n      <svg\n        class=\"divider\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 8 24\"\n        preserveAspectRatio=\"xMinYMin\"\n      >\n        <path d=\"M8 12L1 0H0v24h1l7-12z\" />\n      </svg>,\n      <slot name={slots.output} />,\n    ]\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host\n        class={{\n          hover: this.hover,\n          isCodeVisible: this.isCodeVisible,\n        }}\n        onMouseEnter={this.addHoverState}\n        onMouseOut={this.onMouseOutHandler}\n        onKeyDown={this.handleKeyDown}\n      >\n        {this.generateContent()}\n      </Host>\n    )\n  }\n}\n"]}