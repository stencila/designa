{"version":3,"sources":["node_modules/@codemirror/legacy-modes/mode/r.js"],"names":["wordObj","words","res","i","length","commonAtoms","commonBuiltins","commonKeywords","commonBlockKeywords","atoms","builtins","keywords","blockkeywords","opChars","curPunc","tokenBase","stream","state","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","tokenString","word","current","propertyIsEnumerable","skipTo","ctx","argList","quote","backUp","ALIGN_YES","ALIGN_NO","BRACELESS","push","type","indent","flags","column","prev","setFlag","flag","pop","r","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","wordChars","commentTokens","line","autocomplete","concat"],"mappings":"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","sourcesContent":["function wordObj(words) {\n  var res = {};\n  for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n  return res;\n}\nvar commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\nvar commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\nvar commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\nvar commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\nvar atoms = wordObj(commonAtoms);\nvar builtins = wordObj(commonBuiltins);\nvar keywords = wordObj(commonKeywords);\nvar blockkeywords = wordObj(commonBlockKeywords);\nvar opChars = /[+\\-*\\/^<>=!&|~$:]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"0\" && stream.eat(\"x\")) {\n    stream.eatWhile(/[\\da-f]/i);\n    return \"number\";\n  } else if (ch == \".\" && stream.eat(/\\d/)) {\n    stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n    return \"number\";\n  } else if (ch == \"'\" || ch == '\"') {\n    state.tokenize = tokenString(ch);\n    return \"string\";\n  } else if (ch == \"`\") {\n    stream.match(/[^`]+`/);\n    return \"string.special\";\n  } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n    return \"keyword\";\n  } else if (/[a-zA-Z\\.]/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    var word = stream.current();\n    if (atoms.propertyIsEnumerable(word)) return \"atom\";\n    if (keywords.propertyIsEnumerable(word)) {\n      // Block keywords start new blocks, except 'else if', which only starts\n      // one new block for the 'if', no block for the 'else'.\n      if (blockkeywords.propertyIsEnumerable(word) &&\n          !stream.match(/\\s*if(\\s+|$)/, false))\n        curPunc = \"block\";\n      return \"keyword\";\n    }\n    if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n    return \"variable\";\n  } else if (ch == \"%\") {\n    if (stream.skipTo(\"%\")) stream.next();\n    return \"variableName.special\";\n  } else if (\n    (ch == \"<\" && stream.eat(\"-\")) ||\n      (ch == \"<\" && stream.match(\"<-\")) ||\n      (ch == \"-\" && stream.match(/>>?/))\n  ) {\n    return \"operator\";\n  } else if (ch == \"=\" && state.ctx.argList) {\n    return \"operator\";\n  } else if (opChars.test(ch)) {\n    if (ch == \"$\") return \"operator\";\n    stream.eatWhile(opChars);\n    return \"operator\";\n  } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n    curPunc = ch;\n    if (ch == \";\") return \"punctuation\";\n    return null;\n  } else {\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    if (stream.eat(\"\\\\\")) {\n      var ch = stream.next();\n      if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n      else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n      else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n      else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n      else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n      return \"string.special\";\n    } else {\n      var next;\n      while ((next = stream.next()) != null) {\n        if (next == quote) { state.tokenize = tokenBase; break; }\n        if (next == \"\\\\\") { stream.backUp(1); break; }\n      }\n      return \"string\";\n    }\n  };\n}\n\nvar ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\nfunction push(state, type, stream) {\n  state.ctx = {type: type,\n               indent: state.indent,\n               flags: 0,\n               column: stream.column(),\n               prev: state.ctx};\n}\nfunction setFlag(state, flag) {\n  var ctx = state.ctx\n  state.ctx = {type: ctx.type,\n               indent: ctx.indent,\n               flags: ctx.flags | flag,\n               column: ctx.column,\n               prev: ctx.prev}\n}\nfunction pop(state) {\n  state.indent = state.ctx.indent;\n  state.ctx = state.ctx.prev;\n}\n\nexport const r = {\n  startState: function(indentUnit) {\n    return {tokenize: tokenBase,\n            ctx: {type: \"top\",\n                  indent: -indentUnit,\n                  flags: ALIGN_NO},\n            indent: 0,\n            afterIdent: false};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n      if (state.ctx.flags & BRACELESS) pop(state)\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n    if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n    if (curPunc == \"{\") push(state, \"}\", stream);\n    else if (curPunc == \"(\") {\n      push(state, \")\", stream);\n      if (state.afterIdent) state.ctx.argList = true;\n    }\n    else if (curPunc == \"[\") push(state, \"]\", stream);\n    else if (curPunc == \"block\") push(state, \"block\", stream);\n    else if (curPunc == state.ctx.type) pop(state);\n    else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n    state.afterIdent = style == \"variable\" || style == \"keyword\";\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n        closing = firstChar == ctx.type;\n    if (ctx.flags & BRACELESS) ctx = ctx.prev\n    if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    wordChars: \".\",\n    commentTokens: {line: \"#\"},\n    autocomplete: commonAtoms.concat(commonBuiltins, commonKeywords)\n  }\n};\n"]}