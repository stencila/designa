{"version":3,"sources":["src/components/codeExpression/languageSelect.tsx"],"names":["LanguagePickerInline","exports","props","activeLanguageByAlias","lookupFormat","activeLanguage","hasExecutableLanguages","Object","keys","_a","executableLanguages","length","filteredLanguages","entries","languageCapabilities","reduce","langs","_c","name","details","includes","_d","h","aria-label","autoClose","iconOnly","icon","size","slot","color","minimal","tooltip","concat","disabled","Fragment","values","_b","map","language","onClick","onSetLanguage","call","undefined","divider"],"mappings":"4LAYaA,EAAoBC,EAAA,KAAG,SAACC,WACnC,IAAMC,EAAwBC,EAAaF,EAAMG,gBAEjD,IAAMC,EACJC,OAAOC,MAAKC,EAAAP,EAAMQ,uBAAmB,MAAAD,SAAA,EAAAA,EAAI,IAAIE,OAAS,EAExD,IAAMC,EAAoBN,EACtBC,OAAOM,QAAQX,EAAMY,sBAAsBC,QACzC,SAACC,EAAsBC,aAACC,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACnC,OAAOV,OAAOC,KAAKN,EAAMQ,qBAAqBU,SAASF,GACnDF,iCACKA,IAAKK,EAAA,GAAEA,EAACH,GAAOC,EAAOE,MAEjC,IAEFnB,EAAMY,qBAEV,OACEQ,EAAA,gBAAA,CAAAC,aAA0B,uBAAuBC,UAAW,MAC1DF,EAAA,kBAAA,CACEG,SAAU,KACVC,KAAK,WACLC,KAAK,SACLC,KAAK,SAAQL,aACF,cACXM,MAAM,MACNC,QAAS,KACTC,QAAS,GAAAC,OAAG7B,EAAsBe,MAClCe,SAAU/B,EAAM+B,WAGjB3B,GACCgB,EAACY,EAAQ,KACN3B,OAAO4B,QAAOC,EAAAlC,EAAMQ,uBAAmB,MAAA0B,SAAA,EAAAA,EAAI,IAAIC,KAAI,SAACC,GAAQ,OAC3DhB,EAAA,qBAAA,CACEK,KAAK,SACLY,QAAS,WAAA,IAAA9B,EAAM,OAAAA,EAAAP,EAAMsC,iBAAa,MAAA/B,SAAA,OAAA,EAAAA,EAAAgC,KAAnBvC,EAAsBoC,EAASpB,OAC9CQ,KACEY,EAASpB,OAASf,EAAsBe,KACpC,QACAwB,WAGLJ,EAASpB,SAIdI,EAAA,qBAAA,CAAoBK,KAAK,SAASgB,QAAS,MAAI,mBAMlDpC,OAAO4B,OAAOvB,GAAmByB,KAAI,SAACC,GAAQ,OAC7ChB,EAAA,qBAAA,CACEK,KAAK,SACLY,QAAS,WAAA,IAAA9B,EAAM,OAAAA,EAAAP,EAAMsC,iBAAa,MAAA/B,SAAA,OAAA,EAAAA,EAAAgC,KAAnBvC,EAAsBoC,EAASpB,QAE7CoB,EAASpB","sourcesContent":["import { Fragment, FunctionalComponent, h } from '@stencil/core'\nimport { FileFormatMap, lookupFormat } from '../editor/languageUtils'\n\ninterface Props {\n  activeLanguage: string\n  disabled: boolean\n  languageCapabilities: FileFormatMap\n  executableLanguages: FileFormatMap\n  onSetLanguage?: (language: string) => void\n  setRef?: (el?: HTMLSelectElement) => void\n}\n\nexport const LanguagePickerInline = (props: Props): FunctionalComponent => {\n  const activeLanguageByAlias = lookupFormat(props.activeLanguage)\n\n  const hasExecutableLanguages =\n    Object.keys(props.executableLanguages ?? {}).length > 0\n\n  const filteredLanguages = hasExecutableLanguages\n    ? Object.entries(props.languageCapabilities).reduce(\n        (langs: FileFormatMap, [name, details]) => {\n          return Object.keys(props.executableLanguages).includes(name)\n            ? langs\n            : { ...langs, [name]: details }\n        },\n        {}\n      )\n    : props.languageCapabilities\n\n  return (\n    <stencila-menu aria-label=\"Programming Language\" autoClose={true}>\n      <stencila-button\n        iconOnly={true}\n        icon=\"terminal\"\n        size=\"xsmall\"\n        slot=\"toggle\"\n        aria-label=\"Toggle menu\"\n        color=\"key\"\n        minimal={true}\n        tooltip={`${activeLanguageByAlias.name}`}\n        disabled={props.disabled}\n      ></stencila-button>\n\n      {hasExecutableLanguages && (\n        <Fragment>\n          {Object.values(props.executableLanguages ?? {}).map((language) => (\n            <stencila-menu-item\n              size=\"xsmall\"\n              onClick={() => props.onSetLanguage?.(language.name)}\n              icon={\n                language.name === activeLanguageByAlias.name\n                  ? 'check'\n                  : undefined\n              }\n            >\n              {language.name}\n            </stencila-menu-item>\n          ))}\n\n          <stencila-menu-item size=\"xsmall\" divider={true}>\n            Not executable\n          </stencila-menu-item>\n        </Fragment>\n      )}\n\n      {Object.values(filteredLanguages).map((language) => (\n        <stencila-menu-item\n          size=\"xsmall\"\n          onClick={() => props.onSetLanguage?.(language.name)}\n        >\n          {language.name}\n        </stencila-menu-item>\n      ))}\n    </stencila-menu>\n  )\n}\n"]}