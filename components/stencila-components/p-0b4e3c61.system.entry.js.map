{"version":3,"sources":["src/components/codeExpression/codeExpression.css?tag=stencila-code-expression&mode=default&encapsulation=scoped","src/components/codeExpression/codeExpression.css?tag=stencila-code-expression&mode=material&encapsulation=scoped","src/components/codeExpression/codeExpression.tsx"],"names":["defaultCodeExpressionCss","materialCodeExpressionCss","slots","text","output","errors","CodeExpressionComponent","exports","class_1","hostRef","_this","this","hoverTimeOut","undefined","hoverStartedAt","Date","now","readOnly","languageCapabilities","fileFormatMap","executableLanguages","_b","_a","window","stencilaWebClient","isExecutable","shiftIsPressed","onSelectLanguage","language","languageChange","emit","lookupFormat","programmingLanguage","hover","isCodeVisible","toggleCodeVisibility","event","preventDefault","shiftKey","allCodeVisibilityChange","isVisible","selectTextSlot","el","querySelector","concat","contentChangeHandler","e","target","currentTarget","contentChange","textContent","handleKeyDown","key","ctrlKey","execute","catch","err","console","error","checkIfExecutable","executeHandler","Object","keys","length","activeLanguageFormat","name","values","some","format","onExecuteHandler","ordering","getContents","node","_c","sent","isPending","executeStatus","codeExecuteCancelEvent","nodeId","id","scope","codeExecuteEvent","computed","codeExpression","executeRef","onMouseOutHandler","relatedTarget","contains","removeHoverState","addHoverState","clearTimeout","diff","setTimeout","onKeyPress","addKeyListeners","addEventListener","removeKeyListeners","removeEventListener","generateContent","h","class","menuPosition","CodeExecuteStatus","executeRequired","slot","aria-label","onClick","color","icon","iconOnly","minimal","size","tooltip","onMouseEnter","onMouseLeave","LanguagePickerInline","activeLanguage","onSetLanguage","disabled","contentEditable","spellcheck","onBlur","onInput","tabIndex","role","xmlns","viewBox","preserveAspectRatio","d","prototype","onDiscoverExecutableLanguages","detail","languages","onAllCodeVisibilityChange","componentWillLoad","getTextContents","Promise","resolve","_d","apply","_f","_g","res","err_1","Error","render","Host","onMouseOut","onKeyDown"],"mappings":"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","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/codeExpression.css';\n","@import '~@stencila/style-stencila/dist/molecules/codeExpression.css';\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { codeExpression, CodeExpression } from '@stencila/schema'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport {\n  CodeComponent,\n  CodeExecuteCancelEvent,\n  CodeExecuteEvent,\n  CodeExecuteOrdering,\n  CodeVisibilityEvent,\n  DiscoverExecutableLanguagesEvent,\n  ExecuteRequired,\n  ExecuteStatus,\n} from '../code/codeTypes'\nimport { isPending } from '../code/codeUtils'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\nimport { LanguagePickerInline } from './languageSelect'\n\nconst slots = {\n  text: 'text',\n  output: 'output',\n  errors: 'errors',\n}\n\n/**\n * @slot text - The source code of the `CodeChunk`. Corresponds to the `text`\n *              field in the Stencila `CodeExpression` Schema.\n * @slot output - A single output element. Corresponds to the `output` field in\n *                the Stencila `CodeExpression` Schema.\n */\n@Component({\n  tag: 'stencila-code-expression',\n  styleUrls: {\n    default: 'codeExpression.css',\n    material: 'codeExpression.css',\n  },\n  scoped: true,\n})\nexport class CodeExpressionComponent implements CodeComponent<CodeExpression> {\n  @Element() private el: HTMLStencilaCodeExpressionElement\n\n  private hoverTimeOut: number | undefined = undefined\n  private hoverStartedAt = Date.now()\n\n  /**\n   * A callback function to be called with the value of the `CodeExpression`\n   * node when executing the `CodeExpression`.\n   */\n  @Prop() public executeHandler?: (\n    codeExpression: CodeExpression\n  ) => Promise<CodeExpression>\n\n  /**\n   * Disallow editing of the editor contents when set to `true`\n   */\n  @Prop()\n  public readOnly = false\n\n  /**\n   * Programming language of the CodeExpression\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop({ mutable: true })\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n    this.checkIfExecutable()\n  }\n\n  @State() isExecutable = false\n\n  @State()\n  shiftIsPressed = false\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus: ExecuteStatus\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies at\n   * compile time.\n   */\n  @Prop()\n  compileDigest: string\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies from\n   * the latest execution.\n   */\n  @Prop()\n  executeDigest: string\n\n  /**\n   * Time when the latest code execution ended\n   */\n  @Prop()\n  executeEnded: string\n\n  /**\n   * Duration of the latest code execition\n   */\n  @Prop()\n  executeDuration: string\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Function to call when the user selects a new language from the language\n   * picker dropdown.\n   */\n  private onSelectLanguage = (language: string): void => {\n    this.languageChange.emit(lookupFormat(language))\n    this.programmingLanguage = language\n  }\n\n  /**\n   * Stencila CodeExpression node to render\n   */\n  @Prop({\n    mutable: true,\n  })\n  codeExpression?: CodeExpression\n\n  @State() hover = false\n\n  /**\n   * Whether the code section starts out visible or not\n   */\n  @Prop({ mutable: true })\n  isCodeVisible = false\n\n  /**\n   * A global event emitter to show/hide code in all `CodeChunk` or `CodeExpression` components\n   */\n  @Event({\n    eventName: 'stencila-code-visibility-change',\n  })\n  private allCodeVisibilityChange: EventEmitter\n\n  /**\n   * A global event listener to show/hide code in this component\n   */\n  @Listen('stencila-code-visibility-change', { target: 'window' })\n  onAllCodeVisibilityChange(event: CodeVisibilityEvent): void {\n    this.isCodeVisible = event.detail.isVisible\n  }\n\n  /**\n   * Toggle code visibility, either locally, or globally\n   */\n  private toggleCodeVisibility = (event: MouseEvent): void => {\n    event.preventDefault()\n    if (event.shiftKey) {\n      this.allCodeVisibilityChange.emit({ isVisible: !this.isCodeVisible })\n    } else {\n      this.isCodeVisible = !this.isCodeVisible\n    }\n  }\n\n  componentWillLoad(): void {\n    this.checkIfExecutable()\n  }\n\n  /**\n   * Returns the text contents from the inline code editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    const slot = this.selectTextSlot()\n    return Promise.resolve(slot?.textContent ?? '')\n  }\n\n  /**\n   * Returns the `CodeExpression` node with the updated `text` contents from the\n   * editor.\n   */\n  @Method()\n  public async getContents(): Promise<CodeExpression> {\n    return Promise.resolve(\n      codeExpression({\n        text: await this.getTextContents(),\n        programmingLanguage: this.programmingLanguage,\n      })\n    )\n  }\n\n  private selectTextSlot = (): HTMLElement | null =>\n    this.el.querySelector(`.${slots.text}`)\n\n  /**\n   * Event emitted when the source code of the `CodeExpression` node is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<string>\n\n  private contentChangeHandler = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.contentChange.emit(target.textContent ?? '')\n  }\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Enter' && event.ctrlKey) {\n      event.preventDefault()\n      this.execute().catch((err) => {\n        console.error(err)\n      })\n    }\n  }\n\n  /**\n   * Emitted to indicate that code node should be executed\n   *\n   */\n  @Event({\n    eventName: 'stencila-code-execute',\n  })\n  public codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  /**\n   * Emitted to indicate that the execution of the code node should be cancelled/interrupted.\n   */\n  @Event({\n    eventName: 'stencila-code-execute-cancel',\n  })\n  public codeExecuteCancelEvent: EventEmitter<CodeExecuteCancelEvent['detail']>\n\n  /**\n   * Determine if the CodeChunk can be executed or not.\n   * For a CodeChunk to be considered executable it must have a `executeHandler` function attached\n   * and the current `programmingLanguage` must be in the list of `executableLanguages`.\n   */\n  private checkIfExecutable = (): void => {\n    if (\n      this.programmingLanguage === undefined ||\n      !this.executeHandler ||\n      Object.keys(this.executableLanguages ?? {}).length <= 0\n    ) {\n      this.isExecutable = false\n      return\n    }\n\n    const activeLanguageFormat = lookupFormat(this.programmingLanguage).name\n    this.isExecutable =\n      this.executeHandler !== undefined &&\n      Object.values(this.executableLanguages ?? {}).some(\n        (format) => format.name === activeLanguageFormat\n      )\n  }\n\n  private onExecuteHandler = async (\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression> => {\n    const node = await this.getContents()\n\n    // If node is running, emit cancel event and terminate early\n    if (isPending(this.executeStatus)) {\n      this.codeExecuteCancelEvent.emit({ nodeId: this.el.id, scope: 'All' })\n      return node\n    }\n\n    this.codeExecuteEvent.emit({ nodeId: this.el.id, ordering })\n\n    if (this.isExecutable && this.executeHandler) {\n      const computed = await this.executeHandler(node)\n      this.codeExpression = computed\n      return computed\n    }\n\n    return node\n  }\n\n  /**\n   * Run the `CodeExpression`\n   */\n  @Method()\n  public async execute(\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression | Error> {\n    try {\n      const res = await this.onExecuteHandler(ordering)\n      // Add artificial delay to allow user to register the spinner\n      return res\n    } catch (err) {\n      console.error(err)\n      return new Error('Could not execute CodeExpression')\n    }\n  }\n\n  // Create an execute handler bound to this instance\n  // @see https://github.com/typescript-eslint/typescript-eslint/blob/v3.7.0/packages/eslint-plugin/docs/rules/unbound-method.md\n  private executeRef = (ordering: CodeExecuteOrdering) => this.execute(ordering)\n\n  private onMouseOutHandler = (e: MouseEvent): void => {\n    const target = e.target as Node | null\n    const relatedTarget = e.relatedTarget as Node | null\n    if (!target?.contains(relatedTarget)) {\n      this.removeHoverState()\n    }\n  }\n\n  private addHoverState = (): void => {\n    window.clearTimeout(this.hoverTimeOut)\n\n    if (!this.hover) {\n      this.hover = true\n      this.hoverStartedAt = Date.now()\n    }\n  }\n\n  private removeHoverState = (): void => {\n    const diff = Date.now() - this.hoverStartedAt\n    if (this.hover && diff < 60) {\n      this.hoverTimeOut = window.setTimeout(() => {\n        this.hover = false\n      }, 3000)\n    } else if (this.hover) {\n      this.hover = false\n    }\n  }\n\n  private onKeyPress = (e: KeyboardEvent): void => {\n    this.shiftIsPressed = e.shiftKey\n  }\n\n  private addKeyListeners = () => {\n    window.addEventListener('keydown', this.onKeyPress)\n    window.addEventListener('keyup', this.onKeyPress)\n  }\n\n  private removeKeyListeners = () => {\n    window.removeEventListener('keydown', this.onKeyPress)\n    window.removeEventListener('keyup', this.onKeyPress)\n    this.shiftIsPressed = false\n  }\n\n  private generateContent = (): HTMLElement[] => {\n    return [\n      <span class=\"actions\">\n        <stencila-menu menuPosition=\"bottom-start\">\n          <CodeExecuteStatus\n            executeStatus={this.executeStatus}\n            executeRequired={this.executeRequired}\n            slot=\"toggle\"\n          ></CodeExecuteStatus>\n          <slot name=\"code-dependencies\" />\n          <slot name=\"code-dependents\" />\n        </stencila-menu>\n        <stencila-button\n          aria-label=\"Run Code\"\n          class=\"run\"\n          onClick={(e: MouseEvent) =>\n            this.executeRef(e.shiftKey ? 'Single' : 'Topological')\n          }\n          color=\"key\"\n          icon={isPending(this.executeStatus) ? 'stop' : 'play'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={\n            isPending(this.executeStatus)\n              ? 'Cancel'\n              : this.shiftIsPressed\n              ? 'Run only this code'\n              : 'Run'\n          }\n          onMouseEnter={this.addKeyListeners}\n          onMouseLeave={this.removeKeyListeners}\n        ></stencila-button>\n        <stencila-button\n          aria-label={`${this.isCodeVisible ? 'Hide' : 'Show'} Code`}\n          class=\"secondaryAction sourceToggle\"\n          onClick={this.toggleCodeVisibility}\n          color=\"key\"\n          icon={this.isCodeVisible ? 'eye-off' : 'eye'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={`${\n            this.isCodeVisible ? 'Hide' : 'Show'\n          } Code\\nShift click to set for all code`}\n        ></stencila-button>\n        <span class=\"secondaryAction\">\n          <LanguagePickerInline\n            activeLanguage={this.programmingLanguage ?? ''}\n            languageCapabilities={this.languageCapabilities}\n            executableLanguages={this.executableLanguages}\n            onSetLanguage={this.onSelectLanguage}\n            disabled={this.readOnly}\n          ></LanguagePickerInline>\n        </span>\n        <span\n          class=\"text\"\n          contentEditable={!this.readOnly}\n          spellcheck=\"false\"\n          onBlur={this.removeHoverState}\n          onInput={this.contentChangeHandler}\n          tabIndex={this.isCodeVisible ? 0 : -1}\n          role=\"textbox\"\n        >\n          <slot name={slots.text} />\n        </span>\n        <slot name={slots.errors} />\n      </span>,\n      <svg\n        class=\"divider\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 8 24\"\n        preserveAspectRatio=\"xMinYMin\"\n      >\n        <path d=\"M8 12L1 0H0v24h1l7-12z\" />\n      </svg>,\n      <slot name={slots.output} />,\n    ]\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host\n        class={{\n          hover: this.hover,\n          isCodeVisible: this.isCodeVisible,\n        }}\n        onMouseEnter={this.addHoverState}\n        onMouseOut={this.onMouseOutHandler}\n        onKeyDown={this.handleKeyDown}\n      >\n        {this.generateContent()}\n      </Host>\n    )\n  }\n}\n"]}