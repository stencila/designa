{"version":3,"sources":["src/components/utils/slotSelectors.ts"],"names":["getSlotByName","exports","root","slotName","normalizedSlotNames","Array","isArray","includes","push","children","from","foundElements","filter","child","slot"],"mappings":"2EAUaA,EAAaC,EAAA,KACxB,SAACC,GACD,OAAA,SAACC,GACC,IAAKD,EAAM,MAAO,GAElB,IAAME,EAAsBC,MAAMC,QAAQH,GAAYA,EAAW,CAACA,GAClE,GAAIA,EAASI,SAAS,WAAY,CAChCH,EAAoBI,KAAK,IAG3B,IAAMC,EAAWJ,MAAMK,KAAKR,EAAKO,UACjC,IAAME,EAAgBF,EAASG,QAAO,SAACC,GACrC,OAAAT,EAAoBG,SAASM,EAAMC,SAGrC,OAAOH","sourcesContent":["/**\n * Find an HTML Element with the given `slot` name attribute, if it exists.\n * This traverses the HTML Collection and can be used before the elements\n * are attached to the DOM.\n * This is especially useful in the `componentWillMount` lifecycle events for performance reasons\n *\n * Extra care needs to be taken if used with the `default`/unnamed slot as it can lead to false positives.\n * This is because any element that does not have an explicit `slot` attribute,\n * will return a value of `''` (empty string).\n */\nexport const getSlotByName =\n  (root?: Element | null) =>\n  (slotName: string | string[]): Element[] => {\n    if (!root) return []\n\n    const normalizedSlotNames = Array.isArray(slotName) ? slotName : [slotName]\n    if (slotName.includes('default')) {\n      normalizedSlotNames.push('')\n    }\n\n    const children = Array.from(root.children)\n    const foundElements = children.filter((child) =>\n      normalizedSlotNames.includes(child.slot)\n    )\n\n    return foundElements\n  }\n"]}