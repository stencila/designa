{"version":3,"sources":["src/components/codeExpression/languageSelect.tsx"],"names":["LanguagePickerInline","props","activeLanguageByAlias","lookupFormat","activeLanguage","hasExecutableLanguages","Object","keys","_a","executableLanguages","length","filteredLanguages","entries","languageCapabilities","reduce","langs","name","details","includes","[object Object]","h","aria-label","autoClose","iconOnly","icon","size","slot","color","minimal","tooltip","disabled","Fragment","values","_b","map","language","onClick","onSetLanguage","call","undefined","divider"],"mappings":"qFAYaA,EAAwBC,YACnC,MAAMC,EAAwBC,EAAaF,EAAMG,gBAEjD,MAAMC,EACJC,OAAOC,MAAKC,EAAAP,EAAMQ,uBAAmB,MAAAD,SAAA,EAAAA,EAAI,IAAIE,OAAS,EAExD,MAAMC,EAAoBN,EACtBC,OAAOM,QAAQX,EAAMY,sBAAsBC,QACzC,CAACC,GAAuBC,EAAMC,KACrBX,OAAOC,KAAKN,EAAMQ,qBAAqBS,SAASF,GACnDD,iCACKA,GAAK,CAAEI,CAACH,GAAOC,KAE1B,IAEFhB,EAAMY,qBAEV,OACEO,EAAA,gBAAA,CAAAC,aAA0B,uBAAuBC,UAAW,MAC1DF,EAAA,kBAAA,CACEG,SAAU,KACVC,KAAK,WACLC,KAAK,SACLC,KAAK,SAAQL,aACF,cACXM,MAAM,MACNC,QAAS,KACTC,QAAS,GAAG3B,EAAsBc,OAClCc,SAAU7B,EAAM6B,WAGjBzB,GACCe,EAACW,EAAQ,KACNzB,OAAO0B,QAAOC,EAAAhC,EAAMQ,uBAAmB,MAAAwB,SAAA,EAAAA,EAAI,IAAIC,KAAKC,GACnDf,EAAA,qBAAA,CACEK,KAAK,SACLW,QAAS,KAAA,IAAA5B,EAAM,OAAAA,EAAAP,EAAMoC,iBAAa,MAAA7B,SAAA,OAAA,EAAAA,EAAA8B,KAAnBrC,EAAsBkC,EAASnB,OAC9CQ,KACEW,EAASnB,OAASd,EAAsBc,KACpC,QACAuB,WAGLJ,EAASnB,QAIdI,EAAA,qBAAA,CAAoBK,KAAK,SAASe,QAAS,MAAI,mBAMlDlC,OAAO0B,OAAOrB,GAAmBuB,KAAKC,GACrCf,EAAA,qBAAA,CACEK,KAAK,SACLW,QAAS,KAAA,IAAA5B,EAAM,OAAAA,EAAAP,EAAMoC,iBAAa,MAAA7B,SAAA,OAAA,EAAAA,EAAA8B,KAAnBrC,EAAsBkC,EAASnB,QAE7CmB,EAASnB","sourcesContent":["import { Fragment, FunctionalComponent, h } from '@stencil/core'\nimport { FileFormatMap, lookupFormat } from '../editor/languageUtils'\n\ninterface Props {\n  activeLanguage: string\n  disabled: boolean\n  languageCapabilities: FileFormatMap\n  executableLanguages: FileFormatMap\n  onSetLanguage?: (language: string) => void\n  setRef?: (el?: HTMLSelectElement) => void\n}\n\nexport const LanguagePickerInline = (props: Props): FunctionalComponent => {\n  const activeLanguageByAlias = lookupFormat(props.activeLanguage)\n\n  const hasExecutableLanguages =\n    Object.keys(props.executableLanguages ?? {}).length > 0\n\n  const filteredLanguages = hasExecutableLanguages\n    ? Object.entries(props.languageCapabilities).reduce(\n        (langs: FileFormatMap, [name, details]) => {\n          return Object.keys(props.executableLanguages).includes(name)\n            ? langs\n            : { ...langs, [name]: details }\n        },\n        {}\n      )\n    : props.languageCapabilities\n\n  return (\n    <stencila-menu aria-label=\"Programming Language\" autoClose={true}>\n      <stencila-button\n        iconOnly={true}\n        icon=\"terminal\"\n        size=\"xsmall\"\n        slot=\"toggle\"\n        aria-label=\"Toggle menu\"\n        color=\"key\"\n        minimal={true}\n        tooltip={`${activeLanguageByAlias.name}`}\n        disabled={props.disabled}\n      ></stencila-button>\n\n      {hasExecutableLanguages && (\n        <Fragment>\n          {Object.values(props.executableLanguages ?? {}).map((language) => (\n            <stencila-menu-item\n              size=\"xsmall\"\n              onClick={() => props.onSetLanguage?.(language.name)}\n              icon={\n                language.name === activeLanguageByAlias.name\n                  ? 'check'\n                  : undefined\n              }\n            >\n              {language.name}\n            </stencila-menu-item>\n          ))}\n\n          <stencila-menu-item size=\"xsmall\" divider={true}>\n            Not executable\n          </stencila-menu-item>\n        </Fragment>\n      )}\n\n      {Object.values(filteredLanguages).map((language) => (\n        <stencila-menu-item\n          size=\"xsmall\"\n          onClick={() => props.onSetLanguage?.(language.name)}\n        >\n          {language.name}\n        </stencila-menu-item>\n      ))}\n    </stencila-menu>\n  )\n}\n"]}