{"version":3,"sources":["src/components/button/button.css?tag=stencila-button&mode=default&encapsulation=scoped","src/components/button/button.material.css?tag=stencila-button&mode=material&encapsulation=scoped","src/components/button/button.tsx","src/components/tooltip/tooltip.css?tag=stencila-tooltip&mode=default&encapsulation=scoped","src/components/tooltip/tooltip.css?tag=stencila-tooltip&mode=material&encapsulation=scoped","src/components/tooltip/tooltip.tsx","src/components/tooltipElement/tooltipElement.css?tag=stencila-tooltip-element&mode=default&encapsulation=scoped","src/components/tooltipElement/tooltipElement.material.css?tag=stencila-tooltip-element&mode=material&encapsulation=scoped","src/components/tooltipElement/tooltipElement.tsx"],"names":["defaultButtonCss","buttonMaterialCss","Button","[object Object]","hostRef","this","color","size","minimal","isSecondary","disabled","iconOnly","isLoading","fill","generateButton","TagType","href","undefined","elAttrs","type","buttonType","rel","target","extraAttrs","dataEl","h","Object","assign","class","button","secondary","aria-label","_a","ariaLabel","tooltip","icon","spin","name","Host","text","defaultTooltipCss","materialTooltipCss","Tooltip","position","popperRef","showTooltip","document","querySelector","body","tooltipRef","_b","createElement","innerText","appendChild","createPopper","el","placement","modifiers","options","offset","window","addEventListener","onMouseMoveHandler","e","contains","destroyTooltip","onMouseOutHandler","relatedTarget","remove","destroy","removeEventListener","loadComponent","unloadComponent","newText","update","catch","err","console","log","defaultTooltipElementCss","tooltipElementMaterialCss","TooltipElement"],"mappings":"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","sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/button/index.css';\n","@import '~@stencila/style-material/dist/atoms/button/index.css';\n","import { Component, h, Host, Prop } from '@stencil/core'\nimport { Colors } from '../../types'\nimport { IconNames } from '../icon/iconNames'\n\n@Component({\n  tag: 'stencila-button',\n  styleUrls: {\n    default: 'button.css',\n    material: 'button.material.css',\n  },\n  scoped: true,\n})\nexport class Button {\n  /**\n   * If an `href` property is provided, button will be rendered using an `<a>` anchor tag.\n   */\n  @Prop() public href?: string\n\n  /**\n   * Relationship of the link\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#rel\n   * Only applied if `href` prop is also set.\n   */\n  @Prop() public rel?: string\n\n  /**\n   * Determines where to display the linked URL, options correspond to HTML Anchor `target` attribute.\n   * Only applies if the button is an anchor link.\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\n   */\n  @Prop() public target?: HTMLAnchorElement['target']\n\n  /**\n   * Screen-reader accessible label to read out.\n   */\n  @Prop() public ariaLabel: string\n\n  /**\n   * The color of the button\n   */\n  @Prop() public color: Colors = 'primary'\n\n  /**\n   * The overall size of the Button.\n   */\n  @Prop() public size: 'xsmall' | 'small' | 'default' | 'large' = 'default'\n\n  /**\n   * Renders the button without initial background color or border.\n   */\n  @Prop() public minimal = false\n\n  /**\n   * Renders the button using a secondory, and usually less visually prominent, Button CSS stylesheet.\n   */\n  @Prop() public isSecondary = false\n\n  /**\n   * The type of button to render, options correspond to HTML Button `type` attribute.\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\n   * Only applies if the button is not an anchor link.\n   */\n  @Prop() public buttonType: 'button' | 'submit' | 'reset'\n\n  /**\n   * If true, prevents the user from interacting with the button.\n   * Note: Not all browser prevent the click handler from firing on disabled buttons.\n   */\n  @Prop() public disabled = false\n\n  /**\n   * Name of the icon to render inside the button\n   * @see Icon component for possible values\n   */\n  @Prop() public icon?: HTMLElement | IconNames\n\n  /**\n   * If true, removes extra padding from Icon inside the button\n   * TODO: See if we can automatically infer removal of padding through CSS\n   */\n  @Prop() public iconOnly = false\n\n  /**\n   * If true, shows a loading spinner icon and sets a `disabled` attribute on the button.\n   * Note: Not all browser prevent the click handler from firing on disabled buttons.\n   */\n  @Prop() public isLoading = false\n\n  /**\n   * If true, the button will take up the full width of the parent container\n   */\n  @Prop() public fill = false\n\n  /**\n   * An optional help text to display for button focus and hover states.\n   */\n  @Prop() public tooltip?: string\n\n  /**\n   * An optional data attribute set on the button element for easier targeting using JavaScript.\n   */\n  @Prop() public dataEl?: string\n\n  private generateButton = (): HTMLButtonElement | HTMLAnchorElement => {\n    const TagType = this.href === undefined ? 'button' : 'a'\n    const elAttrs =\n      TagType === 'button'\n        ? { type: this.buttonType }\n        : { href: this.href, rel: this.rel, target: this.target }\n\n    const extraAttrs: Record<string, string> = {}\n    if (this.dataEl !== undefined) {\n      extraAttrs['data-el'] = this.dataEl\n    }\n\n    return (\n      <TagType\n        class={{\n          button: this.href !== undefined,\n          fill: this.fill,\n          iconOnly: this.iconOnly,\n          minimal: this.minimal,\n          secondary: this.isSecondary,\n          [this.size]: this.size !== undefined,\n          [`color-${this.color}`]: true,\n        }}\n        {...elAttrs}\n        {...extraAttrs}\n        disabled={this.isLoading || this.disabled || false}\n        aria-label={this.ariaLabel ?? this.tooltip}\n      >\n        {typeof this.icon === 'string' ? (\n          <stencila-icon\n            icon={this.isLoading ? 'loader-2' : this.icon}\n            class={{ spin: this.isLoading }}\n          ></stencila-icon>\n        ) : (\n          this.icon\n        )}\n        <slot name=\"icon\" />\n\n        <span class=\"label\">\n          <slot />\n        </span>\n      </TagType>\n    )\n  }\n\n  public render() {\n    return (\n      <Host size={this.size} icon={this.icon}>\n        {this.tooltip === undefined ? (\n          this.generateButton()\n        ) : (\n          <stencila-tooltip text={this.tooltip}>\n            {this.generateButton()}\n          </stencila-tooltip>\n        )}\n      </Host>\n    )\n  }\n}\n",null,null,"import { createPopper, Instance, Placement } from '@popperjs/core'\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Host,\n  Prop,\n  Watch,\n} from '@stencil/core'\n\n@Component({\n  tag: 'stencila-tooltip',\n  styleUrls: {\n    default: 'tooltip.css',\n    material: 'tooltip.css',\n  },\n  scoped: true,\n})\nexport class Tooltip implements ComponentInterface {\n  @Element() el: HTMLStencilaTooltipElement\n\n  /**\n   * The text content of the Tooltip.\n   */\n  @Prop() text!: string\n\n  /**\n   * The placement of the tooltip\n   */\n  @Prop()\n  position: Placement = 'bottom'\n\n  private tooltipRef?: HTMLSpanElement\n  private popperRef: Instance | null = null\n\n  private showTooltip = (): void => {\n    // TODO: Use Schema helpers once package is updated: https://github.com/stencila/schema/issues/178\n    const target =\n      document.querySelector('[data-itemscope=\"root\"]') ?? document.body\n\n    if (this.tooltipRef === undefined) {\n      this.tooltipRef =\n        document.querySelector('stencila-tooltip-element') ??\n        document.createElement('stencila-tooltip-element')\n    }\n\n    this.tooltipRef.innerText = this.text\n    target.appendChild(this.tooltipRef)\n\n    this.popperRef = createPopper(this.el, this.tooltipRef, {\n      placement: this.position,\n      modifiers: [\n        {\n          name: 'offset',\n          options: {\n            offset: [0, 8],\n          },\n        },\n        {\n          name: 'preventOverflow',\n        },\n      ],\n    })\n\n    window.addEventListener('mousemove', this.onMouseMoveHandler)\n  }\n\n  private onMouseMoveHandler = (e: MouseEvent): void => {\n    if (!this.el.contains(e.target as Node)) {\n      this.destroyTooltip()\n    }\n  }\n\n  private onMouseOutHandler = (e: MouseEvent): void => {\n    if (e.relatedTarget && !this.el.contains(e.relatedTarget as Node)) {\n      this.destroyTooltip()\n    }\n  }\n\n  private destroyTooltip = (): void => {\n    if (this.tooltipRef) {\n      this.tooltipRef.remove()\n    }\n\n    if (this.popperRef) {\n      this.popperRef.destroy()\n      this.popperRef = null\n    }\n\n    window.removeEventListener('mousemove', this.onMouseMoveHandler)\n  }\n\n  private loadComponent = (): void => {\n    this.el.addEventListener('focusin', this.showTooltip)\n    this.el.addEventListener('focusout', this.destroyTooltip)\n\n    this.el.addEventListener('mouseenter', this.showTooltip)\n    this.el.addEventListener('mouseout', this.onMouseOutHandler)\n  }\n\n  private unloadComponent = (): void => {\n    this.el.removeEventListener('focusin', this.showTooltip)\n    this.el.removeEventListener('focusout', this.destroyTooltip)\n\n    this.el.removeEventListener('mouseenter', this.showTooltip)\n    this.el.removeEventListener('mouseout', this.onMouseOutHandler)\n    window.removeEventListener('mousemove', this.onMouseMoveHandler)\n  }\n\n  public componentDidLoad(): void {\n    this.loadComponent()\n  }\n\n  public disconnectedCallback(): void {\n    this.unloadComponent()\n    this.destroyTooltip()\n  }\n\n  @Watch('text')\n  watchHandler(newText: string): void {\n    if (this.tooltipRef !== undefined) {\n      this.tooltipRef.innerText = newText\n\n      this.popperRef\n        ?.update()\n        .catch((err) => console.log('could not update Tooltip position\\n', err))\n    }\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host>\n        <slot />\n        <slot name=\"content\" />\n      </Host>\n    )\n  }\n}\n","@import '~@stencila/style-stencila/dist/atoms/tooltip.css';\n","@import '~@stencila/style-material/dist/atoms/tooltip.css';\n","import { Component, h, Host } from '@stencil/core'\n\n@Component({\n  tag: 'stencila-tooltip-element',\n  styleUrls: {\n    default: 'tooltipElement.css',\n    material: 'tooltipElement.material.css',\n  },\n  scoped: true,\n})\nexport class TooltipElement {\n  public render() {\n    return (\n      <Host>\n        <slot />\n      </Host>\n    )\n  }\n}\n"]}