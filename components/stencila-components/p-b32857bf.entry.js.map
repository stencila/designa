{"version":3,"sources":["src/components/utils/input.ts","src/components/parameter/types.ts","src/components/parameter/validators/booleanValidator.tsx","src/components/parameter/validators/constantValidator.tsx","src/components/parameter/validators/integerValidator.tsx","src/components/parameter/validators/numberValidator.tsx","src/components/parameter/validators/stringValidator.tsx","src/components/parameter/validators/index.tsx","src/components/parameter/parameter.css?tag=stencila-parameter&mode=default&encapsulation=scoped","src/components/parameter/parameter.css?tag=stencila-parameter&mode=material&encapsulation=scoped","src/components/parameter/parameter.tsx"],"names":["getInputValue","input","HTMLInputElement","type","checked","Number","parseFloat","value","HTMLSelectElement","isValidatorType","maybeValidator","getProperties","valueEl","default","_b","_a","getAttribute","toLowerCase","undefined","BooleanValidator","values","h","Fragment","name","ConstantValidator","minimum","_c","maximum","_d","IntegerValidator","step","NumberValidator","minLength","maxLength","pattern","StringValidator","min","validateField","e","target","reportValidity","getValidator","valueElRef","validatorType","Validator","props","autoClose","menuPosition","iconOnly","icon","size","slot","aria-label","color","minimal","onChange","onValidatorChange","onInput","onFocusin","disabled","selected","defaultParameterCss","materialParameterCss","Parameter","[object Object]","hostRef","this","labelSlotRef","valueSlotRef","mode","paramName","onParamChange","currentTarget","isValid","validateValue","parameterChange","emit","property","onParamNameChange","textContent","validator","validatorChange","getValidatorFromMetaEl","validatorMetaEl","el","querySelector","validatorAttrParts","split","validatorAttr","length","getSlotByName","addEventListener","removeEventListener","labelText","Host","class","contentEditable","onClick","preventDefault","ref","title"],"mappings":"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","sourcesContent":["export const getInputValue = (input: Element) => {\n  if (input instanceof HTMLInputElement) {\n    if (input.type === 'checkbox') {\n      return input.checked\n    } else if (input.type === 'number') {\n      return Number.parseFloat(input.value)\n    } else {\n      return input.value\n    }\n  }\n  if (input instanceof HTMLSelectElement) {\n    return input.value\n  }\n}\n","import { ValidatorTypes as ValidatorTypeSchema } from '@stencila/schema'\n\nexport type ValidatorTypes = Exclude<ValidatorTypeSchema['type'], 'Validator'>\n\nexport const isValidatorType = (\n  maybeValidator: string\n): maybeValidator is ValidatorTypes => {\n  return (\n    maybeValidator === 'Validator' ||\n    maybeValidator === 'ArrayValidator' ||\n    maybeValidator === 'BooleanValidator' ||\n    maybeValidator === 'ConstantValidator' ||\n    maybeValidator === 'EnumValidator' ||\n    maybeValidator === 'IntegerValidator' ||\n    maybeValidator === 'NumberValidator' ||\n    maybeValidator === 'StringValidator' ||\n    maybeValidator === 'TupleValidator'\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default: valueEl?.getAttribute('placeholder')?.toLowerCase() ?? undefined,\n  }\n}\n\nexport const BooleanValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input\n          type=\"checkbox\"\n          name=\"default\"\n          checked={values.default === 'true'}\n        />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nexport const ConstantValidator = (): FunctionalComponent => {\n  return (\n    <Fragment>\n      <label>\n        Value\n        <input name=\"value\" />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default:\n      valueEl?.getAttribute('placeholder') ??\n      valueEl?.getAttribute('value') ??\n      undefined,\n    minimum: valueEl?.getAttribute('min') ?? undefined,\n    maximum: valueEl?.getAttribute('max') ?? undefined,\n  }\n}\n\nexport const IntegerValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"number\" name=\"default\" step=\"1\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum\n        <input type=\"number\" name=\"minimum\" step=\"1\" value={values.minimum} />\n      </label>\n\n      <label>\n        Maximum\n        <input type=\"number\" name=\"maximum\" step=\"1\" value={values.maximum} />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default:\n      valueEl?.getAttribute('placeholder') ??\n      valueEl?.getAttribute('value') ??\n      undefined,\n    minimum: valueEl?.getAttribute('min') ?? undefined,\n    maximum: valueEl?.getAttribute('max') ?? undefined,\n  }\n}\n\nexport const NumberValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"number\" name=\"default\" step=\"any\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum\n        <input type=\"number\" name=\"minimum\" step=\"any\" value={values.minimum} />\n      </label>\n\n      <label>\n        Maximum\n        <input type=\"number\" name=\"maximum\" step=\"any\" value={values.maximum} />\n      </label>\n    </Fragment>\n  )\n}\n","import { Fragment, FunctionalComponent, h } from '@stencil/core'\n\nconst getProperties = (valueEl?: Element) => {\n  return {\n    default: valueEl?.getAttribute('placeholder') ?? undefined,\n    minLength: valueEl?.getAttribute('minLength') ?? undefined,\n    maxLength: valueEl?.getAttribute('maxLength') ?? undefined,\n    pattern: valueEl?.getAttribute('pattern') ?? undefined,\n  }\n}\n\nexport const StringValidator = ({\n  valueEl,\n}: {\n  valueEl?: Element\n}): FunctionalComponent => {\n  const values = getProperties(valueEl)\n\n  return (\n    <Fragment>\n      <label>\n        Default value\n        <input type=\"text\" name=\"default\" value={values.default} />\n      </label>\n\n      <label>\n        Minimum length\n        <input\n          type=\"number\"\n          step=\"1\"\n          name=\"minLength\"\n          value={values.minLength}\n          min=\"0\"\n        />\n      </label>\n\n      <label>\n        Maximum length\n        <input\n          type=\"number\"\n          step=\"1\"\n          name=\"maxLength\"\n          value={values.maxLength}\n        />\n      </label>\n\n      <label>\n        Pattern (RegEx)\n        <input type=\"text\" name=\"pattern\" value={values.pattern} />\n      </label>\n    </Fragment>\n  )\n}\n","import { FunctionalComponent, h } from '@stencil/core'\nimport { ValidatorTypes } from '../types'\nimport { BooleanValidator } from './booleanValidator'\nimport { ConstantValidator } from './constantValidator'\nimport { IntegerValidator } from './integerValidator'\nimport { NumberValidator } from './numberValidator'\nimport { StringValidator } from './stringValidator'\n\ninterface Props {\n  onValidatorChange: (e: Event) => void\n  type?: ValidatorTypes\n  valueElRef?: Element\n}\n\nconst validateField = (e: Event) => {\n  const target = e.target as HTMLSelectElement | HTMLInputElement\n  target.reportValidity()\n}\n\nconst getValidator =\n  (valueElRef?: Element) => (validatorType: Props['type']) => {\n    switch (validatorType) {\n      case 'NumberValidator': {\n        return <NumberValidator valueEl={valueElRef}></NumberValidator>\n      }\n      case 'IntegerValidator': {\n        return <IntegerValidator valueEl={valueElRef}></IntegerValidator>\n      }\n      case 'StringValidator': {\n        return <StringValidator valueEl={valueElRef}></StringValidator>\n      }\n      case 'ConstantValidator': {\n        return <ConstantValidator valueEl={valueElRef}></ConstantValidator>\n      }\n      case 'BooleanValidator': {\n        return <BooleanValidator valueEl={valueElRef}></BooleanValidator>\n      }\n    }\n  }\n\nexport const Validator = (props: Props): FunctionalComponent => {\n  return (\n    <stencila-menu autoClose={false} menuPosition=\"bottom-start\">\n      <stencila-button\n        iconOnly={true}\n        icon=\"equalizer\"\n        size=\"xsmall\"\n        slot=\"toggle\"\n        aria-label=\"Toggle menu\"\n        color=\"key\"\n        minimal={true}\n      ></stencila-button>\n\n      <form\n        onChange={props.onValidatorChange}\n        onInput={validateField}\n        onFocusin={validateField}\n      >\n        <label>\n          Type\n          <select name=\"validator\">\n            <option disabled selected={props.type === undefined}>\n              Select…\n            </option>\n            <option\n              value=\"BooleanValidator\"\n              selected={props.type === 'BooleanValidator'}\n            >\n              Boolean\n            </option>\n            <option\n              value=\"IntegerValidator\"\n              selected={props.type === 'IntegerValidator'}\n            >\n              Integer\n            </option>\n            <option\n              value=\"NumberValidator\"\n              selected={props.type === 'NumberValidator'}\n            >\n              Number\n            </option>\n            <option\n              value=\"StringValidator\"\n              selected={props.type === 'StringValidator'}\n            >\n              String\n            </option>\n            <option\n              value=\"EnumValidator\"\n              selected={props.type === 'EnumValidator'}\n            >\n              Enum\n            </option>\n          </select>\n        </label>\n\n        {getValidator(props.valueElRef)(props.type)}\n      </form>\n    </stencila-menu>\n  )\n}\n","@import '~@stencila/style-stencila/dist/molecules/parameter.css';\n","@import '~@stencila/style-stencila/dist/molecules/parameter.css';\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { getInputValue } from '../utils/input'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { isValidatorType, ValidatorTypes } from './types'\nimport { Validator } from './validators'\n\n/**\n * Stencila Parameter component\n *\n * @slot name - The name of the parameter\n * @slot value - The current value of the parameter\n */\n@Component({\n  tag: 'stencila-parameter',\n  styleUrls: {\n    default: 'parameter.css',\n    material: 'parameter.css',\n  },\n  scoped: true,\n})\nexport class Parameter {\n  @Element() el: HTMLStencilaParameterElement\n\n  private labelSlotRef: Element | undefined = undefined\n  private valueSlotRef: Element | undefined = undefined\n\n  /**\n   * The context of the component. In `read` mode the parameter validator and its\n   * properties cannot be edited.\n   */\n  @Prop({ reflect: true }) mode: 'read' | 'edit' = 'edit'\n\n  /**\n   * The Stencila `Validator` Schema with which to configure and validate the parameter.\n   */\n  @Prop({ mutable: true }) validator?: ValidatorTypes\n\n  @State() paramName = ''\n\n  /**\n   * Event emitted when either the name of value of the parameter changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `value` or `name`.\n   */\n  @Event({\n    eventName: 'stencila-parameter-change',\n  })\n  public parameterChange: EventEmitter\n\n  private onParamChange = (e: Event) => {\n    const target = e.currentTarget as HTMLInputElement | HTMLSelectElement\n    const isValid = this.validateValue(target)\n    if (isValid) {\n      this.parameterChange.emit({\n        property: 'value',\n        value: getInputValue(target),\n      })\n    }\n  }\n\n  private onParamNameChange = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.parameterChange.emit({\n      property: 'name',\n      value: target.textContent,\n    })\n  }\n\n  /**\n   * Event emitted when either the type or property of the parameter validator\n   * changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `validator` or `property`.\n   */\n  @Event({\n    eventName: 'stencila-validator-change',\n  })\n  public validatorChange: EventEmitter\n\n  onValidatorChange = (e: Event) => {\n    const target = e.target as HTMLInputElement | HTMLSelectElement\n    const value = getInputValue(target)\n\n    if (\n      target.name === 'validator' &&\n      typeof value === 'string' &&\n      target.value !== this.validator &&\n      isValidatorType(value)\n    ) {\n      this.validator = value\n\n      this.validatorChange.emit({\n        type: 'validator',\n        value,\n      })\n    } else {\n      this.validatorChange.emit({\n        type: 'property',\n        name: target.name,\n        value,\n      })\n    }\n  }\n\n  private validateValue = (target: HTMLInputElement | HTMLSelectElement) => {\n    return target.reportValidity()\n  }\n\n  private getValidatorFromMetaEl = (): ValidatorTypes | undefined => {\n    const validatorMetaEl = this.el.querySelector('meta[itemprop=\"validator\"]')\n    const validatorAttrParts =\n      validatorMetaEl?.getAttribute('itemtype')?.split('/') ?? []\n\n    const validatorAttr = validatorAttrParts[validatorAttrParts.length - 1]\n\n    return isValidatorType(validatorAttr) ? validatorAttr : undefined\n  }\n\n  componentWillLoad() {\n    if (this.validator === undefined) {\n      this.validator = this.getValidatorFromMetaEl()\n    }\n\n    this.labelSlotRef = getSlotByName(this.el)('name')[0]\n\n    const valueEl = getSlotByName(this.el)('value')\n    this.valueSlotRef = valueEl[0]\n    for (const input of valueEl) {\n      input.addEventListener('input', this.onParamChange)\n      input.addEventListener('focus', this.onParamChange)\n    }\n  }\n\n  disconnectedCallback() {\n    const valueEl = getSlotByName(this.el)('value')\n    for (const input of valueEl) {\n      input.removeEventListener('input', this.onParamChange)\n      input.removeEventListener('focus', this.onParamChange)\n    }\n  }\n\n  public render() {\n    const labelText = this.labelSlotRef?.textContent ?? 'parameter'\n\n    return (\n      <Host>\n        <span class=\"actions\">\n          {this.mode === 'edit' && (\n            <Validator\n              type={this.validator}\n              onValidatorChange={this.onValidatorChange}\n              valueElRef={this.valueSlotRef}\n            ></Validator>\n          )}\n\n          <span\n            class=\"name\"\n            contentEditable={this.mode === 'edit'}\n            onClick={(e) => {\n              if (this.mode === 'edit') {\n                e.preventDefault()\n              }\n            }}\n            onInput={this.onParamNameChange}\n            ref={(el) => (this.labelSlotRef = el)}\n          >\n            <slot name=\"name\" />\n          </span>\n        </span>\n\n        <form class=\"value\" title={labelText}>\n          <slot name=\"value\" />\n        </form>\n      </Host>\n    )\n  }\n}\n"]}