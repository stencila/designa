{"version":3,"sources":["src/components/actionMenu/actionMenu.css?tag=stencila-action-menu&mode=default&encapsulation=scoped","src/components/actionMenu/actionMenu.css?tag=stencila-action-menu&mode=material&encapsulation=scoped","src/components/actionMenu/actionMenu.tsx"],"names":["defaultActionMenuCss","materialActionMenuCss","slots","default","persistentActions","ActionMenu","exports","class_1","hostRef","_this","this","isCollapsed","toggleActionMenu","width","isAnimating","isTransitioning","calculateWidth","actionContainerRef","getBoundingClientRect","concat","observer","window","MutationObserver","checkForSecondaryActions","hasSecondaryActions","Array","from","el","children","some","child","slot","prototype","componentWillLoad","componentDidLoad","requestAnimationFrame","addEventListener","observe","characterData","subtree","disconnectedCallback","disconnect","render","length","h","class","name","secondaryActions","hidden","onClick","icon","color","minimal","size","iconOnly","ariaLabel","actionContainer","ref","style","--max-width"],"mappings":"kJAAA,IAAMA,EAAuB,urDCA7B,IAAMC,EAAwB,8sDCE9B,IAAMC,EAAQ,CACZC,QAAS,GACTC,kBAAmB,yBAWRC,EAAUC,EAAA,uBAAA,WARvB,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,eAmBmBA,KAAAC,YAAc,MAEvBD,KAAAE,iBAAmB,WAAA,OAAOH,EAAKE,aAAeF,EAAKE,aAE1CD,KAAAG,MAAQ,OACRH,KAAAI,YAAc,MAGvBJ,KAAAK,gBAAkB,MAElBL,KAAAM,eAAiB,WACvB,GAAIP,EAAKQ,oBAAsBR,EAAKM,kBAAoB,MAAO,CAC7DN,EAAKI,MAAQ,OAEb,IAAMA,EAAQJ,EAAKQ,mBAAmBC,wBAAwBL,MAE9DJ,EAAKI,MAAQ,GAAAM,OAAGN,EAAK,QAIjBH,KAAAU,SAAW,IAAIC,OAAOC,iBAAiBZ,KAAKM,gBAE5CN,KAAAa,yBAA2B,WACjCd,EAAKe,oBAAsBC,MAAMC,KAAKjB,EAAKkB,GAAGC,UAAUC,MAAK,SAACC,GAC5D,OAAOA,EAAMC,OAAS,MAExB,OAAOtB,EAAKe,qBAGJjB,EAAAyB,UAAAC,kBAAA,WACRvB,KAAKa,4BAGGhB,EAAAyB,UAAAE,iBAAA,WAAA,IAAAzB,EAAAC,KACR,GAAIA,KAAKO,mBAAoB,CAC3BI,OAAOc,uBAAsB,WAC3B,GAAI1B,EAAKQ,oBAAsBR,EAAKe,oBAAqB,CACvDf,EAAKQ,mBAAmBmB,iBACtB,mBACA,WAAA,OAAO3B,EAAKM,gBAAkB,QAGhCN,EAAKQ,mBAAmBmB,iBACtB,iBACA,WAAA,OAAO3B,EAAKM,gBAAkB,SAGhCN,EAAKW,SAASiB,QAAQ5B,EAAKkB,GAAI,CAC7BW,cAAe,KACfC,QAAS,OAGX9B,EAAKO,iBACLP,EAAKE,YAAc,WAMjBJ,EAAAyB,UAAAQ,qBAAA,WACR9B,KAAKU,SAASqB,cAGTlC,EAAAyB,UAAAU,OAAA,WAAA,IAAAjC,EAAAC,KACL,GAAIA,KAAKiB,GAAGC,SAASe,QAAU,EAAG,OAAO,KAEzC,OACEC,EAAA,MAAA,KACEA,EAAA,OAAA,CAAMC,MAAM,qBACVD,EAAA,OAAA,CAAME,KAAM5C,EAAME,qBAGpBwC,EAAA,OAAA,CACEC,MAAO,CACLE,iBAAkB,KAClBC,QAAStC,KAAKc,sBAGhBoB,EAAA,kBAAA,CACEK,QAASvC,KAAKE,iBACdsC,KAAK,OACLC,MAAM,MACNC,QAAS,KACTC,KAAK,SACLC,SAAU,KACVC,UAAU,uBAGZX,EAAA,OAAA,CACEC,MAAO,CACLW,gBAAiB,KACjB1C,YAAaJ,KAAKI,YAClBH,YAAaD,KAAKC,aAEpB8C,IAAK,SAAC9B,GAAE,OAAMlB,EAAKQ,mBAAqBU,GACxC+B,MAAO,CAAEC,cAAejD,KAAKG,QAE7B+B,EAAA,OAAA,+HA5GW","sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/actionMenu.css';\n","@import '~@stencila/style-stencila/dist/molecules/actionMenu.css';\n","import { Component, Element, h, Prop, State } from '@stencil/core'\n\nconst slots = {\n  default: '',\n  persistentActions: 'persistentActions',\n}\n\n@Component({\n  tag: 'stencila-action-menu',\n  styleUrls: {\n    default: 'actionMenu.css',\n    material: 'actionMenu.css',\n  },\n  scoped: true,\n})\nexport class ActionMenu {\n  @Element() private el: HTMLStencilaActionMenuElement\n\n  /**\n   * List of buttons to include in Action Menu.\n   */\n  @Prop()\n  public actions: HTMLButtonElement[]\n\n  @State() private hasSecondaryActions: boolean\n\n  @State() private isCollapsed = false\n\n  private toggleActionMenu = () => (this.isCollapsed = !this.isCollapsed)\n\n  @State() private width = 'auto'\n  @State() private isAnimating = false\n\n  private actionContainerRef: HTMLSpanElement | undefined\n  private isTransitioning = false\n\n  private calculateWidth = () => {\n    if (this.actionContainerRef && this.isTransitioning === false) {\n      this.width = 'auto'\n\n      const width = this.actionContainerRef.getBoundingClientRect().width\n\n      this.width = `${width}px`\n    }\n  }\n\n  private observer = new window.MutationObserver(this.calculateWidth)\n\n  private checkForSecondaryActions = (): boolean => {\n    this.hasSecondaryActions = Array.from(this.el.children).some((child) => {\n      return child.slot === ''\n    })\n    return this.hasSecondaryActions\n  }\n\n  protected componentWillLoad(): void {\n    this.checkForSecondaryActions()\n  }\n\n  protected componentDidLoad(): void {\n    if (this.actionContainerRef) {\n      window.requestAnimationFrame(() => {\n        if (this.actionContainerRef && this.hasSecondaryActions) {\n          this.actionContainerRef.addEventListener(\n            'transitionstart',\n            () => (this.isTransitioning = true)\n          )\n\n          this.actionContainerRef.addEventListener(\n            'transitionend',\n            () => (this.isTransitioning = false)\n          )\n\n          this.observer.observe(this.el, {\n            characterData: true,\n            subtree: true,\n          })\n\n          this.calculateWidth()\n          this.isCollapsed = true\n        }\n      })\n    }\n  }\n\n  protected disconnectedCallback(): void {\n    this.observer.disconnect()\n  }\n\n  public render() {\n    if (this.el.children.length <= 0) return null\n\n    return (\n      <nav>\n        <span class=\"persistentActions\">\n          <slot name={slots.persistentActions} />\n        </span>\n\n        <span\n          class={{\n            secondaryActions: true,\n            hidden: !this.hasSecondaryActions,\n          }}\n        >\n          <stencila-button\n            onClick={this.toggleActionMenu}\n            icon=\"more\"\n            color=\"key\"\n            minimal={true}\n            size=\"xsmall\"\n            iconOnly={true}\n            ariaLabel=\"Toggle Action Menu\"\n          ></stencila-button>\n\n          <span\n            class={{\n              actionContainer: true,\n              isAnimating: this.isAnimating,\n              isCollapsed: this.isCollapsed,\n            }}\n            ref={(el) => (this.actionContainerRef = el)}\n            style={{ '--max-width': this.width }}\n          >\n            <slot />\n          </span>\n        </span>\n      </nav>\n    )\n  }\n}\n"]}