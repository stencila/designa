{"version":3,"sources":["node_modules/@codemirror/stream-parser/dist/index.js"],"names":["countCol","string","end","tabSize","startIndex","startValue","search","length","n","i","charCodeAt","StringStream","[object Object]","indentUnit","this","pos","start","lastColumnPos","lastColumnValue","charAt","undefined","match","ch","ok","RegExp","test","eat","found","indexOf","pattern","consume","caseInsensitive","cased","str","toLowerCase","substr","slice","index","fullParser","spec","token","blankLine","startState","copyState","defaultCopyState","indent","languageData","tokenTable","noTokens","state","newState","prop","val","Array","StreamLanguage","Language","parser","data","defineLanguageFacet","p","self","impl","Parser","input","fragments","ranges","Parse","super","docID","indentService","of","cx","getIndent","streamParser","stateAfter","NodeProp","perNode","TokenTable","defaultTokenTable","tree","syntaxTree","at","resolve","type","topNode","parent","findState","from","statePos","unit","line","doc","lineAt","Math","min","to","stream","text","readToken","exec","allowsNesting","lang","off","startPos","before","children","child","positions","Tree","cutTree","inside","inner","concat","findStartInFragments","editorState","f","openStart","openEnd","offset","getIndentUnit","empty","stoppedAt","chunks","chunkPos","chunk","chunkReused","rangeIndex","context","ParseContext","get","parsedPos","chunkStart","push","viewport","skipUntilInView","parseEnd","parseLine","finishChunk","finish","lineChunks","eol","lineAfter","rangeEnd","rangeStart","after","side","offPos","id","size","skipGapsTo","len0","nextLine","emitToken","build","buffer","nodeSet","topID","maxBufferLength","reused","balance","result","Error","Object","create","typeArray","NodeType","none","NodeSet","warned","defaultTable","legacyName","name","createTokenType","extra","table","assign","tag","warnForPart","part","msg","console","warn","tagStr","split","value","tags","replace","define","props","styleTags","languageDataProp","add"],"mappings":"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","sourcesContent":["import { NodeType, NodeSet, Parser, NodeProp, Tree } from '@lezer/common';\nimport { tags, styleTags } from '@codemirror/highlight';\nimport { Language, defineLanguageFacet, indentService, syntaxTree, ParseContext, getIndentUnit, languageDataProp } from '@codemirror/language';\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        return countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a streaming\nparser.\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let start = findState(this, tree, 0, at.from, pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let { text } = cx.lineAt(pos);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"typeName\"],\n    [\"attribute\", \"propertyName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tag = null;\n    for (let part of tagStr.split(\".\")) {\n        let value = (extra[part] || tags[part]);\n        if (!value) {\n            warnForPart(part, `Unknown highlighting tag ${part}`);\n        }\n        else if (typeof value == \"function\") {\n            if (!tag)\n                warnForPart(part, `Modifier ${part} used at start of tag`);\n            else\n                tag = value(tag);\n        }\n        else {\n            if (tag)\n                warnForPart(part, `Tag ${part} used as modifier`);\n            else\n                tag = value;\n        }\n    }\n    if (!tag)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), type = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tag })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)] });\n    typeArray.push(type);\n    return type;\n}\n\nexport { StreamLanguage, StringStream };\n"]}