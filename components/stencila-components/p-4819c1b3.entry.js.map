{"version":3,"sources":["src/components/nodeList/nodeList.css?tag=stencila-node-list&mode=default&encapsulation=scoped","src/components/nodeList/nodeList.css?tag=stencila-node-list&mode=material&encapsulation=scoped","src/components/nodeList/nodeList.tsx"],"names":["defaultNodeListCss","materialNodeListCss","OutputsList","[object Object]","hostRef","this","emptyOutputMessage","isEmpty","checkIfEmpty","slotted","getSlotByName","el","length","every","content","_a","innerHTML","trim","childObserver","MutationObserver","observe","childList","subtree","disconnect","h","Host","class","hidden","emptyContentMessage"],"mappings":"6FAAA,MAAMA,EAAqB,orHCA3B,MAAMC,EAAsB,0vHCcfC,EAAW,MARxBC,YAAAC,aAWUC,KAAAC,mBAAqB,oBAEpBD,KAAAE,QAAU,KAEnBF,KAAAG,aAAe,KACb,MAAMC,EAAUC,EAAcL,KAAKM,GAAnBD,CAAuB,CAAC,UAAW,YAEnD,GAAID,EAAQG,SAAW,EAAG,CACxBP,KAAKE,QAAU,SACV,CACLF,KAAKE,QAAUE,EAAQI,OAAOF,UAC5B,MAAMG,GAAUC,EAAAJ,EAAGK,aAAS,MAAAD,SAAA,OAAA,EAAAA,EAAEE,OAC9B,OAAOH,IAAY,IAAMA,IAAYT,KAAKC,wBAKxCD,KAAAa,cAAgB,IAAIC,iBAAiBd,KAAKG,cAElDL,oBACEE,KAAKG,eAELH,KAAKa,cAAcE,QAAQf,KAAKM,GAAI,CAClCU,UAAW,KACXC,QAAS,OAIbnB,8BACEY,EAAAV,KAAKa,iBAAa,MAAAH,SAAA,OAAA,EAAAA,EAAEQ,aAGfpB,SACL,OACEqB,EAACC,EAAI,KACHD,EAAA,OAAA,MAEAA,EAAA,KAAA,CAAIE,MAAO,CAAEC,QAAStB,KAAKE,QAASqB,oBAAqB,OACtDvB,KAAKC","sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/nodeList.css';\n","@import '~@stencila/style-stencila/dist/atoms/nodeList.css';\n","import { Component, Element, h, Host, State } from '@stencil/core'\nimport { getSlotByName } from '../utils/slotSelectors'\n\n/**\n * @slot default - A list or collection of elements to render. If empty, a message stating \"No output to show\" will be rendered instead.\n */\n@Component({\n  tag: 'stencila-node-list',\n  styleUrls: {\n    default: 'nodeList.css',\n    material: 'nodeList.css',\n  },\n  scoped: true,\n})\nexport class OutputsList {\n  @Element() el: HTMLStencilaNodeListElement\n\n  private emptyOutputMessage = 'No output to show'\n\n  @State() isEmpty = true\n\n  checkIfEmpty = () => {\n    const slotted = getSlotByName(this.el)(['default', 'outputs'])\n\n    if (slotted.length === 0) {\n      this.isEmpty = true\n    } else {\n      this.isEmpty = slotted.every((el) => {\n        const content = el.innerHTML?.trim()\n        return content === '' || content === this.emptyOutputMessage\n      })\n    }\n  }\n\n  private childObserver = new MutationObserver(this.checkIfEmpty)\n\n  componentWillLoad() {\n    this.checkIfEmpty()\n\n    this.childObserver.observe(this.el, {\n      childList: true,\n      subtree: true,\n    })\n  }\n\n  disconnectedCallback(): void {\n    this.childObserver?.disconnect()\n  }\n\n  public render() {\n    return (\n      <Host>\n        <slot />\n\n        <em class={{ hidden: !this.isEmpty, emptyContentMessage: true }}>\n          {this.emptyOutputMessage}\n        </em>\n      </Host>\n    )\n  }\n}\n"]}