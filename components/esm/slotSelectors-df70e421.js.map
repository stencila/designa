{"file":"slotSelectors-df70e421.js","mappings":"AAAA;;;;;;;;;;MAUa,aAAa,GACxB,CAAC,IAAqB,KACtB,CAAC,QAA2B;EAC1B,IAAI,CAAC,IAAI;IAAE,OAAO,EAAE,CAAA;EAEpB,MAAM,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAA;EAC3E,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAChC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;GAC7B;EAED,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;EAC1C,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,KAC1C,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CACzC,CAAA;EAED,OAAO,aAAa,CAAA;AACtB;;;;","names":[],"sources":["./src/components/utils/slotSelectors.ts"],"sourcesContent":["/**\n * Find an HTML Element with the given `slot` name attribute, if it exists.\n * This traverses the HTML Collection and can be used before the elements\n * are attached to the DOM.\n * This is especially useful in the `componentWillMount` lifecycle events for performance reasons\n *\n * Extra care needs to be taken if used with the `default`/unnamed slot as it can lead to false positives.\n * This is because any element that does not have an explicit `slot` attribute,\n * will return a value of `''` (empty string).\n */\nexport const getSlotByName =\n  (root?: Element | null) =>\n  (slotName: string | string[]): Element[] => {\n    if (!root) return []\n\n    const normalizedSlotNames = Array.isArray(slotName) ? slotName : [slotName]\n    if (slotName.includes('default')) {\n      normalizedSlotNames.push('')\n    }\n\n    const children = Array.from(root.children)\n    const foundElements = children.filter((child) =>\n      normalizedSlotNames.includes(child.slot)\n    )\n\n    return foundElements\n  }\n"],"version":3}