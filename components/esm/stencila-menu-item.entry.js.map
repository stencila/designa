{"file":"stencila-menu-item.entry.js","mappings":";;AAAA,MAAM,kBAAkB,GAAG,6sEAA6sE;;ACAxuE,MAAM,mBAAmB,GAAG,gqEAAgqE;;MCW/qE,QAAQ;EARrB;;;;;IAqBiB,SAAI,GAA6C,SAAS,CAAA;;;;IAK1D,SAAI,GACjB,UAAU,CAAA;;;;IAKoB,aAAQ,GAAG,KAAK,CAAA;;;;;IAMhB,YAAO,GAAG,KAAK,CAAA;GA4BhD;EA1BQ,MAAM;;IACX,MAAM,SAAS,GAAG;MAChB,eAAe,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO;MAC9C,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,CAAA;IAED,QACE,EAAC,IAAI,oBAAK,SAAS,IAAE,IAAI,EAAE,IAAI,CAAC,IAAI,KACjC,CAAA,MAAA,IAAI,CAAC,EAAE,0CAAE,IAAI,MAAK,QAAQ,IACzB,EAAC,QAAQ,QACN,IAAI,CAAC,IAAI,KAAK,SAAS,KACtB,qBAAe,IAAI,EAAE,IAAI,CAAC,IAAI,GAAkB,CACjD,EACD,eAAQ,CACC,KAEX,cACG,IAAI,CAAC,IAAI,KAAK,SAAS,KACtB,qBAAe,IAAI,EAAE,IAAI,CAAC,IAAI,GAAkB,CACjD,EACD,eAAQ,CACL,CACN,CACI,EACR;GACF;;;;;;;;;;","names":[],"sources":["./src/components/menuItem/menuItem.css?tag=stencila-menu-item&mode=default&encapsulation=scoped","./src/components/menuItem/menuItem.material.css?tag=stencila-menu-item&mode=material&encapsulation=scoped","./src/components/menuItem/menuItem.tsx"],"sourcesContent":["@import '~@stencila/style-stencila/dist/atoms/menuItem.css';\n","@import '~@stencila/style-material/dist/atoms/menuItem.css';\n","import { Element, Component, h, Host, Prop, Fragment } from '@stencil/core'\nimport { IconNames } from '../icon/iconNames'\n\n@Component({\n  tag: 'stencila-menu-item',\n  styleUrls: {\n    default: 'menuItem.css',\n    material: 'menuItem.material.css',\n  },\n  scoped: true,\n})\nexport class MenuItem {\n  @Element() el: HTMLStencilaMenuItemElement | undefined\n\n  /**\n   * Name of the icon to show before the label\n   * @see Icon component for possible values\n   */\n  @Prop()\n  icon: IconNames | undefined\n\n  /**\n   * The overall size of the component.\n   */\n  @Prop() public size: 'xsmall' | 'small' | 'default' | 'large' = 'default'\n\n  /**\n   * The overall size of the component.\n   */\n  @Prop() public role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' =\n    'menuitem'\n\n  /**\n   * Determines whether the menu item is enabled/clickable or not\n   */\n  @Prop({ reflect: true }) public disabled = false\n\n  /**\n   * Renders the menu item as a section divider.\n   * It does not have any click or hover handlers\n   */\n  @Prop({ reflect: true }) public divider = false\n\n  public render() {\n    const ariaAttrs = {\n      'aria-disabled': this.disabled || this.divider,\n      role: this.role,\n    }\n\n    return (\n      <Host {...ariaAttrs} size={this.size}>\n        {this.el?.slot === 'toggle' ? (\n          <Fragment>\n            {this.icon !== undefined && (\n              <stencila-icon icon={this.icon}></stencila-icon>\n            )}\n            <slot />\n          </Fragment>\n        ) : (\n          <li>\n            {this.icon !== undefined && (\n              <stencila-icon icon={this.icon}></stencila-icon>\n            )}\n            <slot />\n          </li>\n        )}\n      </Host>\n    )\n  }\n}\n"],"version":3}