{"file":"stencila-code-dependency.entry.js","mappings":";;;;AAAA,MAAM,wBAAwB,GAAG,89EAA89E;;ACA//E,MAAM,yBAAyB,GAAG,EAAE;;MCYvB,cAAc;;;;EA+ClB,MAAM;;IACX,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAClB,IAAI,CAAC,QAAQ,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK;QAClC,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC;QACrB,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAA;IAC7B,QACE,EAAC,IAAI,QACH,SAAG,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,IAC3B,EAAC,iBAAiB,IAChB,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,eAAe,EAAE,IAAI,CAAC,eAAe,EACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACJ,EACrB,WAAK,KAAK,EAAC,SAAS,IAClB,WAAK,KAAK,EAAC,OAAO,IACf,MAAA,IAAI,CAAC,KAAK,mCAAI,IAAI,CAAC,MAAM,EAEzB,IAAI,CAAC,mBAAmB,KAAK,SAAS,KACrC,gBAAO,IAAI,CAAC,mBAAmB,CAAQ,CACxC,CACG,EAEN,eACE,YAAM,KAAK,EAAC,QAAQ,IAAE,IAAI,CAAC,QAAQ,CAAQ,CACvC,CACF,CACJ,CACC,EACR;GACF;;;;;;;;;","names":[],"sources":["./src/components/codeDependency/codeDependency.css?tag=stencila-code-dependency&mode=default&encapsulation=scoped","./src/components/codeDependency/codeDependency.material.css?tag=stencila-code-dependency&mode=material&encapsulation=scoped","./src/components/codeDependency/codeDependency.tsx"],"sourcesContent":["@import '~@stencila/style-stencila/dist/molecules/codeDependency.css';\n","","import { Component, h, Host, Prop } from '@stencil/core'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport { ExecuteRequired, ExecuteStatus } from '../code/codeTypes'\n\n@Component({\n  tag: 'stencila-code-dependency',\n  styleUrls: {\n    default: 'codeDependency.css',\n    material: 'codeDependency.material.css',\n  },\n  scoped: true,\n})\nexport class CodeDependency {\n  /**\n   * The Node ID, should match the HTML `id` attribute.\n   */\n  @Prop()\n  nodeId: string\n\n  /**\n   * User assigned label for the node\n   */\n  @Prop()\n  label: string | undefined\n\n  /**\n   * Node kind, such as `CodeChunk`, `CodeExpression`, `Parameter`, etc.\n   * Aligns with the Stencila Schema node types.\n   */\n  @Prop()\n  nodeKind: string\n\n  /**\n   * Whether the dependency should be automatically re-executed based on semantic\n   * analysis of the code.\n   */\n  @Prop()\n  executeAuto: 'Always' | 'Auto' | 'Never'\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus?: ExecuteStatus\n\n  /**\n   * Programming language of the CodeExpression, note that not all nodes have this\n   * property (`Parameter` for example).\n   */\n  @Prop()\n  programmingLanguage?: string\n\n  public render() {\n    const [href, target] =\n      this.nodeKind === 'File' && this.label\n        ? [this.label, 'blank']\n        : [`#${this.nodeId}`, '']\n    return (\n      <Host>\n        <a href={href} target={target}>\n          <CodeExecuteStatus\n            executeStatus={this.executeStatus}\n            executeRequired={this.executeRequired}\n            nodeKind={this.nodeKind}\n          ></CodeExecuteStatus>\n          <div class=\"content\">\n            <div class=\"label\">\n              {this.label ?? this.nodeId}\n\n              {this.programmingLanguage !== undefined && (\n                <code>{this.programmingLanguage}</code>\n              )}\n            </div>\n\n            <div>\n              <span class=\"status\">{this.nodeKind}</span>\n            </div>\n          </div>\n        </a>\n      </Host>\n    )\n  }\n}\n"],"version":3}