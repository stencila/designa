{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/utils/theme.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,WAAW,EAAE,MAAM,UAAU,CAAA;AAE9C,MAAM,eAAe,GAAG,CAAC,KAAa,EAAmB,EAAE;EACzD,QAAQ,KAAK,EAAE;IACb,KAAK,WAAW,CAAC,KAAK,CAAC;IACvB,KAAK,WAAW,CAAC,MAAM,CAAC;IACxB,KAAK,WAAW,CAAC,GAAG,CAAC;IACrB,KAAK,WAAW,CAAC,OAAO,CAAC;IACzB,KAAK,WAAW,CAAC,OAAO,CAAC;IACzB,KAAK,WAAW,CAAC,KAAK,CAAC;IACvB,KAAK,WAAW,CAAC,OAAO,CAAC;IACzB,KAAK,WAAW,CAAC,IAAI;MACnB,OAAO,IAAI,CAAA;IACb;MACE,OAAO,KAAK,CAAA;GACf;AACH,CAAC,CAAA;AAED,MAAM,eAAe,GAAG,MAAM,CAAA;AAE9B,MAAM,uBAAuB,GAAG,CAAC,KAAa,EAAW,EAAE;EACzD,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;EACtC,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC7D,CAAC,CAAA;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAsB,EAAU,EAAE;EACzD,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;IAC1B,0BAA0B;IAC1B,OAAO,OAAO,KAAK,GAAG,CAAA;GACvB;OAAM,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IAC3D,6BAA6B;IAC7B,OAAO,KAAK,CAAA;GACb;OAAM,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;IACjC,4CAA4C;IAC5C,OAAO,eAAe,KAAK,OAAO,CAAA;GACnC;OAAM,IAAI,uBAAuB,CAAC,KAAK,CAAC,EAAE;IACzC,iFAAiF;IACjF,OAAO,eAAe,KAAK,GAAG,CAAA;GAC/B;OAAM;IACL,OAAO,KAAK,CAAA;GACb;AACH,CAAC,CAAA","sourcesContent":["import { Colors, ThemeColors } from '../types'\n\nconst isColorVariable = (color: string): color is Colors => {\n  switch (color) {\n    case ThemeColors.brand:\n    case ThemeColors.danger:\n    case ThemeColors.key:\n    case ThemeColors.neutral:\n    case ThemeColors.primary:\n    case ThemeColors.stock:\n    case ThemeColors.success:\n    case ThemeColors.warn:\n      return true\n    default:\n      return false\n  }\n}\n\nconst colorValueRegex = /\\d00/\n\nconst startsWithColorVariable = (color: string): boolean => {\n  const [name, value] = color.split('-')\n  return isColorVariable(name) && colorValueRegex.test(value)\n}\n\n/**\n * Given a string value, tries to return a CSS color variable from the Theme palette\n *\n * @function getColor\n * @param {string|Colors} color - A keyword from the Theme palette (`primary`, `success`, etc.)\n * - a keyword with a\n * specific value (e.g. `primary-200`, `success-800`, etc.),\n * - or a valid CSS color value (`#FFFF99`, `rgba(0, 0, 0, 0.2)`).\n * @return {string} Either a a CSS variable from the Theme palette, or the original argument\n */\nexport const getColor = (color: string | Colors): string => {\n  if (color.startsWith('--')) {\n    // Color is a CSS variable\n    return `var(${color})`\n  } else if (color.startsWith('#') || color.startsWith('rgb')) {\n    // Color is a CSS color value\n    return color\n  } else if (isColorVariable(color)) {\n    // Color is a keyword from the color palette\n    return `var(--color-${color}-500)`\n  } else if (startsWithColorVariable(color)) {\n    // Color is a specific color tint/shade from the color palette (e.g. primary-200)\n    return `var(--color-${color})`\n  } else {\n    return color\n  }\n}\n"]}