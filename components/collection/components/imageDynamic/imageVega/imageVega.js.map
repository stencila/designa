{"version":3,"file":"imageVega.js","sourceRoot":"","sources":["../../../../src/components/imageDynamic/imageVega/imageVega.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core'\nimport embed, { Result, VisualizationSpec } from 'vega-embed'\nimport { injectScriptSrc } from '../../utils/jsDeps'\nimport { createPlotContainer } from '../imageDynamicUtils'\nimport {\n  getVegaLibSrc,\n  getVegaVersion,\n  VegaDependency,\n  VegaLibType,\n  VegaLoadEvent,\n  vegaMediaType,\n} from './imageVegaUtils'\n\nconst isLoaded: Record<VegaLibType, boolean | undefined> = {\n  vega: undefined,\n  'vega-lite': undefined,\n}\n\n@Component({\n  tag: 'stencila-image-vega',\n  styleUrls: {\n    default: 'imageVega.css',\n    material: 'imageVega.css',\n  },\n  scoped: true,\n})\nexport class ImageVegaComponent {\n  @Element() private el: HTMLStencilaImageVegaElement\n\n  private plotContainer: HTMLDivElement | null\n\n  private vegaDependency: VegaDependency\n\n  private detectVegaDependency = (\n    spec: VisualizationSpec | string | undefined\n  ): VegaDependency => {\n    const dependency = getVegaVersion(\n      typeof spec === 'object' ? spec.$schema : spec\n    )\n    this.vegaDependency = dependency\n\n    return dependency\n  }\n\n  /**\n   * The Vega or Vega-Lite spec\n   * @see https://vega.github.io/vega/docs/specification/\n   */\n  @Prop() spec?: VisualizationSpec | string\n\n  /**\n   * A JavaScript object containing options for embedding\n   * @see https://github.com/vega/vega-embed#options\n   */\n  @Prop() options?: Record<string, unknown> = {}\n  // TODO: Fix type definition. Currently StencilJS writes user computer specific\n  // file path in the auto-generated component README.md, which causes\n  // package release failures on CI.\n\n  @State() private plotIsRendered = false\n\n  private getPlotContent = (): VisualizationSpec | string | undefined => {\n    if (this.spec !== undefined && this.spec !== '') {\n      return this.spec\n    }\n\n    const plotEl = this.el.querySelector<HTMLScriptElement>(\n      `[type^=\"${vegaMediaType}\"]`\n    )\n\n    if (plotEl) {\n      try {\n        const content = plotEl.textContent\n        const contentParsed = JSON.parse(content ?? '') as VisualizationSpec\n\n        return contentParsed\n      } catch (err) {\n        console.error('Could not parse plot data')\n      }\n    }\n\n    return undefined\n  }\n\n  /** Custom event emitter to indicate that the loading of the Vega JS script has finished */\n  @Event({\n    eventName: 'stencila-vega-load',\n  })\n  public vegaLoad: EventEmitter<VegaLoadEvent>\n\n  /** When detecting that the Vega JS has loaded, render the data if it hasnâ€™t been rendered already */\n  @Listen('stencila-vega-load', { target: 'window' })\n  public onVegaLoad(e: CustomEvent<VegaLoadEvent>): void {\n    if (\n      !this.plotIsRendered &&\n      e.detail.library === this.vegaDependency.library\n    ) {\n      this.renderPlot().catch((err: unknown) => {\n        console.log(err)\n      })\n    }\n  }\n\n  private renderPlot = (): Promise<Result | void> => {\n    const spec = this.getPlotContent()\n\n    this.plotContainer = this.plotContainer ?? createPlotContainer(this.el)\n    if (spec !== undefined) {\n      return embed(this.plotContainer, spec, {\n        actions: {\n          compiled: false,\n          editor: false,\n        },\n        ...this.options,\n      }).then((res) => {\n        this.plotIsRendered = true\n        return res\n      })\n    }\n\n    return Promise.resolve()\n  }\n\n  componentWillLoad(): Promise<unknown> | void {\n    // Make sure we have the correct Vega dependency loaded\n    this.detectVegaDependency(this.getPlotContent())\n\n    if (!this.plotIsRendered && isLoaded[this.vegaDependency.library]) {\n      return this.renderPlot()\n    } else {\n      injectScriptSrc({\n        src: getVegaLibSrc(this.vegaDependency),\n        onLoad: () => {\n          isLoaded[this.vegaDependency.library] = true\n          this.vegaLoad.emit({ library: this.vegaDependency.library })\n        },\n      })\n    }\n  }\n\n  componentShouldUpdate(\n    nexValue: unknown,\n    oldValue: unknown,\n    varName: string\n  ): boolean {\n    if (varName === 'plotIsRendered' && oldValue === nexValue) {\n      return false\n    }\n    return true\n  }\n\n  componentWillUpdate(): void {\n    this.renderPlot().catch((err: unknown) => {\n      console.log(err)\n    })\n  }\n\n  render(): HTMLStencilaImageVegaElement {\n    return <Host class={{ imgHidden: this.plotIsRendered }}></Host>\n  }\n}\n"]}