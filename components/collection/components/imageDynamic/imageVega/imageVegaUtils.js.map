{"version":3,"file":"imageVegaUtils.js","sourceRoot":"","sources":["../../../../src/components/imageDynamic/imageVega/imageVegaUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,IAAI,EAAe,MAAM,kBAAkB,CAAA;AAG1D,4EAA4E;AAC5E,MAAM,CAAC,MAAM,aAAa,GAAG,2BAA2B,CAAA;AAExD,uEAAuE;AACvE,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAAQ,GAAG,EAAE,EAAW,EAAE,CACxD,wCAAwC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAEzD,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,IAAa,EAC8C,EAAE;EAC7D,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;AAC3D,CAAC,CAAA;AAED;;;;GAIG;AACH,MAAM,gBAAgB,GAAG,gDAAgD,CAAA;AAazE,MAAM,gBAAgB,GAAG,CAAC,OAAe,EAAe,EAAE;EACxD,OAAO,OAAO,KAAK,MAAM,IAAI,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAA;AACzE,CAAC,CAAA;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAK,GAAG,EAAE,EAAkB,EAAE;;EAC3D,MAAM,CAAC,EAAE,GAAG,GAAG,MAAM,EAAE,OAAO,GAAG,QAAQ,CAAC,GACxC,MAAA,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,mCAAI,EAAE,CAAA;EAEpC,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;EAC5D,MAAM,OAAO,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAA;EAEjD,OAAO;IACL,OAAO;IACP,OAAO;GACR,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,EAAkB,EAAU,EAAE;EAC5E,OAAO,qBAAqB,OAAO,IAAI,OAAO,EAAE,CAAA;AAClD,CAAC,CAAA;AAcD,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAU,EAAoB,EAAE;EAC3D,OAAO,CACL,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC;IAC9B,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC;IAC/B,WAAW,CAAC,IAAI,CAAC;IACjB,IAAI,CAAC,IAAI,KAAK,IAAI,CACnB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { Node, isIn, MediaObject } from '@stencila/schema'\nimport { EmbedOptions, VisualizationSpec } from 'vega-embed'\n\n// Custom and generic Vega media type used by Stencila when encoding to HTML\nexport const vegaMediaType = 'application/vnd.vega+json'\n\n// Match against any version of either the Vega or VegaLite media types\nexport const isVegaMediaType = (mimeType = ''): boolean =>\n  /^application\\/vnd\\.(vega|vega-?lite)\\./.test(mimeType)\n\nexport const nodeHasSpec = (\n  node: unknown\n): node is Record<string, unknown> & { spec: string | null } => {\n  return Object.prototype.hasOwnProperty.call(node, 'spec')\n}\n\n/**\n * RegEx to parse a Vega Spec `$schema` url and find the library and version number used\n * Group 1: library used `vega` or `vega-lite | vegalite`\n * Group 2: version number used\n */\nconst VegaVersionRegEx = /(vega|vega-?lite)[/.]v([0-9]+(?:\\.[0-9]){0,2})/\n\nexport type VegaLibType = 'vega' | 'vega-lite'\n\nexport type VegaLoadEvent = {\n  library: VegaLibType\n}\n\nexport type VegaDependency = {\n  library: VegaLibType\n  version: string\n}\n\nconst vegaLibraryGuard = (library: string): VegaLibType => {\n  return library === 'vega' || library === 'vega-lite' ? library : 'vega'\n}\n\n/**\n * Given a string, attempts to find the Vega library (`vega` vs `vega-lite`)\n * and the version being used.\n * Falls back to `vega` and `latest`.\n */\nexport const getVegaVersion = (input = ''): VegaDependency => {\n  const [, lib = 'vega', version = 'latest'] =\n    VegaVersionRegEx.exec(input) ?? []\n\n  const libStandardized = lib.replace('vegalite', 'vega-lite')\n  const library = vegaLibraryGuard(libStandardized)\n\n  return {\n    library,\n    version,\n  }\n}\n\nexport const getVegaLibSrc = ({ library, version }: VegaDependency): string => {\n  return `https://unpkg.com/${library}@${version}`\n}\n\nexport interface VegaObject {\n  spec: VisualizationSpec | string\n  options?: Partial<EmbedOptions>\n}\n\nexport interface VegaNode\n  extends VegaObject,\n    MediaObject,\n    Record<string, unknown> {\n  mediaType: string\n}\n\nexport const isVegaObject = (node: Node): node is VegaNode => {\n  return (\n    isIn('MediaObjectTypes', node) &&\n    isVegaMediaType(node.mediaType) &&\n    nodeHasSpec(node) &&\n    node.spec !== null\n  )\n}\n"]}