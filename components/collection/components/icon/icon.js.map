{"version":3,"file":"icon.js","sourceRoot":"","sources":["../../../src/components/icon/icon.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAA;AACtE,OAAO,MAAM,MAAM,QAAQ,CAAA;AAE3B,OAAO,EAEL,kBAAkB,EAClB,oBAAoB,GACrB,MAAM,aAAa,CAAA;AAEpB,IAAI,eAAe,GAAG,KAAK,CAAA;AAE3B,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAC9B,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC;EACxE,MAAM;EACJ,CAAC,CAAC,MAAM;EACR,CAAC,CAAC,MAAM,CAAA;AAWZ,MAAM,OAAO,IAAI;EATjB;IAiBE;;OAEG;IAEa,cAAS,GAAoB,kBAAkB,EAAE,CAAA;IAQjE;;OAEG;IAEa,YAAO,GAAW,YAAY,CAC5C,+BAA+B,CAChC,CAAA;IAEO,eAAU,GAAG,KAAK,IAAI,EAAE;MAC9B,MAAM,QAAQ,GAAG,MAAM,MAAM,EAAE;SAC5B,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;SACjB,OAAO,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;SAC9C,GAAG,EAAE;SACL,IAAI,EAAE,CAAA;MAET,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;MACzC,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAA;MACxB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC,CAAA;GAiCF;EA/BC,iBAAiB;IACf,IAAI,CAAC,eAAe,EAAE;MACpB,eAAe,GAAG,IAAI,CAAA;MACtB,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QAC9B,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAA;MAC1C,CAAC,CAAC,CAAA;KACH;EACH,CAAC;EAEM,MAAM;IACX,MAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;MAC5C,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;MACtC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;QACjC,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,EAAE;QACpB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA;IAEb,OAAO,CACL,EAAC,IAAI,IAAC,IAAI,EAAE,IAAI,CAAC,IAAI,iBAAc,MAAM;MACvC,WACE,KAAK,EAAE;UACL,IAAI,EACF,IAAI,CAAC,KAAK,KAAK,SAAS;YACtB,CAAC,CAAC,eAAe,IAAI,CAAC,KAAK,GAAG;YAC9B,CAAC,CAAC,SAAS;SAChB;QAED,WAAK,IAAI,EAAE,QAAQ,GAAQ,CACvB,CACD,CACR,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, getAssetPath, h, Host, Prop } from '@stencil/core'\nimport wretch from 'wretch'\nimport { Colors } from '../../types'\nimport {\n  IconNames,\n  isSuffixedIconName,\n  isUnsuffixedIconName,\n} from './iconNames'\n\nlet isFetchingIcons = false\n\nconst getGlobalIconStyle = () =>\n  document.getElementsByTagName('html')[0].getAttribute('data-icon-style') ===\n  'fill'\n    ? 'fill'\n    : 'line'\n\n@Component({\n  tag: 'stencila-icon',\n  styleUrls: {\n    default: 'icon.css',\n    material: 'icon.material.css',\n  },\n  scoped: true,\n  assetsDirs: ['assets'],\n})\nexport class Icon {\n  /**\n   * Name of the icon to be rendered.\n   * Corresponds to icon names from the [Remix Icon set](http://remixicon.com)\n   */\n  @Prop()\n  public readonly icon: IconNames\n\n  /**\n   * Style with which to render the icon\n   */\n  @Prop()\n  public readonly iconStyle: 'fill' | 'line' = getGlobalIconStyle()\n\n  /**\n   * The fill color of the icon\n   */\n  @Prop()\n  public readonly color?: Colors | string\n\n  /**\n   * The URL of the SVG file containing icon symbols\n   */\n  @Prop()\n  public readonly iconUrl: string = getAssetPath(\n    `./assets/remixicon.symbol.svg`\n  )\n\n  private fetchIcons = async () => {\n    const response = await wretch()\n      .url(this.iconUrl)\n      .options({ credentials: 'omit', mode: 'cors' })\n      .get()\n      .text()\n\n    const div = document.createElement('div')\n    div.innerHTML = response\n    document.body.append(div)\n  }\n\n  componentWillLoad() {\n    if (!isFetchingIcons) {\n      isFetchingIcons = true\n      this.fetchIcons().catch((err) => {\n        console.log('Failed to load icons', err)\n      })\n    }\n  }\n\n  public render() {\n    const iconName = isSuffixedIconName(this.icon)\n      ? `#ri-${this.icon}-${this.iconStyle}`\n      : isUnsuffixedIconName(this.icon)\n      ? `#ri-${this.icon}`\n      : this.icon\n\n    return (\n      <Host icon={this.icon} aria-hidden=\"true\">\n        <svg\n          style={{\n            fill:\n              this.color !== undefined\n                ? `var(--color-${this.color})`\n                : undefined,\n          }}\n        >\n          <use href={iconName}></use>\n        </svg>\n      </Host>\n    )\n  }\n}\n"]}