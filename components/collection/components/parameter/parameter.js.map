{"version":3,"file":"parameter.js","sourceRoot":"","sources":["../../../src/components/parameter/parameter.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { getInputValue } from '../utils/input'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { isValidatorType, ValidatorTypes } from './types'\nimport { Validator } from './validators'\n\n/**\n * Stencila Parameter component\n *\n * @slot name - The name of the parameter\n * @slot value - The current value of the parameter\n */\n@Component({\n  tag: 'stencila-parameter',\n  styleUrls: {\n    default: 'parameter.css',\n    material: 'parameter.css',\n  },\n  scoped: true,\n})\nexport class Parameter {\n  @Element() el: HTMLStencilaParameterElement\n\n  private labelSlotRef: Element | undefined = undefined\n  private valueSlotRef: Element | undefined = undefined\n\n  /**\n   * The context of the component. In `read` mode the parameter validator and its\n   * properties cannot be edited.\n   */\n  @Prop({ reflect: true }) mode: 'read' | 'edit' = 'edit'\n\n  /**\n   * The Stencila `Validator` Schema with which to configure and validate the parameter.\n   */\n  @Prop({ mutable: true }) validator?: ValidatorTypes\n\n  @State() paramName = ''\n\n  /**\n   * Event emitted when either the name of value of the parameter changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `value` or `name`.\n   */\n  @Event({\n    eventName: 'stencila-parameter-change',\n  })\n  public parameterChange: EventEmitter\n\n  private onParamChange = (e: Event) => {\n    const target = e.currentTarget as HTMLInputElement | HTMLSelectElement\n    const isValid = this.validateValue(target)\n    if (isValid) {\n      this.parameterChange.emit({\n        property: 'value',\n        value: getInputValue(target),\n      })\n    }\n  }\n\n  private onParamNameChange = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.parameterChange.emit({\n      property: 'name',\n      value: target.textContent,\n    })\n  }\n\n  /**\n   * Event emitted when either the type or property of the parameter validator\n   * changes.\n   * You can use the `type` property of the event detail to determine the type\n   * of change, it will be either `validator` or `property`.\n   */\n  @Event({\n    eventName: 'stencila-validator-change',\n  })\n  public validatorChange: EventEmitter\n\n  onValidatorChange = (e: Event) => {\n    const target = e.target as HTMLInputElement | HTMLSelectElement\n    const value = getInputValue(target)\n\n    if (\n      target.name === 'validator' &&\n      typeof value === 'string' &&\n      target.value !== this.validator &&\n      isValidatorType(value)\n    ) {\n      this.validator = value\n\n      this.validatorChange.emit({\n        type: 'validator',\n        value,\n      })\n    } else {\n      this.validatorChange.emit({\n        type: 'property',\n        name: target.name,\n        value,\n      })\n    }\n  }\n\n  private validateValue = (target: HTMLInputElement | HTMLSelectElement) => {\n    return target.reportValidity()\n  }\n\n  private getValidatorFromMetaEl = (): ValidatorTypes | undefined => {\n    const validatorMetaEl = this.el.querySelector('meta[itemprop=\"validator\"]')\n    const validatorAttrParts =\n      validatorMetaEl?.getAttribute('itemtype')?.split('/') ?? []\n\n    const validatorAttr = validatorAttrParts[validatorAttrParts.length - 1]\n\n    return isValidatorType(validatorAttr) ? validatorAttr : undefined\n  }\n\n  componentWillLoad() {\n    if (this.validator === undefined) {\n      this.validator = this.getValidatorFromMetaEl()\n    }\n\n    this.labelSlotRef = getSlotByName(this.el)('name')[0]\n\n    const valueEl = getSlotByName(this.el)('value')\n    this.valueSlotRef = valueEl[0]\n    for (const input of valueEl) {\n      input.addEventListener('input', this.onParamChange)\n      input.addEventListener('focus', this.onParamChange)\n    }\n  }\n\n  disconnectedCallback() {\n    const valueEl = getSlotByName(this.el)('value')\n    for (const input of valueEl) {\n      input.removeEventListener('input', this.onParamChange)\n      input.removeEventListener('focus', this.onParamChange)\n    }\n  }\n\n  public render() {\n    const labelText = this.labelSlotRef?.textContent ?? 'parameter'\n\n    return (\n      <Host>\n        <span class=\"actions\">\n          {this.mode === 'edit' && (\n            <Validator\n              type={this.validator}\n              onValidatorChange={this.onValidatorChange}\n              valueElRef={this.valueSlotRef}\n            ></Validator>\n          )}\n\n          <span\n            class=\"name\"\n            contentEditable={this.mode === 'edit'}\n            onClick={(e) => {\n              if (this.mode === 'edit') {\n                e.preventDefault()\n              }\n            }}\n            onInput={this.onParamNameChange}\n            ref={(el) => (this.labelSlotRef = el)}\n          >\n            <slot name=\"name\" />\n          </span>\n        </span>\n\n        <form class=\"value\" title={labelText}>\n          <slot name=\"value\" />\n        </form>\n      </Host>\n    )\n  }\n}\n"]}