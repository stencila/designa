{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../src/components/button/button.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Host, Prop } from '@stencil/core'\nimport { Colors } from '../../types'\nimport { IconNames } from '../icon/iconNames'\n\n@Component({\n  tag: 'stencila-button',\n  styleUrls: {\n    default: 'button.css',\n    material: 'button.material.css',\n  },\n  scoped: true,\n})\nexport class Button {\n  /**\n   * If an `href` property is provided, button will be rendered using an `<a>` anchor tag.\n   */\n  @Prop() public href?: string\n\n  /**\n   * Relationship of the link\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#rel\n   * Only applied if `href` prop is also set.\n   */\n  @Prop() public rel?: string\n\n  /**\n   * Determines where to display the linked URL, options correspond to HTML Anchor `target` attribute.\n   * Only applies if the button is an anchor link.\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\n   */\n  @Prop() public target?: HTMLAnchorElement['target']\n\n  /**\n   * Screen-reader accessible label to read out.\n   */\n  @Prop() public ariaLabel: string\n\n  /**\n   * The color of the button\n   */\n  @Prop() public color: Colors = 'primary'\n\n  /**\n   * The overall size of the Button.\n   */\n  @Prop() public size: 'xsmall' | 'small' | 'default' | 'large' = 'default'\n\n  /**\n   * Renders the button without initial background color or border.\n   */\n  @Prop() public minimal = false\n\n  /**\n   * Renders the button using a secondory, and usually less visually prominent, Button CSS stylesheet.\n   */\n  @Prop() public isSecondary = false\n\n  /**\n   * The type of button to render, options correspond to HTML Button `type` attribute.\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\n   * Only applies if the button is not an anchor link.\n   */\n  @Prop() public buttonType: 'button' | 'submit' | 'reset'\n\n  /**\n   * If true, prevents the user from interacting with the button.\n   * Note: Not all browser prevent the click handler from firing on disabled buttons.\n   */\n  @Prop() public disabled = false\n\n  /**\n   * Name of the icon to render inside the button\n   * @see Icon component for possible values\n   */\n  @Prop() public icon?: HTMLElement | IconNames\n\n  /**\n   * If true, removes extra padding from Icon inside the button\n   * TODO: See if we can automatically infer removal of padding through CSS\n   */\n  @Prop() public iconOnly = false\n\n  /**\n   * If true, shows a loading spinner icon and sets a `disabled` attribute on the button.\n   * Note: Not all browser prevent the click handler from firing on disabled buttons.\n   */\n  @Prop() public isLoading = false\n\n  /**\n   * If true, the button will take up the full width of the parent container\n   */\n  @Prop() public fill = false\n\n  /**\n   * An optional help text to display for button focus and hover states.\n   */\n  @Prop() public tooltip?: string\n\n  /**\n   * An optional data attribute set on the button element for easier targeting using JavaScript.\n   */\n  @Prop() public dataEl?: string\n\n  private generateButton = (): HTMLButtonElement | HTMLAnchorElement => {\n    const TagType = this.href === undefined ? 'button' : 'a'\n    const elAttrs =\n      TagType === 'button'\n        ? { type: this.buttonType }\n        : { href: this.href, rel: this.rel, target: this.target }\n\n    const extraAttrs: Record<string, string> = {}\n    if (this.dataEl !== undefined) {\n      extraAttrs['data-el'] = this.dataEl\n    }\n\n    return (\n      <TagType\n        class={{\n          button: this.href !== undefined,\n          fill: this.fill,\n          iconOnly: this.iconOnly,\n          minimal: this.minimal,\n          secondary: this.isSecondary,\n          [this.size]: this.size !== undefined,\n          [`color-${this.color}`]: true,\n        }}\n        {...elAttrs}\n        {...extraAttrs}\n        disabled={this.isLoading || this.disabled || false}\n        aria-label={this.ariaLabel ?? this.tooltip}\n      >\n        {typeof this.icon === 'string' ? (\n          <stencila-icon\n            icon={this.isLoading ? 'loader-2' : this.icon}\n            class={{ spin: this.isLoading }}\n          ></stencila-icon>\n        ) : (\n          this.icon\n        )}\n        <slot name=\"icon\" />\n\n        <span class=\"label\">\n          <slot />\n        </span>\n      </TagType>\n    )\n  }\n\n  public render() {\n    return (\n      <Host size={this.size} icon={this.icon}>\n        {this.tooltip === undefined ? (\n          this.generateButton()\n        ) : (\n          <stencila-tooltip text={this.tooltip}>\n            {this.generateButton()}\n          </stencila-tooltip>\n        )}\n      </Host>\n    )\n  }\n}\n"]}