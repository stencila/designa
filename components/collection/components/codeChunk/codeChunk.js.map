{"version":3,"file":"codeChunk.js","sourceRoot":"","sources":["../../../src/components/codeChunk/codeChunk.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EditorView } from '@codemirror/view'\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { CodeChunk, codeChunk as makeCodeChunk } from '@stencila/schema'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport {\n  CodeComponent,\n  CodeExecuteCancelEvent,\n  CodeExecuteEvent,\n  CodeExecuteOrdering,\n  CodeVisibilityEvent,\n  DiscoverExecutableLanguagesEvent,\n  ExecuteRequired,\n  ExecuteStatus,\n} from '../code/codeTypes'\nimport { isPending } from '../code/codeUtils'\nimport { EditorUpdateHandlerCb } from '../editor/customizations/onUpdateHandlerExtension'\nimport { Keymap } from '../editor/editor'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\n\n/**\n * @slot text - The source code of the `CodeChunk`. Corresponds to the `text` field in the Stencila `CodeChunk` Schema.\n * @slot outputs - The resulting output when evaluating the CodeChunk. Corresponds to the `outputs` field in the Stencila `CodeChunk` Schema.\n * @slot errors - List of any errors encountered when compiling (e.g. syntax errors) or executing the CodeChunk.\n * @slot label - `label` element label of the `CodeChunk`. Corresponds to the `label` field in the Stencila `CodeChunk` Schema.\n * @slot caption - `figcaption` content of the `CodeChunk`. Corresponds to the `caption` field in the Stencila `CodeChunk` Schema.\n */\n@Component({\n  tag: 'stencila-code-chunk',\n  styleUrls: {\n    default: 'codeChunk.css',\n    material: 'codeChunk.material.css',\n  },\n  scoped: true,\n})\nexport class CodeChunkComponent implements CodeComponent<CodeChunk> {\n  private static readonly slots = {\n    text: 'text',\n    outputs: 'outputs',\n    errors: 'errors',\n    caption: 'caption',\n    label: 'label',\n  }\n\n  @Element() private el: HTMLStencilaCodeChunkElement\n\n  public editorRef: HTMLStencilaEditorElement | undefined\n\n  /**\n   * Source code contents of the CodeChunk.\n   * Corresponds to the `text` property of the CodeChunk schema.\n   */\n  @Prop()\n  public text?: string\n\n  /**\n   * Autofocus the editor on page load\n   */\n  @Prop() public autofocus = false\n\n  /**\n   * Programming language of the CodeChunk\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string | undefined\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop()\n  public executableLanguages?: FileFormatMap\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n    this.checkIfExecutable()\n  }\n\n  @State() isExecutable = false\n\n  /**\n   * Whether the code section is visible or not\n   */\n  @Prop({ mutable: true })\n  public isCodeVisible = false\n\n  /**\n   * A callback function to be called with the value of the `CodeChunk` node when executing the `CodeChunk`.\n   */\n  @Prop()\n  public executeHandler?: (codeChunk: CodeChunk) => Promise<CodeChunk>\n\n  @State()\n  shiftIsPressed = false\n\n  /**\n   * Emitted to indicate that code node should be executed\n   *\n   */\n  @Event({\n    eventName: 'stencila-code-execute',\n  })\n  public codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  /**\n   * Emitted to indicate that the execution of the code node should be cancelled/interrupted.\n   */\n  @Event({\n    eventName: 'stencila-code-execute-cancel',\n  })\n  public codeExecuteCancelEvent: EventEmitter<CodeExecuteCancelEvent['detail']>\n\n  /**\n   * Callback function to invoke whenever the editor contents are updated.\n   */\n  @Prop()\n  public contentChangeHandler?: EditorUpdateHandlerCb\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus: ExecuteStatus\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies at\n   * compile time.\n   */\n  @Prop()\n  compileDigest: string\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies from\n   * the latest execution.\n   */\n  @Prop()\n  executeDigest: string\n\n  /**\n   * Time when the latest code execution ended\n   */\n  @Prop()\n  executeEnded: string\n\n  /**\n   * Duration of the latest code execition\n   */\n  @Prop()\n  executeDuration: string\n\n  /**\n   * Custom keyboard shortcuts to pass along to CodeMirror\n   * @see https://codemirror.net/6/docs/ref/#keymap\n   */\n  @Prop() public keymap: Keymap[] = []\n\n  @State() isStacked = true\n\n  /**\n   * A global event emitter to show/hide code in all `CodeChunk` or `CodeExpression` components\n   */\n  @Event({\n    eventName: 'stencila-code-visibility-change',\n  })\n  allCodeVisibilityChange: EventEmitter\n\n  /**\n   * A global event listener to show/hide code in this component\n   */\n  @Listen('stencila-code-visibility-change', { target: 'window' })\n  onAllCodeVisibilityChange(event: CodeVisibilityEvent): void {\n    this.isCodeVisible = event.detail.isVisible\n  }\n\n  /**\n   * Toggle code visibility, either locally, or globally\n   */\n  private toggleCodeVisibility = (e: MouseEvent): void => {\n    e.preventDefault()\n    if (e.shiftKey) {\n      this.allCodeVisibilityChange.emit({ isVisible: !this.isCodeVisible })\n    } else {\n      this.isCodeVisible = !this.isCodeVisible\n    }\n  }\n\n  /**\n   * Determine if the CodeChunk can be executed or not.\n   * For a CodeChunk to be considered executable it must have a `executeHandler` function attached\n   * and the current `programmingLanguage` must be in the list of `executableLanguages`.\n   */\n  private checkIfExecutable = (): void => {\n    if (\n      this.programmingLanguage === undefined ||\n      Object.keys(this.executableLanguages ?? {}).length <= 0\n    ) {\n      this.isExecutable = false\n      return\n    }\n\n    const activeLanguageFormat = lookupFormat(this.programmingLanguage).name\n    this.isExecutable = Object.values(this.executableLanguages ?? {}).some(\n      (format) => format.name === activeLanguageFormat\n    )\n  }\n\n  /**\n   * Listen for the `stencila-language-change` event emitted by the language dropdown\n   * provided by the child Editor component, and update the active language if necessary.\n   */\n  private handleLanguageChange = (e: CustomEvent<FileFormat>) => {\n    if (\n      this.programmingLanguage === undefined ||\n      lookupFormat(this.programmingLanguage).name !== e.detail.name\n    ) {\n      this.programmingLanguage = e.detail.name\n    }\n  }\n\n  private editorLayoutChangeHandler = (isStacked: boolean) => {\n    this.isStacked = isStacked\n  }\n\n  /**\n   * Trigger a global DOM event to set the layout of all `CodeChunk` component.\n   * Can be set to either show the editor and outputs side by side or stacked vertically.\n   */\n  @Event({\n    eventName: 'stencila-editor-layout-change',\n  })\n  public editorLayoutChange: EventEmitter\n\n  @Listen('stencila-editor-layout-change', { target: 'window' })\n  onSetEditorLayout(event: { detail: { isStacked: boolean } }): void {\n    this.editorLayoutChangeHandler(event.detail.isStacked)\n  }\n\n  private toggleEditorLayout = (e: MouseEvent) => {\n    e.preventDefault()\n    if (e.shiftKey) {\n      this.editorLayoutChange.emit({ isStacked: !this.isStacked })\n    } else {\n      this.editorLayoutChangeHandler(!this.isStacked)\n    }\n  }\n\n  /**\n   * Returns the `CodeChunk` node with the updated `text` content from the editor.\n   */\n  @Method()\n  public async getContents(): Promise<CodeChunk> {\n    if (this.editorRef) {\n      const { text, language } = await this.editorRef?.getContents()\n      return makeCodeChunk({ text, programmingLanguage: language })\n    }\n\n    throw new Error('Could not get CodeChunk contents')\n  }\n\n  /**\n   * Returns the text contents from the editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    if (this.editorRef) {\n      const { text } = await this.editorRef?.getContents()\n      return text\n    }\n\n    throw new Error('Could not get CodeChunk contents')\n  }\n\n  private onExecuteHandler = async (\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeChunk> => {\n    const node = await this.getContents()\n\n    // If node is running, emit cancel event and terminate early\n    if (isPending(this.executeStatus)) {\n      this.codeExecuteCancelEvent.emit({\n        nodeId: this.el.id,\n        scope: 'All',\n      })\n      return node\n    }\n\n    this.codeExecuteEvent.emit({\n      nodeId: this.el.id,\n      ordering,\n    })\n\n    if (this.isExecutable && this.executeHandler) {\n      const computed = await this.executeHandler(node)\n      return computed\n    }\n\n    return node\n  }\n\n  /**\n   * Run the `CodeChunk`\n   */\n  @Method()\n  public async execute(\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeChunk | Error> {\n    try {\n      const res = await this.onExecuteHandler(ordering)\n      // Add artificial delay to allow user to register the spinner\n      return res\n    } catch (err) {\n      console.error(err)\n      return new Error('Could not execute CodeChunk')\n    }\n  }\n\n  /**\n   * Retrieve a reference to the internal CodeMirror editor.\n   * Allows for maintaining state from applications making use of this component.\n   */\n  @Method()\n  public async getRef(): Promise<EditorView | undefined> {\n    return this.editorRef?.getRef()\n  }\n\n  private onKeyPress = (e: KeyboardEvent): void => {\n    this.shiftIsPressed = e.shiftKey\n  }\n\n  private addKeyListeners = () => {\n    window.addEventListener('keydown', this.onKeyPress)\n    window.addEventListener('keyup', this.onKeyPress)\n  }\n\n  private removeKeyListeners = () => {\n    window.removeEventListener('keydown', this.onKeyPress)\n    window.removeEventListener('keyup', this.onKeyPress)\n    this.shiftIsPressed = false\n  }\n\n  componentWillLoad(): void {\n    /** Get rendered width of component to decide whether to stack the editor and outputs or not.\n     * We can’t use media queries as the component is not always full width of the viewport, and depends on the parent element width.\n     */\n    const minWidth = 1200 // A non-scientific value below which the side-by-side layout looks too narrow.\n    this.isStacked = this.el.getBoundingClientRect().width < minWidth\n\n    this.checkIfExecutable()\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host\n        class={{\n          isCodeVisible: this.isCodeVisible,\n          isStacked: this.isStacked,\n        }}\n      >\n        <figure>\n          <stencila-action-menu>\n            <stencila-menu menuPosition=\"bottom-start\" slot=\"persistentActions\">\n              <CodeExecuteStatus\n                executeStatus={this.executeStatus}\n                executeRequired={this.executeRequired}\n                slot=\"toggle\"\n              ></CodeExecuteStatus>\n              <slot name=\"code-dependencies\"></slot>\n              <slot name=\"code-dependents\"></slot>\n            </stencila-menu>\n            {this.isExecutable && (\n              <stencila-button\n                icon={isPending(this.executeStatus) ? 'stop' : 'play'}\n                minimal={true}\n                color=\"key\"\n                class=\"run\"\n                size=\"xsmall\"\n                tooltip={\n                  isPending(this.executeStatus)\n                    ? 'Cancel'\n                    : this.shiftIsPressed\n                    ? 'Run only this code'\n                    : 'Run'\n                }\n                iconOnly={true}\n                slot=\"persistentActions\"\n                onClick={(e) =>\n                  this.execute(e.shiftKey ? 'Single' : 'Topological')\n                }\n                onMouseEnter={this.addKeyListeners}\n                onMouseLeave={this.removeKeyListeners}\n              ></stencila-button>\n            )}\n            <stencila-button\n              minimal={true}\n              color=\"key\"\n              class=\"sourceToggle\"\n              onClick={this.toggleCodeVisibility}\n              icon={this.isCodeVisible ? 'eye-off' : 'eye'}\n              iconOnly={true}\n              size=\"xsmall\"\n              slot=\"persistentActions\"\n              tooltip={`${\n                this.isCodeVisible ? 'Hide' : 'Show'\n              } Code\\nShift click to set for all code`}\n            ></stencila-button>\n            )\n            {this.isCodeVisible && (\n              <stencila-button\n                minimal={true}\n                color=\"key\"\n                class=\"layoutToggle\"\n                onClick={this.toggleEditorLayout}\n                icon={this.isStacked ? 'layout-column' : 'layout-row'}\n                iconOnly={true}\n                size=\"xsmall\"\n                slot=\"persistentActions\"\n                tooltip={`${\n                  this.isStacked ? 'Side by side' : 'Stacked'\n                } view\\nShift click to set for all code`}\n              ></stencila-button>\n            )}\n          </stencila-action-menu>\n\n          <div>\n            <div\n              class={{\n                editorContainer: true,\n                hidden: !this.isCodeVisible,\n              }}\n            >\n              <stencila-editor\n                activeLanguage={this.programmingLanguage}\n                executableLanguages={this.executableLanguages}\n                autofocus={this.autofocus}\n                executeHandler={() => this.onExecuteHandler()}\n                keymap={this.keymap}\n                readOnly={!this.isExecutable}\n                onStencila-language-change={this.handleLanguageChange}\n                ref={(el) => {\n                  this.editorRef = el\n                }}\n              >\n                <slot name={CodeChunkComponent.slots.text} />\n                <slot name={CodeChunkComponent.slots.errors} />\n              </stencila-editor>\n            </div>\n\n            <slot name={CodeChunkComponent.slots.outputs} />\n          </div>\n\n          <slot name={CodeChunkComponent.slots.label} />\n\n          <slot name={CodeChunkComponent.slots.caption} />\n        </figure>\n      </Host>\n    )\n  }\n}\n"]}