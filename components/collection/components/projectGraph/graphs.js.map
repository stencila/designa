{"version":3,"file":"graphs.js","sourceRoot":"","sources":["../../../src/components/projectGraph/graphs.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAA;AAOxC,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAY,EAAe,EAAE,CAC5D,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAkB,EAAE,IAAI,EAAE,EAAE;EAC9C,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;EACvC,MAAM,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAA;EAE5D,OAAO;IACL,GAAG,KAAK;IACR,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;GACvE,CAAA;AACH,CAAC,EAAE,EAAE,CAAC,CAAA;AASR,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAAY,EAAgB,EAAE;EAChE,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;EAE9B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,CAAmB,CAAA;EAC5E,MAAM,eAAe,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CACxC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAChD,CAAA;EAED,MAAM,YAAY,GAAiB;IACjC,KAAK,EAAE,KAAK,CAAC,KAAK;IAClB,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;IAC9B,UAAU,EAAE,EAAE;IACd,MAAM,EAAE,KAAK;GACd,CAAA;EAED,MAAM,eAAe,GAAG,CAAC,IAAY,EAAsB,EAAE,WAC3D,OAAA,MAAA,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,0CAAE,KAAK,CAAA,EAAA,CAAA;EAEjD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;IACxB,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAE5C,IAAI,SAAS,KAAK,SAAS;MAAE,MAAK;IAElC,KAAK,MAAM,IAAI,IAAI,eAAe,EAAE;MAClC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;QAC5C,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC;UAC3B,MAAM,EAAE,IAAI,CAAC,KAAK;UAClB,MAAM,EAAE,IAAI,CAAC,KAAK;UAClB,KAAK,EAAE,IAAI,CAAC,IAAI;UAChB,QAAQ,EAAE;YACR,IAAI,EAAE,EAAE;WACT;SACF,CAAC,CAAA;OACH;KACF;GACF;EAED,OAAO,YAAY,CAAA;AACrB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,MAA2B,EAC3B,MAA2B,EAClB,EAAE;EACX,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;IACtC,OAAO,CACL,CAAC,MAAM,CAAC,IAAI,KAAK,EAAE,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAC1E,CAAA;GACF;EAED,OAAO,KAAK,CAAA;AACd,CAAC,CAAA","sourcesContent":["import { SimulationLinkDatum, SimulationNodeDatum } from 'd3-force'\nimport { FileResource, Graph, GraphNode, Relation } from './types'\nimport { hasPath } from './utils/guards'\n\nexport type GraphLink = SimulationLinkDatum<SimulationNodeDatum & GraphNode> & {\n  relation: Relation\n  group: string\n}\n\nexport const graphEdgeToLinks = (graph: Graph): GraphLink[] =>\n  graph.edges.reduce((links: GraphLink[], edge) => {\n    const targetNode = graph.nodes[edge.to]\n    const group = hasPath(targetNode) ? targetNode.path : 'leaf'\n\n    return [\n      ...links,\n      { source: edge.from, target: edge.to, group, relation: edge.relation },\n    ]\n  }, [])\n\ntype GroupedGraph = {\n  nodes: GraphNode[]\n  links: GraphLink[]\n  groupLinks: GraphLink[]\n  groups: (FileResource & SimulationNodeDatum)[]\n}\n\nexport const graphToGroupedGraph = (graph: Graph): GroupedGraph => {\n  const nodes = [...graph.nodes]\n\n  const files = nodes.filter((node) => node.type === 'File') as FileResource[]\n  const fileLinkedNodes = graph.nodes.filter(\n    (node) => hasPath(node) && node.type !== 'File'\n  )\n\n  const groupedGraph: GroupedGraph = {\n    nodes: graph.nodes,\n    links: graphEdgeToLinks(graph),\n    groupLinks: [],\n    groups: files,\n  }\n\n  const fileIndexByPath = (path: string): number | undefined =>\n    files.find((file) => file.path === path)?.index\n\n  for (const file of files) {\n    const fileIndex = fileIndexByPath(file.path)\n\n    if (fileIndex === undefined) break\n\n    for (const node of fileLinkedNodes) {\n      if (hasPath(node) && node.path === file.path) {\n        groupedGraph.groupLinks.push({\n          source: node.index,\n          target: file.index,\n          group: node.path,\n          relation: {\n            type: '',\n          },\n        })\n      }\n    }\n  }\n\n  return groupedGraph\n}\n\nexport const isInterGroupLink = (\n  source: GraphLink['source'],\n  target: GraphLink['target']\n): boolean => {\n  if (hasPath(source) && hasPath(target)) {\n    return (\n      (target.path !== '' || target.path !== '') && target.path === source.path\n    )\n  }\n\n  return false\n}\n"]}