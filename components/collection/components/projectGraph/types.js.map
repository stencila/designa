{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/projectGraph/types.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\n * A resource in a dependency graph (the nodes of the graph)\n */\n\nimport { SimulationNodeDatum } from 'd3-force'\n\ntype ResourceBase = {\n  index: number\n}\n\nexport type SymbolResource = ResourceBase & {\n  type: 'Symbol'\n  /**\n   * The path of the file that the symbol is defined in\n   */\n  path: string\n  /**\n   * The name/identifier of the symbol\n   */\n  name: string\n  /**\n   * The type of the object that the symbol refers to (e.g `Number`, `Function`)\n   *\n   * Should be used as a hint only, and as such is excluded from equality and hash functions.\n   */\n  kind: string\n}\n\nexport type NodeResource = ResourceBase & {\n  type: 'Node'\n  /**\n   * The path of the file that the node is defined in\n   */\n  path: string\n  /**\n   * The id of the node with the document\n   */\n  id: string\n  /**\n   * The type of node e.g. `Parameter`, `CodeChunk`\n   */\n  kind: string\n}\n\nexport type FileResource = ResourceBase & {\n  type: 'File'\n  /**\n   * The path of the file\n   */\n  path: string\n}\n\nexport type Resource = ResourceBase &\n  (\n    | SymbolResource\n    | NodeResource\n    | FileResource\n    | {\n        type: 'Source'\n        /**\n         * The name of the project source\n         */\n        name: string\n      }\n    | {\n        type: 'Module'\n        /**\n         * The programming language of the module\n         */\n        language: string\n        /**\n         * The name of the module\n         */\n        name: string\n      }\n    | {\n        type: 'Url'\n        /**\n         * The URL of the external resource\n         */\n        url: string\n      }\n  )\n\n/**\n * The relation between two resources in a dependency graph (the edges of the graph)\n *\n * Some relations carry additional information such whether the relation is active (`Import` and `Convert`) or the range that they occur in code (`Assign`, `Use`, `Read`) etc\n */\nexport type Relation =\n  | {\n      type: 'Assign'\n      /**\n       * The range within code that the assignment is done\n       */\n      range: [number, number, number, number]\n    }\n  | {\n      type: 'Convert'\n      /**\n       * Whether or not the conversion is automatically updated\n       */\n      auto: boolean\n    }\n  | {\n      type: 'Embed'\n      [k: string]: unknown\n    }\n  | {\n      type: 'Import'\n      /**\n       * Whether or not the import is automatically updated\n       */\n      auto: boolean\n    }\n  | {\n      type: 'Include'\n      [k: string]: unknown\n    }\n  | {\n      type: 'Link'\n      [k: string]: unknown\n    }\n  | {\n      type: 'Read'\n      /**\n       * The range within code that the read is declared\n       */\n      range: [number, number, number, number]\n    }\n  | {\n      type: 'Use'\n      /**\n       * The range within code that the use is declared\n       */\n      range: [number, number, number, number]\n    }\n  | {\n      type: 'Write'\n      /**\n       * The range within code that the write is declared\n       */\n      range: [number, number, number, number]\n    }\n  | {\n      type: ''\n    }\n\n/**\n * A subject-relation-object triple\n */\nexport type Triple = [Resource, Relation, Resource]\n\nexport type GraphNode<R extends Resource = Resource> = R & { index: number }\n\nexport type SimulationGraphNode = GraphNode & SimulationNodeDatum\n\nexport type GraphEdge = {\n  from: number\n  index: number\n  to: number\n  relation: Relation\n  group: string\n}\n\n/**\n * A project dependency graph\n */\nexport interface Graph {\n  /**\n   * The resources in the graph\n   */\n  nodes: GraphNode[]\n  /**\n   * The relations between resources in the graph\n   */\n  edges: GraphEdge[]\n}\n"]}