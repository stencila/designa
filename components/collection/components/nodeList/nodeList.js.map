{"version":3,"file":"nodeList.js","sourceRoot":"","sources":["../../../src/components/nodeList/nodeList.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAA;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AAEtD;;GAEG;AASH,MAAM,OAAO,WAAW;EARxB;IAWU,uBAAkB,GAAG,mBAAmB,CAAA;IAEvC,YAAO,GAAG,IAAI,CAAA;IAEvB,iBAAY,GAAG,GAAG,EAAE;MAClB,MAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAA;MAE9D,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;OACpB;WAAM;QACL,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE;;UAClC,MAAM,OAAO,GAAG,MAAA,EAAE,CAAC,SAAS,0CAAE,IAAI,EAAE,CAAA;UACpC,OAAO,OAAO,KAAK,EAAE,IAAI,OAAO,KAAK,IAAI,CAAC,kBAAkB,CAAA;QAC9D,CAAC,CAAC,CAAA;OACH;IACH,CAAC,CAAA;IAEO,kBAAa,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;GA0BhE;EAxBC,iBAAiB;IACf,IAAI,CAAC,YAAY,EAAE,CAAA;IAEnB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;MAClC,SAAS,EAAE,IAAI;MACf,OAAO,EAAE,IAAI;KACd,CAAC,CAAA;EACJ,CAAC;EAED,oBAAoB;;IAClB,MAAA,IAAI,CAAC,aAAa,0CAAE,UAAU,EAAE,CAAA;EAClC,CAAC;EAEM,MAAM;IACX,OAAO,CACL,EAAC,IAAI;MACH,eAAQ;MAER,UAAI,KAAK,EAAE,EAAE,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,EAAE,IAAI,EAAE,IAC5D,IAAI,CAAC,kBAAkB,CACrB,CACA,CACR,CAAA;EACH,CAAC;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Host, State } from '@stencil/core'\nimport { getSlotByName } from '../utils/slotSelectors'\n\n/**\n * @slot default - A list or collection of elements to render. If empty, a message stating \"No output to show\" will be rendered instead.\n */\n@Component({\n  tag: 'stencila-node-list',\n  styleUrls: {\n    default: 'nodeList.css',\n    material: 'nodeList.css',\n  },\n  scoped: true,\n})\nexport class OutputsList {\n  @Element() el: HTMLStencilaNodeListElement\n\n  private emptyOutputMessage = 'No output to show'\n\n  @State() isEmpty = true\n\n  checkIfEmpty = () => {\n    const slotted = getSlotByName(this.el)(['default', 'outputs'])\n\n    if (slotted.length === 0) {\n      this.isEmpty = true\n    } else {\n      this.isEmpty = slotted.every((el) => {\n        const content = el.innerHTML?.trim()\n        return content === '' || content === this.emptyOutputMessage\n      })\n    }\n  }\n\n  private childObserver = new MutationObserver(this.checkIfEmpty)\n\n  componentWillLoad() {\n    this.checkIfEmpty()\n\n    this.childObserver.observe(this.el, {\n      childList: true,\n      subtree: true,\n    })\n  }\n\n  disconnectedCallback(): void {\n    this.childObserver?.disconnect()\n  }\n\n  public render() {\n    return (\n      <Host>\n        <slot />\n\n        <em class={{ hidden: !this.isEmpty, emptyContentMessage: true }}>\n          {this.emptyOutputMessage}\n        </em>\n      </Host>\n    )\n  }\n}\n"]}