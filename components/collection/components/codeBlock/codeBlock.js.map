{"version":3,"file":"codeBlock.js","sourceRoot":"","sources":["../../../src/components/codeBlock/codeBlock.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EditorView } from '@codemirror/view'\nimport { Component, h, Host, Listen, Method, Prop } from '@stencil/core'\nimport { CodeBlock, codeBlock } from '@stencila/schema'\nimport {\n  CodeComponent,\n  DiscoverExecutableLanguagesEvent,\n} from '../code/codeTypes'\nimport { EditorUpdateHandlerCb } from '../editor/customizations/onUpdateHandlerExtension'\nimport { Keymap } from '../editor/editor'\nimport {\n  FileFormat,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\n\n/**\n * @slot text - The source code of the `CodeChunk`. Corresponds to the `text` field in the Stencila `CodeChunk` Schema.\n * @slot label - `label` element label of the `CodeChunk`. Corresponds to the `label` field in the Stencila `CodeChunk` Schema.\n * @slot caption - `figcaption` content of the `CodeChunk`. Corresponds to the `caption` field in the Stencila `CodeChunk` Schema.\n */\n@Component({\n  tag: 'stencila-code-block',\n  styleUrls: {\n    default: 'codeBlock.css',\n    material: 'codeBlock.material.css',\n  },\n  scoped: true,\n})\nexport class CodeBlockComponent implements CodeComponent<CodeBlock> {\n  private static readonly slots = {\n    text: 'text',\n    outputs: 'outputs',\n    errors: 'errors',\n    caption: 'caption',\n    label: 'label',\n  }\n\n  public editorRef: HTMLStencilaEditorElement | undefined\n\n  /**\n   * Source code contents of the CodeChunk.\n   * Corresponds to the `text` property of the CodeBlock schema.\n   */\n  @Prop()\n  public text?: string\n\n  /**\n   * Autofocus the editor on page load\n   */\n  @Prop() public autofocus = false\n\n  /**\n   * Control line wrapping of text inside the editor\n   */\n  @Prop()\n  public lineWrapping = false\n\n  /**\n   * Determines the visibility of line numbers\n   */\n  @Prop()\n  public lineNumbers = true\n\n  /**\n   * Enables ability to fold sections of code if the syntax package supports it\n   */\n  @Prop()\n  public foldGutter = true\n\n  /**\n   * Programming language of the CodeChunk\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string | undefined\n\n  /**\n   * Disallow editing of the editor contents when set to `true`\n   */\n  @Prop()\n  public readOnly = false\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop()\n  public executableLanguages?: FileFormatMap\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n  }\n\n  /**\n   * Custom keyboard shortcuts to pass along to CodeMirror\n   * @see https://codemirror.net/6/docs/ref/#keymap\n   */\n  @Prop() public keymap: Keymap[] = []\n\n  /**\n   * Callback function to invoke whenever the editor contents are updated.\n   */\n  @Prop()\n  public contentChangeHandler?: EditorUpdateHandlerCb\n\n  /**\n   * Listen for the `stencila-language-change` event emitted by the language dropdown\n   * provided by the child Editor component, and update the active language if necessary.\n   */\n  private handleLanguageChange = (e: CustomEvent<FileFormat>) => {\n    if (\n      this.programmingLanguage === undefined ||\n      lookupFormat(this.programmingLanguage).name !== e.detail.name\n    ) {\n      this.programmingLanguage = e.detail.name\n    }\n  }\n\n  /**\n   * Returns the `CodeChunk` node with the updated `text` content from the editor.\n   */\n  @Method()\n  public async getContents(): Promise<CodeBlock> {\n    if (this.editorRef) {\n      const { text, language } = await this.editorRef?.getContents()\n      return codeBlock({ text, programmingLanguage: language })\n    }\n\n    throw new Error('Could not get CodeChunk contents')\n  }\n\n  /**\n   * Returns the text contents from the editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    if (this.editorRef) {\n      const { text } = await this.editorRef?.getContents()\n      return text\n    }\n\n    throw new Error('Could not get CodeBlock contents')\n  }\n\n  /**\n   * Retrieve a reference to the internal CodeMirror editor.\n   * Allows for maintaining state from applications making use of this component.\n   */\n  @Method()\n  public async getRef(): Promise<EditorView | undefined> {\n    return this.editorRef?.getRef()\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host>\n        <figure>\n          <div>\n            <div\n              class={{\n                editorContainer: true,\n              }}\n            >\n              <stencila-editor\n                activeLanguage={this.programmingLanguage}\n                executableLanguages={this.executableLanguages}\n                autofocus={this.autofocus}\n                keymap={this.keymap}\n                readOnly={this.readOnly}\n                onStencila-language-change={this.handleLanguageChange}\n                foldGutter={this.foldGutter}\n                lineNumbers={this.lineNumbers}\n                lineWrapping={this.lineWrapping}\n                ref={(el) => {\n                  this.editorRef = el\n                }}\n              >\n                <slot name={CodeBlockComponent.slots.text} />\n                <slot name={CodeBlockComponent.slots.errors} />\n              </stencila-editor>\n            </div>\n          </div>\n\n          <slot name={CodeBlockComponent.slots.label} />\n\n          <slot name={CodeBlockComponent.slots.caption} />\n        </figure>\n      </Host>\n    )\n  }\n}\n"]}