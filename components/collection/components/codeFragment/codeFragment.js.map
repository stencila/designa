{"version":3,"file":"codeFragment.js","sourceRoot":"","sources":["../../../src/components/codeFragment/codeFragment.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,KAAK,EAEL,CAAC,EACD,IAAI,EACJ,MAAM,EACN,MAAM,EACN,IAAI,GACL,MAAM,eAAe,CAAA;AAMtB,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAA;AACvE,OAAO,EAEL,aAAa,EAEb,YAAY,GACb,MAAM,yBAAyB,CAAA;AAEhC;;GAEG;AASH,MAAM,OAAO,qBAAqB;EARlC;;IAWE;;;OAGG;IAEH,SAAI,GAAoB,MAAM,CAAA;IAQ9B;;OAEG;IAEI,yBAAoB,GAAkB,aAAa,CAAA;IAE1D;;OAEG;IAEI,wBAAmB,GACxB,MAAA,MAAA,MAAM,CAAC,iBAAiB,0CAAE,mBAAmB,mCAAI,EAAE,CAAA;IAerD;;OAEG;IACK,qBAAgB,GAAG,CAAC,QAAgB,EAAQ,EAAE;MACpD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAA;MAChD,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAA;IACrC,CAAC,CAAA;IAQO,yBAAoB,GAAG,CAAC,CAAQ,EAAE,EAAE;;MAC1C,MAAM,MAAM,GAAG,CAAC,CAAC,aAAgC,CAAA;MACjD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAA,MAAM,CAAC,WAAW,mCAAI,EAAE,CAAC,CAAA;IACnD,CAAC,CAAA;IAEO,mBAAc,GAAG,GAAuB,EAAE,CAChD,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;GAmCjC;EAnEC,6BAA6B,CAAC,EAC5B,MAAM,GAC2B;IACjC,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAA;EAC7C,CAAC;EA8BD;;KAEG;EAEI,KAAK,CAAC,eAAe;;IAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAA;IAClC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,mCAAI,EAAE,CAAC,CAAA;EACjD,CAAC;EAEM,MAAM;;IACX,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAC,MAAM;MAChB,YAAM,KAAK,EAAC,kBAAkB;QAC5B,EAAC,oBAAoB,IACnB,cAAc,EAAE,MAAA,IAAI,CAAC,mBAAmB,mCAAI,EAAE,EAC9C,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,EAC7C,aAAa,EAAE,IAAI,CAAC,gBAAgB,EACpC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,QAAQ,EAAE,IAAI,CAAC,IAAI,KAAK,MAAM,GACR,CACnB;MAEP,YACE,KAAK,EAAC,MAAM,EACZ,eAAe,EAAE,IAAI,CAAC,IAAI,KAAK,MAAM,EACrC,OAAO,EAAE,IAAI,CAAC,oBAAoB,EAClC,IAAI,EAAC,SAAS;QAEd,YAAM,IAAI,EAAC,MAAM,GAAG,CACf,CACF,CACR,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core'\nimport { CodeFragment } from '@stencila/schema'\nimport {\n  CodeComponent,\n  DiscoverExecutableLanguagesEvent,\n} from '../code/codeTypes'\nimport { LanguagePickerInline } from '../codeExpression/languageSelect'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\n\n/**\n * @slot text - The contents of the code fragment\n */\n@Component({\n  tag: 'stencila-code-fragment',\n  styleUrls: {\n    default: 'codeFragment.css',\n    material: 'codeFragment.css',\n  },\n  scoped: true,\n})\nexport class CodeFragmentComponent implements CodeComponent<CodeFragment> {\n  @Element() private el: HTMLStencilaCodeExpressionElement\n\n  /**\n   * The context of the component. In `read` mode the code content and its\n   * language cannot be edited.\n   */\n  @Prop({ reflect: true })\n  mode: 'read' | 'edit' = 'read'\n\n  /**\n   * Programming language of the CodeFragment\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string | undefined\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop({ mutable: true })\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n  }\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Function to call when the user selects a new language from the language picker dropdown.\n   */\n  private onSelectLanguage = (language: string): void => {\n    this.languageChange.emit(lookupFormat(language))\n    this.programmingLanguage = language\n  }\n\n  /**\n   * Event emitted when the source code of the `CodeExpression` node is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<string>\n\n  private contentChangeHandler = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.contentChange.emit(target.textContent ?? '')\n  }\n\n  private selectTextSlot = (): HTMLElement | null =>\n    this.el.querySelector(`.text`)\n\n  /**\n   * Returns the text contents from the inline code editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    const slot = this.selectTextSlot()\n    return Promise.resolve(slot?.textContent ?? '')\n  }\n\n  public render() {\n    return (\n      <Host class=\"text\">\n        <span class=\"actionsSecondary\">\n          <LanguagePickerInline\n            activeLanguage={this.programmingLanguage ?? ''}\n            executableLanguages={this.executableLanguages}\n            onSetLanguage={this.onSelectLanguage}\n            languageCapabilities={this.languageCapabilities}\n            disabled={this.mode === 'read'}\n          ></LanguagePickerInline>\n        </span>\n\n        <span\n          class=\"text\"\n          contentEditable={this.mode === 'edit'}\n          onInput={this.contentChangeHandler}\n          role=\"textbox\"\n        >\n          <slot name=\"text\" />\n        </span>\n      </Host>\n    )\n  }\n}\n"]}