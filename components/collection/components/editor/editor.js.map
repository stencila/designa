{"version":3,"file":"editor.js","sourceRoot":"","sources":["../../../src/components/editor/editor.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,EACd,eAAe,EACf,eAAe,GAChB,MAAM,0BAA0B,CAAA;AACjC,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAA;AAC9E,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AACnD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAA;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAA;AAChD,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AAC1E,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAC3D,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AACzD,OAAO,EACL,WAAW,EACX,WAAW,EAEX,IAAI,GAEL,MAAM,mBAAmB,CAAA;AAC1B,OAAO,EAEL,aAAa,EACb,UAAU,EACV,qBAAqB,EAErB,MAAM,GAEP,MAAM,kBAAkB,CAAA;AACzB,OAAO,EACL,SAAS,EACT,OAAO,EACP,KAAK,EAEL,CAAC,EACD,IAAI,EACJ,MAAM,EACN,MAAM,EACN,IAAI,EACJ,KAAK,GACN,MAAM,eAAe,CAAA;AAEtB,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAA;AAC5D,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAA;AACtE,OAAO,EAEL,uBAAuB,GACxB,MAAM,2CAA2C,CAAA;AAClD,OAAO,EAGL,aAAa,EACb,YAAY,GACb,MAAM,iBAAiB,CAAA;AAWxB,MAAM,KAAK,GAAG;EACZ,IAAI,EAAE,MAAM;EACZ,MAAM,EAAE,QAAQ;CACjB,CAAA;AAED,MAAM,UAAU,GAAG;EACjB,SAAS,EAAE,iBAAiB;EAC5B,MAAM,EAAE,QAAQ;CACjB,CAAA;AAED,MAAM,MAAM,GAAG;EACb,YAAY,EAAE,cAAc;CAC7B,CAAA;AASD;;;GAGG;AASH,MAAM,OAAO,MAAM;EARnB;;IAkBU,YAAO,GAAG,KAAK,CAAA;IACf,sBAAiB,GAAG,KAAK,CAAA;IAejC;;OAEG;IAEI,yBAAoB,GAAkB,aAAa,CAAA;IAE1D;;OAEG;IAEI,wBAAmB,GACxB,MAAA,MAAA,MAAM,CAAC,iBAAiB,0CAAE,mBAAmB,mCAAI,EAAE,CAAA;IASrD;;OAEG;IAEI,aAAQ,GAAG,KAAK,CAAA;IAcvB,sHAAsH;IAC9G,iBAAY,GAAG,IAAI,WAAW,EAAE,CAAA;IAExC;;OAEG;IAEI,mBAAc,GAAW,MAAA,MAAA,IAAI,CAAC,oBAAoB,CAAC,CAAC,0CAAE,IAAI,mCAAI,EAAE,CAAA;IAE/D,mBAAc,GAAG,CAAC,MAA4B,EAAE,EAAE;;MACxD,MAAM,QAAQ,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAA;MAEtC,MAAM,WAAW,GACf,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC;QACf,OAAO,EAAE,CAAC,MAAM,CAAC;OAClB,CAAC,mCAAI,EAAE,CAAA;MAEV,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAC,WAAW,CAAC,CAAA;IACvC,CAAC,CAAA;IAcO,YAAO,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;MAC3C,QAAQ,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;QACjD,KAAK,MAAM,CAAC;QACZ,KAAK,KAAK,CAAC,CAAC;UACV,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,qCAAqC,CAAC,CAAA;UACrE,OAAO,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;SACpC;QACD,KAAK,OAAO,CAAC,CAAC;UACZ,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,MAAM,CAAC,oCAAoC,CAAC,CAAA;UACvE,OAAO,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;SACvC;QACD,KAAK,MAAM,CAAC,CAAC;UACX,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,oCAAoC,CAAC,CAAA;UACnE,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SACnC;QACD,KAAK,MAAM,CAAC,CAAC;UACX,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,oCAAoC,CAAC,CAAA;UACnE,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SACnC;QACD,KAAK,YAAY,CAAC,CAAC;UACjB,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,MAAM,CACjC,0CAA0C,CAC3C,CAAA;UACD,OAAO,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;SACzC;QACD,KAAK,MAAM,CAAC,CAAC;UACX,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAA;UACtD,OAAO,IAAI,EAAE,CAAA;SACd;QACD,KAAK,YAAY,CAAC,CAAC;UACjB,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,MAAM,CAAC,6BAA6B,CAAC,CAAA;UAClE,OAAO,UAAU,EAAE,CAAA;SACpB;QACD,KAAK,YAAY,CAAC,CAAC;UACjB,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,MAAM,CAAC,6BAA6B,CAAC,CAAA;UAClE,OAAO,UAAU,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;SACxC;QACD,KAAK,MAAM,CAAC,CAAC;UACX,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAA;UACtD,OAAO,IAAI,EAAE,CAAA;SACd;QACD,KAAK,KAAK,CAAC,CAAC;UACV,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAA;UACpD,OAAO,GAAG,EAAE,CAAA;SACb;QACD,KAAK,MAAM,CAAC;QACZ,KAAK,QAAQ,CAAC,CAAC;UACb,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,yBAAyB,CAAC,CAAA;UAC1D,OAAO,MAAM,EAAE,CAAA;SAChB;QACD,KAAK,GAAG,CAAC,CAAC;UACR,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,iCAAiC,CAAC,CAAA;UAC7D,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SAChC;QACD,KAAK,KAAK,CAAC,CAAC;UACV,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UAC9D,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UACpE,MAAM,EAAE,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,iCAAiC,CAAC,CAAA;UAC7D,OAAO,QAAQ,CAAC,EAAE,mBAAmB,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;SACnE;QACD,KAAK,IAAI,CAAC;QACV,KAAK,UAAU,CAAC;QAChB,OAAO,CAAC,CAAC;UACP,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAA;UAC9D,OAAO,QAAQ,EAAE,CAAA;SAClB;QACD,KAAK,KAAK,CAAC,CAAC;UACV,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAA;UACpD,OAAO,GAAG,EAAE,CAAA;SACb;OACF;IACH,CAAC,CAAA;IAED,sHAAsH;IAC9G,iBAAY,GAAG,IAAI,WAAW,EAAE,CAAA;IAExC;;OAEG;IACK,oBAAe,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;MACnD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;MACzC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;IAC1D,CAAC,CAAA;IAEO,yBAAoB,GAAG,CAAC,EAAsB,EAAE,EAAE,CACxD,CAAC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,CAAA;IAE/B;;OAEG;IACK,qBAAgB,GAAG,KAAK,EAAE,CAAQ,EAAiB,EAAE;MAC3D,MAAM,MAAM,GAAG,CAAC,CAAC,aAAkC,CAAA;MACnD,MAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;MAC3C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;MAClC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC,CAAA;IAqBD;;OAEG;IACK,YAAO,GAAY,GAAG,EAAE;MAC9B,IAAI,CAAC,WAAW,EAAE;SACf,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAA;MACvE,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAClB,OAAO,KAAK,CAAA;MACd,CAAC,CAAC,CAAA;MAEJ,OAAO,IAAI,CAAA;IACb,CAAC,CAAA;IAQD;;OAEG;IAEI,cAAS,GAAG,KAAK,CAAA;IAExB,sHAAsH;IAC9G,oBAAe,GAAG,IAAI,WAAW,EAAE,CAAA;IAE3C;;OAEG;IAEI,gBAAW,GAAG,IAAI,CAAA;IAWzB,sHAAsH;IAC9G,qBAAgB,GAAG,IAAI,WAAW,EAAE,CAAA;IAE5C;;OAEG;IAEI,iBAAY,GAAG,KAAK,CAAA;IAa3B,sHAAsH;IAC9G,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAA;IAE1C;;OAEG;IAEI,eAAU,GAAG,IAAI,CAAA;IAWxB;;;OAGG;IAEI,WAAM,GAAa,EAAE,CAAA;IAEpB,cAAS,GAAG,GAAG,EAAE;;MACvB,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAC;QACvB,OAAO,EAAE,YAAY,CAAC,EAAE,CAAC;UACvB,OAAO,EAAE,IAAI,CAAC,UAAU;SACzB,CAAC;OACH,CAAC,CAAA;IACJ,CAAC,CAAA;IAEO,wBAAmB,GAAG,KAAK,EAAE,SAAuB,EAAE,EAAE,EAAE;MAChE,MAAM,EACJ,QAAQ,EACR,iBAAiB,EACjB,kBAAkB,EAClB,mBAAmB,GACpB,mBACC,QAAQ,EAAE,IAAI,CAAC,cAAc,EAC7B,iBAAiB,EAAE,IAAI,CAAC,UAAU,EAClC,kBAAkB,EAAE,IAAI,CAAC,WAAW,EACpC,mBAAmB,EAAE,IAAI,CAAC,YAAY,IACnC,MAAM,CACV,CAAA;MAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;MAEnD,MAAM,UAAU,GAAgB;QAC9B,OAAO,EAAE;QACT,cAAc,EAAE;QAChB,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC,CAAC;QACtE,eAAe,EAAE;QACjB,aAAa,EAAE;QACf,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;QACpC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,cAAc,CAAC;QACpC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CACtB,mBAAmB,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CACnD;QACD,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAChE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7D,aAAa,EAAE;QACf,WAAW,CAAC,uBAAuB,CAAC,EAAE,CAAC,IAAI,CAAC;QAC5C,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;QACrB,qBAAqB,EAAE;QACvB,MAAM,CAAC,EAAE,CAAC;UACR,GAAG,IAAI,CAAC,MAAM;UACd,GAAG,aAAa;UAChB,GAAG,mBAAmB;UACtB,GAAG,aAAa;UAChB,GAAG,UAAU;UACb,GAAG,YAAY;UACf;YACE,GAAG,EAAE,YAAY;YACjB,GAAG,EAAE,eAAe;WACrB;UACD;YACE,GAAG,EAAE,YAAY;YACjB,GAAG,EAAE,IAAI,CAAC,OAAO;WAClB;UACD,GAAG,aAAa;SACjB,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5D,UAAU,EAAE;QACZ,uBAAuB,CAAC,CAAC,CAAC,EAAE,EAAE;;UAC5B,MAAA,IAAI,CAAC,oBAAoB,+CAAzB,IAAI,EAAwB,CAAC,CAAC,CAAA;UAC9B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;WAC3B;QACH,CAAC,CAAC;OACH,CAAA;MAED,OAAO,UAAU,CAAA;IACnB,CAAC,CAAA;IAEO,mBAAc,GAAG,KAAK,IAAmB,EAAE;;MACjD,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAA;MACpB,MAAM,MAAM,GAAY,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;MAE1D,MAAM,WAAW,GAAG,MAAA,MAAA,IAAI,CAAC,QAAQ,mCAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,mCAAI,EAAE,CAAA;MAE9D,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAC;QAC9B,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC;UACxB,GAAG,EAAE,WAAW;UAChB,UAAU,EAAE,MAAM,IAAI,CAAC,mBAAmB,EAAE;SAC7C,CAAC;OACH,CAAC,CAAA;MAEF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;IACrB,CAAC,CAAA;IAEO,sBAAiB,GAAG,GAAG,EAAE;;MAC/B,MAAM,SAAS,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,GAAG,CAAA;MACrC,IAAI,SAAS,EAAE;QACb,MAAA,MAAA,IAAI,CAAC,EAAE,0CAAE,aAAa,CAAC,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC,0CAAE,WAAW,CAAC,SAAS,CAAC,CAAA;OAC1E;IACH,CAAC,CAAA;IAeO,uBAAkB,GAAG,CAAC,QAAgB,EAAE,EAAE;;MAChD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;MAE7B,MAAM,QAAQ,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAA;MACtC,MAAM,WAAW,GACf,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC;QACf,OAAO,EAAE;UACP,IAAI,EAAE,CAAC;UACP,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM;UACvB,MAAM,EAAE,QAAQ;SACjB;QACD,SAAS,EAAE,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,SAAS;OAC3C,CAAC,mCAAI,EAAE,CAAA;MAEV,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAC,WAAW,CAAC,CAAA;MAErC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAA;IAChC,CAAC,CAAA;IAWO,qBAAgB,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE;;MACnD,MAAM,WAAW,GAAG,MAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,WAAW,mCAAI,EAAE,CAAA;MACpD,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAA;IACtC,CAAC,CAAC,CAAA;IAmFF;;;OAGG;IACK,yBAAoB,GAAG,CAAC,CAAgB,EAAQ,EAAE;MACxD,CAAC,CAAC,eAAe,EAAE,CAAA;IACrB,CAAC,CAAA;IAED;;OAEG;IACK,UAAK,GAAG,GAAS,EAAE;;MACzB,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,EAAE,CAAA;IACzB,CAAC,CAAA;GAqEF;EAhlBC,eAAe,CAAC,SAAiB,EAAE,SAAiB;IAClD,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAA;KACnC;EACH,CAAC;EAgBD,6BAA6B,CAAC,EAC5B,MAAM,GAC2B;IACjC,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAA;EAC7C,CAAC;EAQD;;KAEG;EAEH,eAAe,CAAC,YAAqB,EAAE,YAAqB;IAC1D,IAAI,YAAY,KAAK,YAAY,EAAE;MACjC,IAAI,CAAC,cAAc,CACjB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CACtE,CAAA;KACF;EACH,CAAC;EAyID;;;KAGG;EAEH,qBAAqB,CAAC,YAAoB,EAAE,YAAoB;IAC9D,IAAI,YAAY,KAAK,YAAY,EAAE;MACjC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QAC/C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;MAClB,CAAC,CAAC,CAAA;KACH;EACH,CAAC;EA8CD,gBAAgB,CAAC,SAAkB,EAAE,SAAkB;IACrD,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B,IAAI,CAAC,cAAc,CACjB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACjE,CAAA;KACF;EACH,CAAC;EAYD,iBAAiB,CAAC,SAAkB,EAAE,SAAkB;IACtD,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B,IAAI,CAAC,cAAc,CACjB,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAC/B,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CACzC,CACF,CAAA;KACF;EACH,CAAC;EAYD,eAAe,CAAC,SAAkB,EAAE,SAAkB;IACpD,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B,IAAI,CAAC,cAAc,CACjB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAC/D,CAAA;KACF;EACH,CAAC;EAuGD;;KAEG;EAEI,WAAW;;IAChB,OAAO,OAAO,CAAC,OAAO,CAAC;MACrB,IAAI,EAAE,MAAA,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,mCAAI,EAAE;MAChD,QAAQ,EAAE,YAAY,CACpB,MAAA,MAAA,IAAI,CAAC,iBAAiB,0CAAE,KAAK,mCAAI,IAAI,CAAC,cAAc,CACrD,CAAC,IAAI,CAAC,WAAW,EAAE;KACrB,CAAC,CAAA;EACJ,CAAC;EAqBD;;KAEG;EAEI,WAAW,CAAC,QAAgB;IACjC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAA;IACjC,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;EAClC,CAAC;EAOD;;KAEG;EAEI,QAAQ;;IACb,OAAO,OAAO,CAAC,OAAO,CACpB,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC,MAAM,CAAC;MAC3B,OAAO,EAAE,YAAY;KACtB,CAAC,CACH,CAAA;EACH,CAAC;EAED;;KAEG;EAEI,KAAK,CAAC,QAAQ,CAAC,KAAsB;;IAC1C,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CACtB,WAAW,CAAC,QAAQ,CAClB,KAAK,EACL,EAAE,UAAU,EAAE,MAAM,IAAI,CAAC,mBAAmB,EAAE,EAAE,EAChD;MACE,OAAO,EAAE,YAAY;KACtB,CACF,CACF,CAAA;EACH,CAAC;EAED;;;KAGG;EAEI,KAAK,CAAC,kBAAkB,CAAC,OAAe;;IAC7C,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CACtB,WAAW,CAAC,MAAM,CAAC;MACjB,GAAG,EAAE,OAAO;MACZ,UAAU,EAAE,MAAM,IAAI,CAAC,mBAAmB,EAAE;KAC7C,CAAC,CACH,CAAA;EACH,CAAC;EAED;;;KAGG;EAEI,KAAK,CAAC,MAAM;IACjB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,OAAO,IAAI,CAAC,SAAS,CAAA;KACtB;IAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;MACrC,IAAI,UAAU,GAAG,IAAI,CAAA;MACrB,MAAM,OAAO,GAAG,IAAK,CAAA;MAErB,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE;QAC3B,UAAU,GAAG,KAAK,CAAA;MACpB,CAAC,EAAE,OAAO,CAAC,CAAA;MAEX,MAAM,KAAK,GAAG,GAAG,EAAE;QACjB,WAAW,CAAC,GAAG,EAAE;UACf,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE;YAClC,YAAY,CAAC,IAAI,CAAC,CAAA;YAClB,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;WACxB;eAAM,IAAI,CAAC,UAAU,EAAE;YACtB,MAAM,CACJ,IAAI,KAAK,CACP,uCAAuC,OAAO,wBAAwB,CACvE,CACF,CAAA;WACF;eAAM;YACL,KAAK,EAAE,CAAA;WACR;QACH,CAAC,EAAE,GAAG,CAAC,CAAA;MACT,CAAC,CAAA;MAED,KAAK,EAAE,CAAA;IACT,CAAC,CAAC,CAAA;EACJ,CAAC;EAiBS,KAAK,CAAC,iBAAiB;IAC/B,IAAI;MACF,OAAO,IAAI,CAAC,cAAc,EAAE,CAAA;KAC7B;IAAC,OAAO,GAAG,EAAE;MACZ,OAAO,CAAC,GAAG,CAAC,oDAAoD,EAAE,GAAG,CAAC,CAAA;KACvE;EACH,CAAC;EAES,gBAAgB;IACxB,IAAI,CAAC,iBAAiB,EAAE,CAAA;IACxB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAI,CAAC,KAAK,EAAE,CAAA;KACb;IAED,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;QAC3C,SAAS,EAAE,IAAI;QACf,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,IAAI;OACd,CAAC,CAAA;KACH;IAED,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,IAAI,CAAC,SAAS,EAAE,CAAA;KACjB;EACH,CAAC;EAES,oBAAoB;;IAC5B,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;IAClC,MAAA,IAAI,CAAC,SAAS,0CAAE,OAAO,EAAE,CAAA;EAC3B,CAAC;EAEM,MAAM;IACX,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAE,UAAU,CAAC,SAAS;QAC9B;UACE,+DAA+D;UAC/D,KAAK,EAAE,UAAU,CAAC,MAAM,EACxB,SAAS,EAAE,IAAI,CAAC,oBAAoB,EACpC,OAAO,EAAE,IAAI,CAAC,KAAK;UAEnB,WAAK,KAAK,EAAC,QAAQ,EAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnD,YAAM,IAAI,EAAE,KAAK,CAAC,IAAI,GAAI,CACtB;UAEN,WAAK,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACtC,YAAM,IAAI,EAAE,KAAK,CAAC,MAAM,GAAI,CACxB;UAEN,WAAK,EAAE,EAAE,MAAM,CAAC,YAAY,GAAI,CAC5B;QAEN;UACE,EAAC,cAAc,IACb,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,aAAa,EAAE,IAAI,CAAC,gBAAgB,EACpC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAC/C,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,EAC7C,MAAM,EAAE,IAAI,CAAC,oBAAoB,GACjB,CACb,CACH,CACD,CACR,CAAA;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  autocompletion,\n  completeAnyWord,\n  startCompletion,\n} from '@codemirror/autocomplete'\nimport { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { commentKeymap } from '@codemirror/comment'\nimport { foldGutter, foldKeymap } from '@codemirror/fold'\nimport { lineNumbers } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { history, historyField, historyKeymap } from '@codemirror/history'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { searchKeymap, search } from '@codemirror/search'\nimport {\n  Compartment,\n  EditorState,\n  Extension,\n  Prec,\n  StateEffect,\n} from '@codemirror/state'\nimport {\n  Command,\n  drawSelection,\n  EditorView,\n  highlightSpecialChars,\n  KeyBinding,\n  keymap,\n  ViewUpdate,\n} from '@codemirror/view'\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  Watch,\n} from '@stencil/core'\nimport { DiscoverExecutableLanguagesEvent } from '../code/codeTypes'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { LanguagePicker } from './components/languageSelect'\nimport { codeErrors, updateErrors } from './customizations/errorPanel'\nimport {\n  EditorUpdateHandlerCb,\n  updateListenerExtension,\n} from './customizations/onUpdateHandlerExtension'\nimport {\n  FileFormat,\n  FileFormatMap,\n  fileFormatMap,\n  lookupFormat,\n} from './languageUtils'\n\nexport interface EditorContents {\n  text: string\n  language: string\n}\n\nexport type Keymap = KeyBinding\n\nexport type EditorStateJSON = Record<string, unknown>\n\nconst slots = {\n  text: 'text',\n  errors: 'errors',\n}\n\nconst cssClasses = {\n  container: 'editorContainer',\n  editor: 'editor',\n}\n\nconst cssIds = {\n  editorTarget: 'editorTarget',\n}\n\nexport type EditorConfig = {\n  language?: string\n  foldGutterEnabled?: boolean\n  lineNumbersEnabled?: boolean\n  lineWrappingEnabled?: boolean\n}\n\n/**\n * @slot text - The contents of the editor.\n * @slot errors - List of any `stencila-code-error` elements to render in the Errors panel.\n */\n@Component({\n  tag: 'stencila-editor',\n  styleUrls: {\n    default: 'editor.css',\n    material: 'editor.material.css',\n  },\n  scoped: true,\n})\nexport class Editor {\n  @Element()\n  private el: HTMLStencilaEditorElement\n\n  private textSlot: HTMLDivElement | undefined\n  private errorsSlot: HTMLDivElement | undefined\n\n  public editorRef: EditorView | undefined\n  private languagePickerRef: HTMLSelectElement | undefined\n\n  private isReady = false\n  private isUpdatingContent = false\n\n  /**\n   * Text contents of the editor\n   */\n  @Prop()\n  public contents?: string\n\n  @Watch('contents')\n  contentsChanged(nextValue: string, prevValue: string): void {\n    if (nextValue !== prevValue) {\n      this.setContentsHandler(nextValue)\n    }\n  }\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop()\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n  }\n\n  /**\n   * Disallow editing of the editor contents when set to `true`\n   */\n  @Prop()\n  public readOnly = false\n\n  /**\n   * Update the CodeMirror internal state when the `readOnly` prop changes\n   */\n  @Watch('readOnly')\n  readOnlyChanged(nextReadOnly: boolean, prevReadOnly: boolean): void {\n    if (nextReadOnly !== prevReadOnly) {\n      this.dispatchEffect(\n        this.readOnlyConf.reconfigure(EditorView.editable.of(!this.readOnly))\n      )\n    }\n  }\n\n  // Dynamic CodeMirror states need to be \"compartmentalized\". @see https://codemirror.net/6/docs/ref/#state.Compartment\n  private readOnlyConf = new Compartment()\n\n  /**\n   * Programming language of the Editor\n   */\n  @Prop()\n  public activeLanguage: string = this.languageCapabilities.R?.name ?? ''\n\n  private dispatchEffect = (effect: StateEffect<unknown>) => {\n    const docState = this.editorRef?.state\n\n    const transaction =\n      docState?.update({\n        effects: [effect],\n      }) ?? {}\n\n    this.editorRef?.dispatch(transaction)\n  }\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Event emitted when the content of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<ViewUpdate>\n\n  private getLang = async (language: string) => {\n    switch (lookupFormat(language).name.toLowerCase()) {\n      case 'bash':\n      case 'zsh': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { shell } = await import('@codemirror/legacy-modes/mode/shell')\n        return StreamLanguage.define(shell)\n      }\n      case 'latex': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { stexMath } = await import('@codemirror/legacy-modes/mode/stex')\n        return StreamLanguage.define(stexMath)\n      }\n      case 'toml': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { toml } = await import('@codemirror/legacy-modes/mode/toml')\n        return StreamLanguage.define(toml)\n      }\n      case 'yaml': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { yaml } = await import('@codemirror/legacy-modes/mode/yaml')\n        return StreamLanguage.define(yaml)\n      }\n      case 'dockerfile': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { dockerFile } = await import(\n          '@codemirror/legacy-modes/mode/dockerfile'\n        )\n        return StreamLanguage.define(dockerFile)\n      }\n      case 'html': {\n        const { html } = await import('@codemirror/lang-html')\n        return html()\n      }\n      case 'javascript': {\n        const { javascript } = await import('@codemirror/lang-javascript')\n        return javascript()\n      }\n      case 'typescript': {\n        const { javascript } = await import('@codemirror/lang-javascript')\n        return javascript({ typescript: true })\n      }\n      case 'json': {\n        const { json } = await import('@codemirror/lang-json')\n        return json()\n      }\n      case 'xml': {\n        const { xml } = await import('@codemirror/lang-xml')\n        return xml()\n      }\n      case 'calc':\n      case 'python': {\n        const { python } = await import('@codemirror/lang-python')\n        return python()\n      }\n      case 'r': {\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { r } = await import('@codemirror/legacy-modes/mode/r')\n        return StreamLanguage.define(r)\n      }\n      case 'rmd': {\n        const { markdown } = await import('@codemirror/lang-markdown')\n        const { StreamLanguage } = await import('@codemirror/stream-parser')\n        const { r } = await import('@codemirror/legacy-modes/mode/r')\n        return markdown({ defaultCodeLanguage: StreamLanguage.define(r) })\n      }\n      case 'md':\n      case 'markdown':\n      default: {\n        const { markdown } = await import('@codemirror/lang-markdown')\n        return markdown()\n      }\n      case 'sql': {\n        const { sql } = await import('@codemirror/lang-sql')\n        return sql()\n      }\n    }\n  }\n\n  // Dynamic CodeMirror states need to be \"compartmentalized\". @see https://codemirror.net/6/docs/ref/#state.Compartment\n  private languageConf = new Compartment()\n\n  /**\n   * Resolve and set a new active CodeMirror syntax\n   */\n  private setEditorSyntax = async (language: string) => {\n    const lang = await this.getLang(language)\n    this.dispatchEffect(this.languageConf.reconfigure(lang))\n  }\n\n  private setLanguagePickerRef = (el?: HTMLSelectElement) =>\n    (this.languagePickerRef = el)\n\n  /**\n   * Function to call when the user selects a new language from the language picker dropdown.\n   */\n  private onSelectLanguage = async (e: Event): Promise<void> => {\n    const target = e.currentTarget as HTMLSelectElement\n    const language = lookupFormat(target.value)\n    this.languageChange.emit(language)\n    return this.setEditorSyntax(language.name)\n  }\n\n  /**\n   * Update the internal state, for both the component and CodeMirror, when the\n   * `activeLanguage` prop changes\n   */\n  @Watch('activeLanguage')\n  activeLanguageChanged(nextLanguage: string, prevLanguage: string): void {\n    if (nextLanguage !== prevLanguage) {\n      this.setEditorSyntax(nextLanguage).catch((err) => {\n        console.log(err)\n      })\n    }\n  }\n\n  /**\n   * Function to be evaluated over the contents of the editor.\n   */\n  @Prop()\n  public executeHandler?: (contents: EditorContents) => Promise<unknown>\n\n  /**\n   * Wrapper around the `executeHandler` function, needed to run using CodeMirror keyboard shortcuts.\n   */\n  private execute: Command = () => {\n    this.getContents()\n      .then((contents) => {\n        return this.executeHandler ? this.executeHandler(contents) : contents\n      })\n      .catch((err) => {\n        console.error(err)\n        return false\n      })\n\n    return true\n  }\n\n  /**\n   * Callback function to invoke whenever the editor contents are updated.\n   */\n  @Prop()\n  public contentChangeHandler?: EditorUpdateHandlerCb\n\n  /**\n   * Autofocus the editor on page load\n   */\n  @Prop()\n  public autofocus = false\n\n  // Dynamic CodeMirror states need to be \"compartmentalized\". @see https://codemirror.net/6/docs/ref/#state.Compartment\n  private lineNumbersConf = new Compartment()\n\n  /**\n   * Determines the visibility of line numbers\n   */\n  @Prop()\n  public lineNumbers = true\n\n  @Watch('lineNumbers')\n  onSetLineNumbers(nextValue: boolean, prevValue: boolean): void {\n    if (nextValue !== prevValue) {\n      this.dispatchEffect(\n        this.lineNumbersConf.reconfigure(nextValue ? lineNumbers() : [])\n      )\n    }\n  }\n\n  // Dynamic CodeMirror states need to be \"compartmentalized\". @see https://codemirror.net/6/docs/ref/#state.Compartment\n  private lineWrappingConf = new Compartment()\n\n  /**\n   * Control line wrapping of text inside the editor\n   */\n  @Prop()\n  public lineWrapping = false\n\n  @Watch('lineWrapping')\n  onSetLineWrapping(nextValue: boolean, prevValue: boolean): void {\n    if (nextValue !== prevValue) {\n      this.dispatchEffect(\n        this.lineWrappingConf.reconfigure(\n          nextValue ? EditorView.lineWrapping : []\n        )\n      )\n    }\n  }\n\n  // Dynamic CodeMirror states need to be \"compartmentalized\". @see https://codemirror.net/6/docs/ref/#state.Compartment\n  private foldGutterConf = new Compartment()\n\n  /**\n   * Enables ability to fold sections of code if the syntax package supports it\n   */\n  @Prop()\n  public foldGutter = true\n\n  @Watch('foldGutter')\n  onSetfoldGutter(nextValue: boolean, prevValue: boolean): void {\n    if (nextValue !== prevValue) {\n      this.dispatchEffect(\n        this.foldGutterConf.reconfigure(nextValue ? foldGutter() : [])\n      )\n    }\n  }\n\n  /**\n   * Custom keyboard shortcuts to pass along to CodeMirror\n   * @see https://codemirror.net/6/docs/ref/#keymap\n   */\n  @Prop()\n  public keymap: Keymap[] = []\n\n  private setErrors = () => {\n    this.editorRef?.dispatch({\n      effects: updateErrors.of({\n        slotRef: this.errorsSlot,\n      }),\n    })\n  }\n\n  private getCodeMirrorConfig = async (config: EditorConfig = {}) => {\n    const {\n      language,\n      foldGutterEnabled,\n      lineNumbersEnabled,\n      lineWrappingEnabled,\n    } = {\n      language: this.activeLanguage,\n      foldGutterEnabled: this.foldGutter,\n      lineNumbersEnabled: this.lineNumbers,\n      lineWrappingEnabled: this.lineWrapping,\n      ...config,\n    }\n\n    const languageSyntax = await this.getLang(language)\n\n    const extensions: Extension[] = [\n      history(),\n      autocompletion(),\n      EditorState.languageData.of(() => [{ autocomplete: completeAnyWord }]),\n      bracketMatching(),\n      closeBrackets(),\n      Prec.fallback(defaultHighlightStyle),\n      this.languageConf.of(languageSyntax),\n      this.lineWrappingConf.of(\n        lineWrappingEnabled ? EditorView.lineWrapping : []\n      ),\n      this.lineNumbersConf.of(lineNumbersEnabled ? lineNumbers() : []),\n      this.foldGutterConf.of(foldGutterEnabled ? foldGutter() : []),\n      drawSelection(),\n      EditorState.allowMultipleSelections.of(true),\n      search({ top: true }),\n      highlightSpecialChars(),\n      keymap.of([\n        ...this.keymap,\n        ...commentKeymap,\n        ...closeBracketsKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...searchKeymap,\n        {\n          key: 'Ctrl-Space',\n          run: startCompletion,\n        },\n        {\n          key: 'Ctrl-Enter',\n          run: this.execute,\n        },\n        ...defaultKeymap,\n      ]),\n      this.readOnlyConf.of(EditorView.editable.of(!this.readOnly)),\n      codeErrors(),\n      updateListenerExtension((e) => {\n        this.contentChangeHandler?.(e)\n        if (!this.isUpdatingContent) {\n          this.contentChange.emit(e)\n        }\n      }),\n    ]\n\n    return extensions\n  }\n\n  private initCodeMirror = async (): Promise<void> => {\n    const root = this.el\n    const slotEl: Element = getSlotByName(root)(slots.text)[0]\n\n    const textContent = this.contents ?? slotEl?.textContent ?? ''\n\n    this.editorRef = new EditorView({\n      state: EditorState.create({\n        doc: textContent,\n        extensions: await this.getCodeMirrorConfig(),\n      }),\n    })\n\n    this.isReady = true\n  }\n\n  private attachEditorToDom = () => {\n    const editorDom = this.editorRef?.dom\n    if (editorDom) {\n      this.el?.querySelector(`#${cssIds.editorTarget}`)?.replaceWith(editorDom)\n    }\n  }\n\n  /**\n   * Retrieve the Editor contents and active language.\n   */\n  @Method()\n  public getContents(): Promise<EditorContents> {\n    return Promise.resolve({\n      text: this.editorRef?.state.doc.toString() ?? '',\n      language: lookupFormat(\n        this.languagePickerRef?.value ?? this.activeLanguage\n      ).name.toLowerCase(),\n    })\n  }\n\n  private setContentsHandler = (contents: string) => {\n    this.isUpdatingContent = true\n\n    const docState = this.editorRef?.state\n    const transaction =\n      docState?.update({\n        changes: {\n          from: 0,\n          to: docState.doc.length,\n          insert: contents,\n        },\n        selection: this.editorRef?.state.selection,\n      }) ?? {}\n\n    this.editorRef?.dispatch(transaction)\n\n    this.isUpdatingContent = false\n  }\n\n  /**\n   * Replace the contents of the Editor with a supplied string.\n   */\n  @Method()\n  public setContents(contents: string): Promise<string> {\n    this.setContentsHandler(contents)\n    return Promise.resolve(contents)\n  }\n\n  private textSlotObserver = new MutationObserver(() => {\n    const updatedText = this.textSlot?.textContent ?? ''\n    this.setContentsHandler(updatedText)\n  })\n\n  /**\n   * Retrieve a JSON representation of the the internal editor state.\n   */\n  @Method()\n  public getState(): Promise<EditorStateJSON> {\n    return Promise.resolve(\n      this.editorRef?.state.toJSON({\n        history: historyField,\n      })\n    )\n  }\n\n  /**\n   * Update the internal editor state with the given JSON object.\n   */\n  @Method()\n  public async setState(state: EditorStateJSON): Promise<void> {\n    this.editorRef?.setState(\n      EditorState.fromJSON(\n        state,\n        { extensions: await this.getCodeMirrorConfig() },\n        {\n          history: historyField,\n        }\n      )\n    )\n  }\n\n  /**\n   * Create a new editor state from a given string.\n   * The string will be used as the initial contents of the editor.\n   */\n  @Method()\n  public async setStateFromString(content: string): Promise<void> {\n    this.editorRef?.setState(\n      EditorState.create({\n        doc: content,\n        extensions: await this.getCodeMirrorConfig(),\n      })\n    )\n  }\n\n  /**\n   * Retrieve a reference to the internal CodeMirror editor.\n   * Allows for maintaining state from applications making use of this component.\n   */\n  @Method()\n  public async getRef(): Promise<EditorView> {\n    if (this.editorRef) {\n      return this.editorRef\n    }\n\n    return new Promise((resolve, reject) => {\n      let isChecking = true\n      const timeout = 3_000\n\n      const wait = setTimeout(() => {\n        isChecking = false\n      }, timeout)\n\n      const check = () => {\n        setInterval(() => {\n          if (this.editorRef && this.isReady) {\n            clearTimeout(wait)\n            resolve(this.editorRef)\n          } else if (!isChecking) {\n            reject(\n              new Error(\n                `Editor wasn’t instantiated in time (${timeout}ms), please try again.`\n              )\n            )\n          } else {\n            check()\n          }\n        }, 100)\n      }\n\n      check()\n    })\n  }\n\n  /**\n   * Prevents keyboard event listeners attached to parent DOM elements from firing.\n   * This is to avoid conflicts when user has focused on the editor.\n   */\n  private stopEventPropagation = (e: KeyboardEvent): void => {\n    e.stopPropagation()\n  }\n\n  /**\n   * Brings DOM focus to the editor\n   */\n  private focus = (): void => {\n    this.editorRef?.focus()\n  }\n\n  protected async componentWillLoad(): Promise<void> {\n    try {\n      return this.initCodeMirror()\n    } catch (err) {\n      console.log('Encountered error while initializing code editor\\n', err)\n    }\n  }\n\n  protected componentDidLoad(): void {\n    this.attachEditorToDom()\n    if (this.autofocus) {\n      this.focus()\n    }\n\n    if (this.textSlot) {\n      this.textSlotObserver.observe(this.textSlot, {\n        childList: true,\n        characterData: true,\n        subtree: true,\n      })\n    }\n\n    if (this.errorsSlot) {\n      this.setErrors()\n    }\n  }\n\n  protected disconnectedCallback(): void {\n    this.textSlotObserver.disconnect()\n    this.editorRef?.destroy()\n  }\n\n  public render() {\n    return (\n      <Host>\n        <div class={cssClasses.container}>\n          <div\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n            class={cssClasses.editor}\n            onKeyDown={this.stopEventPropagation}\n            onClick={this.focus}\n          >\n            <div class=\"hidden\" ref={(el) => (this.textSlot = el)}>\n              <slot name={slots.text} />\n            </div>\n\n            <div ref={(el) => (this.errorsSlot = el)}>\n              <slot name={slots.errors} />\n            </div>\n\n            <div id={cssIds.editorTarget} />\n          </div>\n\n          <menu>\n            <LanguagePicker\n              activeLanguage={this.activeLanguage}\n              disabled={this.readOnly}\n              onSetLanguage={this.onSelectLanguage}\n              languageCapabilities={this.languageCapabilities}\n              executableLanguages={this.executableLanguages}\n              setRef={this.setLanguagePickerRef}\n            ></LanguagePicker>\n          </menu>\n        </div>\n      </Host>\n    )\n  }\n}\n"]}