{"version":3,"file":"errorPanel.js","sourceRoot":"","sources":["../../../../src/components/editor/customizations/errorPanel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,SAAS,EAAE,MAAM,mBAAmB,CAAA;AACpD,OAAO,EAAa,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAE1D,MAAM,CAAC,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,EAE1C,CAAA;AAEJ;;;;;;GAMG;AACH,MAAM,UAAU,GAAG,GAAU,EAAE;EAC7B,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;EACzC,IAAI,SAAS,GAAG,KAAK,CAAA;EAErB,MAAM,YAAY,GAAG,CAAC,MAAoB,EAAQ,EAAE;IAClD,IAAI,MAAM,EAAE;MACV,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;MACvB,SAAS,GAAG,IAAI,CAAA;KACjB;EACH,CAAC,CAAA;EAED,OAAO;IACL,GAAG;IACH,MAAM,CAAC,MAAM;MACX,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,YAAY,EAAE;QAC7C,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,OAAO,EAAE;UACxC,IAAI,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE;YAC3B,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;cACtC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;aACnC;WACF;SACF;OACF;IACH,CAAC;GACF,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,GAAc,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC,CAAA","sourcesContent":["import { Panel, showPanel } from '@codemirror/panel'\nimport { Extension, StateEffect } from '@codemirror/state'\n\nexport const updateErrors = StateEffect.define<{\n  slotRef: HTMLElement | undefined\n}>()\n\n/**\n * Custom CodeMirror panel for rendering errors.\n * It expects a pointer to a the HTML element wrapping the `errors` slot.\n * If it is present, it relocates the node to become part of the CodeMirror UI.\n * This way any logic for adding/removing individual nodes, as well as maintaining their\n * state is delegated to StencilJS.\n */\nconst errorPanel = (): Panel => {\n  const dom = document.createElement('div')\n  let slotAdded = false\n\n  const relocateSlot = (slotEl?: HTMLElement): void => {\n    if (slotEl) {\n      dom.appendChild(slotEl)\n      slotAdded = true\n    }\n  }\n\n  return {\n    dom,\n    update(update) {\n      for (const transaction of update.transactions) {\n        for (const effect of transaction.effects) {\n          if (effect.is(updateErrors)) {\n            if (!slotAdded && effect.value.slotRef) {\n              relocateSlot(effect.value.slotRef)\n            }\n          }\n        }\n      }\n    },\n  }\n}\n\nexport const codeErrors = (): Extension => showPanel.of(errorPanel)\n"]}