{"version":3,"file":"languageSelect.js","sourceRoot":"","sources":["../../../../src/components/editor/components/languageSelect.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAuB,CAAC,EAAE,MAAM,eAAe,CAAA;AACtD,OAAO,EAAiB,YAAY,EAAE,MAAM,kBAAkB,CAAA;AAW9D,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAY,EAAuB,EAAE;EAClE,MAAM,qBAAqB,GAAG,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;EAChE,MAAM,sBAAsB,GAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;EAEnD,MAAM,iBAAiB,GAAG,sBAAsB;IAC9C,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,MAAM,CAC/C,CAAC,KAAoB,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,EAAE;MACxC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC1D,CAAC,CAAC,KAAK;QACP,CAAC,iCAAM,KAAK,KAAE,CAAC,IAAI,CAAC,EAAE,OAAO,GAAE,CAAA;IACnC,CAAC,EACD,EAAE,CACH;IACH,CAAC,CAAC,KAAK,CAAC,oBAAoB,CAAA;EAE9B,OAAO,CACL,2BAAkB,sBAAsB;IACtC,qBAAe,IAAI,EAAC,UAAU,GAAiB;IAC/C,cACE,QAAQ,EAAE,KAAK,CAAC,aAAa,EAC7B,GAAG,EAAE,KAAK,CAAC,MAAM,EACjB,QAAQ,EAAE,KAAK,CAAC,QAAQ;MAEvB,sBAAsB;QACrB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CACzD,cACE,KAAK,EAAE,QAAQ,CAAC,IAAI,EACpB,QAAQ,EAAE,QAAQ,CAAC,IAAI,KAAK,qBAAqB,CAAC,IAAI,IAErD,QAAQ,CAAC,IAAI,CACP,CACV,CAAC;MAEJ,cAAQ,QAAQ,2BAAwB;MAEvC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClD,cACE,KAAK,EAAE,QAAQ,CAAC,IAAI,EACpB,QAAQ,EAAE,QAAQ,CAAC,IAAI,KAAK,qBAAqB,CAAC,IAAI,IAErD,QAAQ,CAAC,IAAI,CACP,CACV,CAAC,CACK,CACH,CACT,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { FunctionalComponent, h } from '@stencil/core'\nimport { FileFormatMap, lookupFormat } from '../languageUtils'\n\ninterface Props {\n  activeLanguage: string\n  disabled: boolean\n  languageCapabilities: FileFormatMap\n  executableLanguages: FileFormatMap\n  onSetLanguage: (e: Event) => void\n  setRef: (el?: HTMLSelectElement) => void\n}\n\nexport const LanguagePicker = (props: Props): FunctionalComponent => {\n  const activeLanguageByAlias = lookupFormat(props.activeLanguage)\n  const hasExecutableLanguages =\n    Object.keys(props.executableLanguages).length > 0\n\n  const filteredLanguages = hasExecutableLanguages\n    ? Object.entries(props.languageCapabilities).reduce(\n        (langs: FileFormatMap, [name, details]) => {\n          return Object.keys(props.executableLanguages).includes(name)\n            ? langs\n            : { ...langs, [name]: details }\n        },\n        {}\n      )\n    : props.languageCapabilities\n\n  return (\n    <label aria-label=\"Programming Language\">\n      <stencila-icon icon=\"terminal\"></stencila-icon>\n      <select\n        onChange={props.onSetLanguage}\n        ref={props.setRef}\n        disabled={props.disabled}\n      >\n        {hasExecutableLanguages &&\n          Object.values(props.executableLanguages).map((language) => (\n            <option\n              value={language.name}\n              selected={language.name === activeLanguageByAlias.name}\n            >\n              {language.name}\n            </option>\n          ))}\n\n        <option disabled>Not executable</option>\n\n        {Object.values(filteredLanguages).map((language) => (\n          <option\n            value={language.name}\n            selected={language.name === activeLanguageByAlias.name}\n          >\n            {language.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  )\n}\n"]}