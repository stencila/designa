{"version":3,"file":"languageUtils.js","sourceRoot":"","sources":["../../../src/components/editor/languageUtils.ts"],"names":[],"mappings":"AAQA,MAAM,CAAC,MAAM,aAAa,GAAkB;EAC1C,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC;GACjC;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,UAAU,EAAE;IACV,IAAI,EAAE,YAAY;IAClB,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,YAAY,CAAC;GACxB;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,UAAU,EAAE;IACV,IAAI,EAAE,YAAY;IAClB,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC;GAC9B;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,KAAK,EAAE;IACL,IAAI,EAAE,OAAO;IACb,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC;GAClC;EACD,QAAQ,EAAE;IACR,IAAI,EAAE,UAAU;IAChB,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;GAC5B;EACD,SAAS,EAAE;IACT,IAAI,EAAE,YAAY;IAClB,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,KAAK,CAAC;GACjB;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,MAAM,EAAE;IACN,IAAI,EAAE,QAAQ;IACd,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC;GACnC;EACD,CAAC,EAAE;IACD,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,GAAG;IACR,OAAO,EAAE,CAAC,GAAG,CAAC;GACf;EACD,YAAY,EAAE;IACZ,IAAI,EAAE,YAAY;IAClB,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,WAAW,CAAC;GAC5C;EACD,GAAG,EAAE;IACH,IAAI,EAAE,KAAK;IACX,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,KAAK,CAAC;GACjB;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,UAAU,EAAE;IACV,IAAI,EAAE,YAAY;IAClB,GAAG,EAAE,IAAI;IACT,OAAO,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC;GAC9B;EACD,GAAG,EAAE;IACH,IAAI,EAAE,KAAK;IACX,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,KAAK,CAAC;GACjB;EACD,IAAI,EAAE;IACJ,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,CAAC,MAAM,CAAC;GAClB;EACD,GAAG,EAAE;IACH,IAAI,EAAE,KAAK;IACX,GAAG,EAAE,KAAK;IACV,OAAO,EAAE,CAAC,KAAK,CAAC;GACjB;CACF,CAAA;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,YAAoB,EAAc,EAAE;;EAC/D,qDAAqD;EACrD,MAAM,wBAAwB,GAAG,YAAY,CAAC,WAAW,EAAE,CAAA;EAC3D,MAAM,cAAc,GAClB,MAAA,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAC/B,CAAC,OAAO,EAAE,EAAE,CACV,wBAAwB,KAAK,OAAO,CAAC,IAAI;IACzC,CAAC,OAAO,CAAC,GAAG,KAAK,IAAI,IAAI,wBAAwB,KAAK,OAAO,CAAC,GAAG,CAAC;IAClE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CACrD,mCAAI,aAAa,CAAC,SAAS,CAAA;EAE9B,OAAO,cAAc,CAAA;AACvB,CAAC,CAAA","sourcesContent":["export type FileFormat = {\n  name: string\n  ext: string | null\n  aliases: string[]\n}\n\nexport type FileFormatMap = Record<string, FileFormat>\n\nexport const fileFormatMap: FileFormatMap = {\n  Bash: {\n    name: 'Bash',\n    ext: 'sh',\n    aliases: ['bash', 'shell', 'sh'],\n  },\n  Calc: {\n    name: 'Calc',\n    ext: 'calc',\n    aliases: ['calc'],\n  },\n  Dockerfile: {\n    name: 'Dockerfile',\n    ext: null,\n    aliases: ['dockerfile'],\n  },\n  HTML: {\n    name: 'HTML',\n    ext: 'html',\n    aliases: ['html'],\n  },\n  JavaScript: {\n    name: 'JavaScript',\n    ext: 'js',\n    aliases: ['javascript', 'js'],\n  },\n  JSON: {\n    name: 'JSON',\n    ext: 'json',\n    aliases: ['json'],\n  },\n  LaTeX: {\n    name: 'LaTeX',\n    ext: 'tex',\n    aliases: ['latex', 'stex', 'tex'],\n  },\n  Markdown: {\n    name: 'Markdown',\n    ext: 'md',\n    aliases: ['markdown', 'md'],\n  },\n  PlainText: {\n    name: 'Plain Text',\n    ext: 'txt',\n    aliases: ['txt'],\n  },\n  PrQL: {\n    name: 'PrQL',\n    ext: 'prql',\n    aliases: ['prql'],\n  },\n  Python: {\n    name: 'Python',\n    ext: 'py',\n    aliases: ['python', 'py', 'ipynb'],\n  },\n  R: {\n    name: 'R',\n    ext: 'r',\n    aliases: ['r'],\n  },\n  'R Markdown': {\n    name: 'R Markdown',\n    ext: 'rmd',\n    aliases: ['rmd', 'r markdown', 'rmarkdown'],\n  },\n  SQL: {\n    name: 'SQL',\n    ext: 'sql',\n    aliases: ['sql'],\n  },\n  TOML: {\n    name: 'TOML',\n    ext: 'toml',\n    aliases: ['toml'],\n  },\n  TypeScript: {\n    name: 'TypeScript',\n    ext: 'ts',\n    aliases: ['typescript', 'ts'],\n  },\n  XML: {\n    name: 'XML',\n    ext: 'xml',\n    aliases: ['xml'],\n  },\n  YAML: {\n    name: 'YAML',\n    ext: 'yaml',\n    aliases: ['yaml'],\n  },\n  ZSH: {\n    name: 'ZSH',\n    ext: 'zsh',\n    aliases: ['zsh'],\n  },\n}\n\n/**\n * Attempts to look up a language format by the provided string.\n * Falls back to `Plain Text` if a match cannot be found.\n * @param {string} language - Can be one the format name, file extension, or one of the aliases.\n */\nexport const lookupFormat = (targetFormat: string): FileFormat => {\n  // Standardize names to lowercase to simplify matches\n  const targetFormatStandardized = targetFormat.toLowerCase()\n  const resolvedFormat =\n    Object.values(fileFormatMap).find(\n      (formats) =>\n        targetFormatStandardized === formats.name ||\n        (formats.ext !== null && targetFormatStandardized === formats.ext) ||\n        formats.aliases.includes(targetFormatStandardized)\n    ) ?? fileFormatMap.PlainText\n\n  return resolvedFormat\n}\n"]}