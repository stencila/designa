{"version":3,"file":"executa.js","sourceRoot":"","sources":["../../../src/components/documentToolbar/executa.ts"],"names":[],"mappings":"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","sourcesContent":["import { datumEither as DE } from '@nll/datum'\nimport { SoftwareSession } from '@stencila/schema'\nimport { pipe } from 'fp-ts/function'\nimport wretch from 'wretch'\n\nenum JobStatus {\n  // Keep checking\n  WAITING = 'WAITING',\n  DISPATCHED = 'DISPATCHED',\n  PENDING = 'PENDING',\n  RECEIVED = 'RECEIVED',\n  STARTED = 'STARTED',\n  // Stop Checking\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE',\n  CANCELLED = 'CANCELLED',\n  REVOKED = 'REVOKED',\n  TERMINATED = 'TERMINATED',\n  // Ready to execute\n  RUNNING = 'RUNNING',\n}\n\nexport const jobLogic = {\n  keepChecking: [\n    JobStatus.WAITING,\n    JobStatus.DISPATCHED,\n    JobStatus.PENDING,\n    JobStatus.RECEIVED,\n    JobStatus.STARTED,\n  ],\n  stopChecking: [\n    JobStatus.SUCCESS,\n    JobStatus.FAILURE,\n    JobStatus.CANCELLED,\n    JobStatus.REVOKED,\n    JobStatus.TERMINATED,\n  ],\n  readyToExecute: [JobStatus.RUNNING],\n}\n\nexport interface Job {\n  id: number\n  statusMessage: string\n  summaryString: string\n  runtimeFormatted: string\n  url: null | string\n  position: number\n  children: unknown[]\n  key: string\n  description: string\n  created: Date\n  updated: Date\n  began: null\n  ended: null\n  status: JobStatus\n  isActive: boolean\n  method: string\n  params: Params\n  result: null\n  error: null | { message: string; type: string }\n  log: null\n  runtime: null\n  worker: null\n  retries: null\n  callbackId: null\n  callbackMethod: null\n  project: number\n  creator: number\n  queue: number\n  parent: null\n  callbackType: null\n  users: number[]\n}\n\ninterface Params {\n  project: number\n  snapshotPath: string\n}\n\nexport interface ExecutableJob extends Job {\n  url: string\n  status: JobStatus.RUNNING\n}\n\nexport type JobDatum = DE.DatumEither<JobError, Job>\nexport type JobError = Job | Error\n\nexport const isErrorGuard = (jobError: JobError): jobError is Job =>\n  !(jobError instanceof Error)\n\nexport type SessionDatum = DE.DatumEither<JobError, SoftwareSession>\n\nexport const executableJobGuard = (job: Job): job is ExecutableJob =>\n  job.url !== null && jobLogic.readyToExecute.includes(job.status)\n\nconst failedJobGuard = (job: Job) => jobLogic.stopChecking.includes(job.status)\n\nexport const isReadyToExecute = (jobDatum: JobDatum): boolean =>\n  pipe(\n    jobDatum,\n    DE.squash(\n      () => false,\n      () => false,\n      executableJobGuard\n    )\n  )\n\nexport const jobToDatum = (job: Job): JobDatum => {\n  if (jobLogic.stopChecking.includes(job.status)) {\n    // Stop polling\n    return DE.failure(job)\n  } else if (jobLogic.readyToExecute.includes(job.status)) {\n    // Ready to execute\n    return executableJobGuard(job) ? DE.success(job) : DE.failure(job)\n  }\n\n  return DE.toReplete(failedJobGuard(job) ? DE.failure(job) : DE.success(job))\n}\n\nexport const jobFetch = wretch().options({ credentials: 'include' })\n\nexport const fetchJob = (jobUrl: string): Promise<Job> =>\n  jobFetch\n    .url(jobUrl)\n    .get()\n    .json((job) => job as Job)\n\nexport const fetchJobDatum = (jobUrl: string | undefined): Promise<JobDatum> =>\n  jobUrl === undefined\n    ? Promise.resolve(DE.failure(new Error('No Job Url to connect to')))\n    : pipe(jobUrl, async (job) => {\n        const j = await fetchJob(job)\n        return jobToDatum(j)\n      })\n"]}