{"version":3,"file":"toastController.js","sourceRoot":"","sources":["../../../src/components/toast/toastController.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,KAAK,CAAA;AAGrB,MAAM,CAAN,IAAY,UAKX;AALD,WAAY,UAAU;EACpB,iCAAmB,CAAA;EACnB,iCAAmB,CAAA;EACnB,2BAAa,CAAA;EACb,+BAAiB,CAAA;AACnB,CAAC,EALW,UAAU,KAAV,UAAU,QAKrB;AAID,MAAM,CAAN,IAAY,cAOX;AAPD,WAAY,cAAc;EACxB,uCAAqB,CAAA;EACrB,yCAAuB,CAAA;EACvB,mCAAiB,CAAA;EACjB,6CAA2B,CAAA;EAC3B,+CAA6B,CAAA;EAC7B,yCAAuB,CAAA;AACzB,CAAC,EAPW,cAAc,KAAd,cAAc,QAOzB;AAMD,MAAM,IAAI,GAAG,CAAC,OAAqB,EAAyB,EAAE;EAC5D,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAA;EAEzE,IAAI,cAAc,EAAE;IAClB,OAAO,cAAc,CAAA;GACtB;EAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAA;EAEpE,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE;IAClC,SAAS,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;GACtC;EAED,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;EAC/B,OAAO,SAAS,CAAA;AAClB,CAAC,CAAA;AAQD,8FAA8F;AAC9F,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,cAA4B,EAAE,EACb,EAAE;EACnB,MAAM,OAAO,GAAG,CACd,OAAe,EACf,UAAoC,EAAE,EACZ,EAAE;;IAC5B,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAA;IAExD,OAAO,CAAC,IAAI,GAAG,MAAA,MAAA,OAAO,CAAC,IAAI,mCAAI,WAAW,CAAC,IAAI,mCAAI,UAAU,CAAC,OAAO,CAAA;IACrE,OAAO,CAAC,QAAQ;MACd,MAAA,MAAA,OAAO,CAAC,QAAQ,mCAAI,WAAW,CAAC,QAAQ,mCAAI,cAAc,CAAC,SAAS,CAAA;IACtE,OAAO,CAAC,WAAW,GAAG,MAAA,OAAO,CAAC,WAAW,mCAAI,WAAW,CAAC,WAAW,CAAA;IACpE,OAAO,CAAC,QAAQ,GAAG,MAAA,OAAO,CAAC,QAAQ,mCAAI,WAAW,CAAC,QAAQ,CAAA;IAE3D,OAAO,CAAC,SAAS,GAAG,OAAO,CAAA;IAC3B,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;IACjC,OAAO,OAAO,CAAA;EAChB,CAAC,CAAA;EAED;;KAEG;EACH,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,EAAE;IACnC,QAAQ,EAAE,IAAI,CAAC,SAAS;IACxB,MAAM,EAAE,GAAG;GACZ,CAAC,CAAA;EAEF,OAAO;IACL,OAAO,EAAE,eAAe;GACzB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import mem from 'mem'\nimport { Components } from '../../components'\n\nexport enum ToastTypes {\n  neutral = 'neutral',\n  success = 'success',\n  warn = 'warn',\n  danger = 'danger',\n}\n\nexport type ToastType = keyof typeof ToastTypes\n\nexport enum ToastPositions {\n  topStart = 'topStart',\n  topCenter = 'topCenter',\n  topEnd = 'topEnd',\n  bottomStart = 'bottomStart',\n  bottomCenter = 'bottomCenter',\n  bottomEnd = 'bottomEnd',\n}\n\nexport type ToastPosition = keyof typeof ToastPositions\n\ntype ToastOptions = Partial<Components.StencilaToast>\n\nconst init = (options: ToastOptions): Element | HTMLElement => {\n  const toastContainer = document.querySelector('stencila-toast-container')\n\n  if (toastContainer) {\n    return toastContainer\n  }\n\n  const container = document.createElement('stencila-toast-container')\n\n  if (options.position !== undefined) {\n    container.position = options.position\n  }\n\n  document.body.append(container)\n  return container\n}\n\n// ==============================================================================\n\ninterface ToastController {\n  present: (message: string, options?: ToastOptions) => HTMLStencilaToastElement\n}\n\n// Base Toast controller function for managing the presentation of `stencila-toast` components\nexport const toastController = (\n  baseOptions: ToastOptions = {}\n): ToastController => {\n  const present = (\n    message: string,\n    options: ToastOptions | undefined = {}\n  ): HTMLStencilaToastElement => {\n    const toastEl = document.createElement('stencila-toast')\n\n    toastEl.type = options.type ?? baseOptions.type ?? ToastTypes.neutral\n    toastEl.position =\n      options.position ?? baseOptions.position ?? ToastPositions.topCenter\n    toastEl.dismissable = options.dismissable ?? baseOptions.dismissable\n    toastEl.duration = options.duration ?? baseOptions.duration\n\n    toastEl.innerText = message\n    init(baseOptions).append(toastEl)\n    return toastEl\n  }\n\n  /** Memoize the notification function based on the message string and options to avoid showing\n   * duplicate notifications in quick succession.\n   */\n  const memoizedPresent = mem(present, {\n    cacheKey: JSON.stringify,\n    maxAge: 150,\n  })\n\n  return {\n    present: memoizedPresent,\n  }\n}\n"]}