{"version":3,"file":"toast.js","sourceRoot":"","sources":["../../../src/components/toast/toast.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, Host, Prop } from '@stencil/core'\nimport { IconNames } from '../icon/iconNames'\nimport { getSlotByName } from '../utils/slotSelectors'\nimport { ToastPosition, ToastType, ToastTypes } from './toastController'\n\n/*\n * Individual Toast component.\n * To present on the page see `./toastController.ts`\n */\n@Component({\n  tag: 'stencila-toast',\n  styleUrls: {\n    default: 'toast.css',\n    material: 'toast.css',\n  },\n})\nexport class StencilaToast {\n  @Element()\n  private el: HTMLStencilaToastElement | null\n\n  private timeout: number\n\n  /**\n   * If true, shows a \"close\" button to immediately dismiss the toast.\n   * Note that this prop has no effect if `duration` is set to zero, in which case\n   * the toast will always show the \"close\" button.\n   */\n  @Prop() dismissable? = false\n\n  /**\n   * Duration in milliseconds for how long the toast should be display\n   * Setting `duration` to `0` will disable auto-dismissal of the toast.\n   */\n  @Prop() duration? = 4_000\n\n  /**\n   * Type of the toast to show. Affects the component colour scheme.\n   */\n  @Prop() type: ToastType = ToastTypes.neutral\n\n  /**\n   * Where on the screen to show the Toast. Overrides the base position set in the `ToastController` instance.\n   */\n  @Prop() position: ToastPosition | undefined\n\n  private getIconByType = (): IconNames => {\n    switch (this.type) {\n      case 'success': {\n        return 'checkbox-circle'\n      }\n      case 'danger': {\n        return 'forbid'\n      }\n      case 'warn': {\n        return 'error-warning'\n      }\n      case 'neutral':\n      default: {\n        return 'question'\n      }\n    }\n  }\n\n  private dismiss = () => {\n    window.clearTimeout(this.timeout)\n    this.el?.parentElement?.removeChild(this.el)\n  }\n\n  private pauseAutoDismiss = () => {\n    window.clearTimeout(this.timeout)\n  }\n\n  private autoDismiss = () => {\n    if (this.duration !== undefined && this.duration <= 0) {\n      return\n    }\n\n    window.clearTimeout(this.timeout)\n\n    this.timeout = window.setTimeout(() => {\n      this.dismiss()\n    }, this.duration)\n  }\n\n  private styleActionButtons = () => {\n    const buttons = Array.from(getSlotByName(this.el)('actions') ?? [])\n      .reduce(\n        (actions: Element[], el) => [...actions, ...Array.from(el.children)],\n        []\n      )\n      .filter(\n        (el) =>\n          el.tagName.toLowerCase() === 'stencila-button' &&\n          !el.classList.contains('closeButton')\n      )\n\n    buttons.forEach((el, idx) => {\n      el.setAttribute('size', 'xsmall')\n\n      if (idx === 0) {\n        el.setAttribute('color', this.type)\n      }\n\n      if (idx > 0) {\n        el.setAttribute('color', 'neutral')\n        el.setAttribute('minimal', 'minimal')\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.styleActionButtons()\n  }\n\n  componentDidLoad() {\n    this.autoDismiss()\n  }\n\n  render() {\n    return (\n      <Host\n        type={this.type}\n        position={this.position}\n        dismissable={this.dismissable === true || this.duration === 0}\n        onMouseEnter={this.pauseAutoDismiss}\n        onMouseLeave={this.autoDismiss}\n      >\n        <div class=\"toastAccent\">\n          <stencila-icon\n            icon={this.getIconByType()}\n            iconStyle=\"fill\"\n          ></stencila-icon>\n        </div>\n\n        <div class=\"content\">\n          <slot name=\"title\"></slot>\n\n          <slot></slot>\n\n          <slot name=\"actions\"></slot>\n        </div>\n\n        {(this.dismissable === true || this.duration === 0) && (\n          <stencila-button\n            color=\"neutral\"\n            iconOnly={true}\n            icon=\"close\"\n            minimal={true}\n            size=\"small\"\n            onClick={this.dismiss}\n            class=\"closeButton\"\n          ></stencila-button>\n        )}\n      </Host>\n    )\n  }\n}\n"]}