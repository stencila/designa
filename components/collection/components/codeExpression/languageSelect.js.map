{"version":3,"file":"languageSelect.js","sourceRoot":"","sources":["../../../src/components/codeExpression/languageSelect.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAuB,CAAC,EAAE,MAAM,eAAe,CAAA;AAChE,OAAO,EAAiB,YAAY,EAAE,MAAM,yBAAyB,CAAA;AAWrE,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAY,EAAuB,EAAE;;EACxE,MAAM,qBAAqB,GAAG,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;EAEhE,MAAM,sBAAsB,GAC1B,MAAM,CAAC,IAAI,CAAC,MAAA,KAAK,CAAC,mBAAmB,mCAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;EAEzD,MAAM,iBAAiB,GAAG,sBAAsB;IAC9C,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,MAAM,CAC/C,CAAC,KAAoB,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,EAAE;MACxC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC1D,CAAC,CAAC,KAAK;QACP,CAAC,iCAAM,KAAK,KAAE,CAAC,IAAI,CAAC,EAAE,OAAO,GAAE,CAAA;IACnC,CAAC,EACD,EAAE,CACH;IACH,CAAC,CAAC,KAAK,CAAC,oBAAoB,CAAA;EAE9B,OAAO,CACL,mCAA0B,sBAAsB,EAAC,SAAS,EAAE,IAAI;IAC9D,uBACE,QAAQ,EAAE,IAAI,EACd,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,QAAQ,gBACF,aAAa,EACxB,KAAK,EAAC,KAAK,EACX,OAAO,EAAE,IAAI,EACb,OAAO,EAAE,GAAG,qBAAqB,CAAC,IAAI,EAAE,EACxC,QAAQ,EAAE,KAAK,CAAC,QAAQ,GACP;IAElB,sBAAsB,IAAI,CACzB,EAAC,QAAQ;MACN,MAAM,CAAC,MAAM,CAAC,MAAA,KAAK,CAAC,mBAAmB,mCAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAChE,0BACE,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,GAAG,EAAE,WAAC,OAAA,MAAA,KAAK,CAAC,aAAa,+CAAnB,KAAK,EAAiB,QAAQ,CAAC,IAAI,CAAC,CAAA,EAAA,EACnD,IAAI,EACF,QAAQ,CAAC,IAAI,KAAK,qBAAqB,CAAC,IAAI;UAC1C,CAAC,CAAC,OAAO;UACT,CAAC,CAAC,SAAS,IAGd,QAAQ,CAAC,IAAI,CACK,CACtB,CAAC;MAEF,0BAAoB,IAAI,EAAC,QAAQ,EAAC,OAAO,EAAE,IAAI,qBAE1B,CACZ,CACZ;IAEA,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClD,0BACE,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,GAAG,EAAE,WAAC,OAAA,MAAA,KAAK,CAAC,aAAa,+CAAnB,KAAK,EAAiB,QAAQ,CAAC,IAAI,CAAC,CAAA,EAAA,IAElD,QAAQ,CAAC,IAAI,CACK,CACtB,CAAC,CACY,CACjB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { Fragment, FunctionalComponent, h } from '@stencil/core'\nimport { FileFormatMap, lookupFormat } from '../editor/languageUtils'\n\ninterface Props {\n  activeLanguage: string\n  disabled: boolean\n  languageCapabilities: FileFormatMap\n  executableLanguages: FileFormatMap\n  onSetLanguage?: (language: string) => void\n  setRef?: (el?: HTMLSelectElement) => void\n}\n\nexport const LanguagePickerInline = (props: Props): FunctionalComponent => {\n  const activeLanguageByAlias = lookupFormat(props.activeLanguage)\n\n  const hasExecutableLanguages =\n    Object.keys(props.executableLanguages ?? {}).length > 0\n\n  const filteredLanguages = hasExecutableLanguages\n    ? Object.entries(props.languageCapabilities).reduce(\n        (langs: FileFormatMap, [name, details]) => {\n          return Object.keys(props.executableLanguages).includes(name)\n            ? langs\n            : { ...langs, [name]: details }\n        },\n        {}\n      )\n    : props.languageCapabilities\n\n  return (\n    <stencila-menu aria-label=\"Programming Language\" autoClose={true}>\n      <stencila-button\n        iconOnly={true}\n        icon=\"terminal\"\n        size=\"xsmall\"\n        slot=\"toggle\"\n        aria-label=\"Toggle menu\"\n        color=\"key\"\n        minimal={true}\n        tooltip={`${activeLanguageByAlias.name}`}\n        disabled={props.disabled}\n      ></stencila-button>\n\n      {hasExecutableLanguages && (\n        <Fragment>\n          {Object.values(props.executableLanguages ?? {}).map((language) => (\n            <stencila-menu-item\n              size=\"xsmall\"\n              onClick={() => props.onSetLanguage?.(language.name)}\n              icon={\n                language.name === activeLanguageByAlias.name\n                  ? 'check'\n                  : undefined\n              }\n            >\n              {language.name}\n            </stencila-menu-item>\n          ))}\n\n          <stencila-menu-item size=\"xsmall\" divider={true}>\n            Not executable\n          </stencila-menu-item>\n        </Fragment>\n      )}\n\n      {Object.values(filteredLanguages).map((language) => (\n        <stencila-menu-item\n          size=\"xsmall\"\n          onClick={() => props.onSetLanguage?.(language.name)}\n        >\n          {language.name}\n        </stencila-menu-item>\n      ))}\n    </stencila-menu>\n  )\n}\n"]}