{"version":3,"file":"codeExpression.js","sourceRoot":"","sources":["../../../src/components/codeExpression/codeExpression.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { codeExpression, CodeExpression } from '@stencila/schema'\nimport { CodeExecuteStatus } from '../code/codeExecuteStatus'\nimport {\n  CodeComponent,\n  CodeExecuteCancelEvent,\n  CodeExecuteEvent,\n  CodeExecuteOrdering,\n  CodeVisibilityEvent,\n  DiscoverExecutableLanguagesEvent,\n  ExecuteRequired,\n  ExecuteStatus,\n} from '../code/codeTypes'\nimport { isPending } from '../code/codeUtils'\nimport {\n  FileFormat,\n  fileFormatMap,\n  FileFormatMap,\n  lookupFormat,\n} from '../editor/languageUtils'\nimport { LanguagePickerInline } from './languageSelect'\n\nconst slots = {\n  text: 'text',\n  output: 'output',\n  errors: 'errors',\n}\n\n/**\n * @slot text - The source code of the `CodeChunk`. Corresponds to the `text`\n *              field in the Stencila `CodeExpression` Schema.\n * @slot output - A single output element. Corresponds to the `output` field in\n *                the Stencila `CodeExpression` Schema.\n */\n@Component({\n  tag: 'stencila-code-expression',\n  styleUrls: {\n    default: 'codeExpression.css',\n    material: 'codeExpression.css',\n  },\n  scoped: true,\n})\nexport class CodeExpressionComponent implements CodeComponent<CodeExpression> {\n  @Element() private el: HTMLStencilaCodeExpressionElement\n\n  private hoverTimeOut: number | undefined = undefined\n  private hoverStartedAt = Date.now()\n\n  /**\n   * A callback function to be called with the value of the `CodeExpression`\n   * node when executing the `CodeExpression`.\n   */\n  @Prop() public executeHandler?: (\n    codeExpression: CodeExpression\n  ) => Promise<CodeExpression>\n\n  /**\n   * Disallow editing of the editor contents when set to `true`\n   */\n  @Prop()\n  public readOnly = false\n\n  /**\n   * Programming language of the CodeExpression\n   */\n  @Prop({ mutable: true })\n  public programmingLanguage: string\n\n  /**\n   * List of all supported programming languages\n   */\n  @Prop()\n  public languageCapabilities: FileFormatMap = fileFormatMap\n\n  /**\n   * List of programming languages that can be executed in the current context\n   */\n  @Prop({ mutable: true })\n  public executableLanguages: FileFormatMap =\n    window.stencilaWebClient?.executableLanguages ?? {}\n\n  @Listen('stencila-discover-executable-languages', { target: 'window' })\n  onDiscoverExecutableLanguages({\n    detail,\n  }: DiscoverExecutableLanguagesEvent): void {\n    this.executableLanguages = detail.languages\n    this.checkIfExecutable()\n  }\n\n  @State() isExecutable = false\n\n  @State()\n  shiftIsPressed = false\n\n  /**\n   * The execution status of the code node\n   */\n  @Prop()\n  executeStatus: ExecuteStatus\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies at\n   * compile time.\n   */\n  @Prop()\n  compileDigest: string\n\n  /**\n   * Status of upstream dependencies, and whether the node needs to be\n   * re-executed\n   */\n  @Prop()\n  executeRequired: ExecuteRequired\n\n  /**\n   * A digest representing the state of a [`Resource`] and its dependencies from\n   * the latest execution.\n   */\n  @Prop()\n  executeDigest: string\n\n  /**\n   * Time when the latest code execution ended\n   */\n  @Prop()\n  executeEnded: string\n\n  /**\n   * Duration of the latest code execition\n   */\n  @Prop()\n  executeDuration: string\n\n  /**\n   * Event emitted when the language of the editor is changed.\n   */\n  @Event({ eventName: 'stencila-language-change' })\n  languageChange: EventEmitter<FileFormat>\n\n  /**\n   * Function to call when the user selects a new language from the language\n   * picker dropdown.\n   */\n  private onSelectLanguage = (language: string): void => {\n    this.languageChange.emit(lookupFormat(language))\n    this.programmingLanguage = language\n  }\n\n  /**\n   * Stencila CodeExpression node to render\n   */\n  @Prop({\n    mutable: true,\n  })\n  codeExpression?: CodeExpression\n\n  @State() hover = false\n\n  /**\n   * Whether the code section starts out visible or not\n   */\n  @Prop({ mutable: true })\n  isCodeVisible = false\n\n  /**\n   * A global event emitter to show/hide code in all `CodeChunk` or `CodeExpression` components\n   */\n  @Event({\n    eventName: 'stencila-code-visibility-change',\n  })\n  private allCodeVisibilityChange: EventEmitter\n\n  /**\n   * A global event listener to show/hide code in this component\n   */\n  @Listen('stencila-code-visibility-change', { target: 'window' })\n  onAllCodeVisibilityChange(event: CodeVisibilityEvent): void {\n    this.isCodeVisible = event.detail.isVisible\n  }\n\n  /**\n   * Toggle code visibility, either locally, or globally\n   */\n  private toggleCodeVisibility = (event: MouseEvent): void => {\n    event.preventDefault()\n    if (event.shiftKey) {\n      this.allCodeVisibilityChange.emit({ isVisible: !this.isCodeVisible })\n    } else {\n      this.isCodeVisible = !this.isCodeVisible\n    }\n  }\n\n  componentWillLoad(): void {\n    this.checkIfExecutable()\n  }\n\n  /**\n   * Returns the text contents from the inline code editor\n   */\n  @Method()\n  public async getTextContents(): Promise<string> {\n    const slot = this.selectTextSlot()\n    return Promise.resolve(slot?.textContent ?? '')\n  }\n\n  /**\n   * Returns the `CodeExpression` node with the updated `text` contents from the\n   * editor.\n   */\n  @Method()\n  public async getContents(): Promise<CodeExpression> {\n    return Promise.resolve(\n      codeExpression({\n        text: await this.getTextContents(),\n        programmingLanguage: this.programmingLanguage,\n      })\n    )\n  }\n\n  private selectTextSlot = (): HTMLElement | null =>\n    this.el.querySelector(`.${slots.text}`)\n\n  /**\n   * Event emitted when the source code of the `CodeExpression` node is changed.\n   */\n  @Event({ eventName: 'stencila-content-change' })\n  contentChange: EventEmitter<string>\n\n  private contentChangeHandler = (e: Event) => {\n    const target = e.currentTarget as HTMLSpanElement\n    this.contentChange.emit(target.textContent ?? '')\n  }\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === 'Enter' && event.ctrlKey) {\n      event.preventDefault()\n      this.execute().catch((err) => {\n        console.error(err)\n      })\n    }\n  }\n\n  /**\n   * Emitted to indicate that code node should be executed\n   *\n   */\n  @Event({\n    eventName: 'stencila-code-execute',\n  })\n  public codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  /**\n   * Emitted to indicate that the execution of the code node should be cancelled/interrupted.\n   */\n  @Event({\n    eventName: 'stencila-code-execute-cancel',\n  })\n  public codeExecuteCancelEvent: EventEmitter<CodeExecuteCancelEvent['detail']>\n\n  /**\n   * Determine if the CodeChunk can be executed or not.\n   * For a CodeChunk to be considered executable it must have a `executeHandler` function attached\n   * and the current `programmingLanguage` must be in the list of `executableLanguages`.\n   */\n  private checkIfExecutable = (): void => {\n    if (\n      this.programmingLanguage === undefined ||\n      !this.executeHandler ||\n      Object.keys(this.executableLanguages ?? {}).length <= 0\n    ) {\n      this.isExecutable = false\n      return\n    }\n\n    const activeLanguageFormat = lookupFormat(this.programmingLanguage).name\n    this.isExecutable =\n      this.executeHandler !== undefined &&\n      Object.values(this.executableLanguages ?? {}).some(\n        (format) => format.name === activeLanguageFormat\n      )\n  }\n\n  private onExecuteHandler = async (\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression> => {\n    const node = await this.getContents()\n\n    // If node is running, emit cancel event and terminate early\n    if (isPending(this.executeStatus)) {\n      this.codeExecuteCancelEvent.emit({ nodeId: this.el.id, scope: 'All' })\n      return node\n    }\n\n    this.codeExecuteEvent.emit({ nodeId: this.el.id, ordering })\n\n    if (this.isExecutable && this.executeHandler) {\n      const computed = await this.executeHandler(node)\n      this.codeExpression = computed\n      return computed\n    }\n\n    return node\n  }\n\n  /**\n   * Run the `CodeExpression`\n   */\n  @Method()\n  public async execute(\n    ordering: CodeExecuteOrdering = 'Topological'\n  ): Promise<CodeExpression | Error> {\n    try {\n      const res = await this.onExecuteHandler(ordering)\n      // Add artificial delay to allow user to register the spinner\n      return res\n    } catch (err) {\n      console.error(err)\n      return new Error('Could not execute CodeExpression')\n    }\n  }\n\n  // Create an execute handler bound to this instance\n  // @see https://github.com/typescript-eslint/typescript-eslint/blob/v3.7.0/packages/eslint-plugin/docs/rules/unbound-method.md\n  private executeRef = (ordering: CodeExecuteOrdering) => this.execute(ordering)\n\n  private onMouseOutHandler = (e: MouseEvent): void => {\n    const target = e.target as Node | null\n    const relatedTarget = e.relatedTarget as Node | null\n    if (!target?.contains(relatedTarget)) {\n      this.removeHoverState()\n    }\n  }\n\n  private addHoverState = (): void => {\n    window.clearTimeout(this.hoverTimeOut)\n\n    if (!this.hover) {\n      this.hover = true\n      this.hoverStartedAt = Date.now()\n    }\n  }\n\n  private removeHoverState = (): void => {\n    const diff = Date.now() - this.hoverStartedAt\n    if (this.hover && diff < 60) {\n      this.hoverTimeOut = window.setTimeout(() => {\n        this.hover = false\n      }, 3000)\n    } else if (this.hover) {\n      this.hover = false\n    }\n  }\n\n  private onKeyPress = (e: KeyboardEvent): void => {\n    this.shiftIsPressed = e.shiftKey\n  }\n\n  private addKeyListeners = () => {\n    window.addEventListener('keydown', this.onKeyPress)\n    window.addEventListener('keyup', this.onKeyPress)\n  }\n\n  private removeKeyListeners = () => {\n    window.removeEventListener('keydown', this.onKeyPress)\n    window.removeEventListener('keyup', this.onKeyPress)\n    this.shiftIsPressed = false\n  }\n\n  private generateContent = (): HTMLElement[] => {\n    return [\n      <span class=\"actions\">\n        <stencila-menu menuPosition=\"bottom-start\">\n          <CodeExecuteStatus\n            executeStatus={this.executeStatus}\n            executeRequired={this.executeRequired}\n            slot=\"toggle\"\n          ></CodeExecuteStatus>\n          <slot name=\"code-dependencies\" />\n          <slot name=\"code-dependents\" />\n        </stencila-menu>\n        <stencila-button\n          aria-label=\"Run Code\"\n          class=\"run\"\n          onClick={(e: MouseEvent) =>\n            this.executeRef(e.shiftKey ? 'Single' : 'Topological')\n          }\n          color=\"key\"\n          icon={isPending(this.executeStatus) ? 'stop' : 'play'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={\n            isPending(this.executeStatus)\n              ? 'Cancel'\n              : this.shiftIsPressed\n              ? 'Run only this code'\n              : 'Run'\n          }\n          onMouseEnter={this.addKeyListeners}\n          onMouseLeave={this.removeKeyListeners}\n        ></stencila-button>\n        <stencila-button\n          aria-label={`${this.isCodeVisible ? 'Hide' : 'Show'} Code`}\n          class=\"secondaryAction sourceToggle\"\n          onClick={this.toggleCodeVisibility}\n          color=\"key\"\n          icon={this.isCodeVisible ? 'eye-off' : 'eye'}\n          iconOnly={true}\n          minimal={true}\n          size=\"xsmall\"\n          tooltip={`${\n            this.isCodeVisible ? 'Hide' : 'Show'\n          } Code\\nShift click to set for all code`}\n        ></stencila-button>\n        <span class=\"secondaryAction\">\n          <LanguagePickerInline\n            activeLanguage={this.programmingLanguage ?? ''}\n            languageCapabilities={this.languageCapabilities}\n            executableLanguages={this.executableLanguages}\n            onSetLanguage={this.onSelectLanguage}\n            disabled={this.readOnly}\n          ></LanguagePickerInline>\n        </span>\n        <span\n          class=\"text\"\n          contentEditable={!this.readOnly}\n          spellcheck=\"false\"\n          onBlur={this.removeHoverState}\n          onInput={this.contentChangeHandler}\n          tabIndex={this.isCodeVisible ? 0 : -1}\n          role=\"textbox\"\n        >\n          <slot name={slots.text} />\n        </span>\n        <slot name={slots.errors} />\n      </span>,\n      <svg\n        class=\"divider\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 8 24\"\n        preserveAspectRatio=\"xMinYMin\"\n      >\n        <path d=\"M8 12L1 0H0v24h1l7-12z\" />\n      </svg>,\n      <slot name={slots.output} />,\n    ]\n  }\n\n  public render(): HTMLElement {\n    return (\n      <Host\n        class={{\n          hover: this.hover,\n          isCodeVisible: this.isCodeVisible,\n        }}\n        onMouseEnter={this.addHoverState}\n        onMouseOut={this.onMouseOutHandler}\n        onKeyDown={this.handleKeyDown}\n      >\n        {this.generateContent()}\n      </Host>\n    )\n  }\n}\n"]}