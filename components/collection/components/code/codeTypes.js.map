{"version":3,"file":"codeTypes.js","sourceRoot":"","sources":["../../../src/components/code/codeTypes.ts"],"names":[],"mappings":"AAkDA,gFAAgF;AAChF,iEAAiE;AACjE,MAAe,mBAAmB;CAYjC;AAED,sFAAsF;AACtF,iCAAiC;AACjC,MAAe,uBAAuB;CA4BrC;AAED;;;GAGG;AACH,MAAM,OAAgB,iBAAiB;CAMtC;AAED,MAAe,wBAEb,SAAQ,mBAAsB;CAG/B;AAED;;GAEG;AACH,MAAe,2BAEb,SAAQ,mBAAsB;CAO/B","sourcesContent":["import { EventEmitter } from '@stencil/core'\nimport {\n  Code,\n  CodeBlock,\n  CodeChunk,\n  CodeExpression,\n  CodeFragment,\n} from '@stencila/schema'\nimport { FileFormat, FileFormatMap } from '../editor/languageUtils'\n\nexport type CodeVisibilityEvent = CustomEvent<{\n  isVisible: boolean\n}>\n\nexport type CodeExecuteOrdering = 'Single' | 'Appearance' | 'Topological'\nexport type CodeExecuteCancelOrdering = 'Single' | 'Appearance' | 'Topological'\n\nexport type CodeExecuteEvent = CustomEvent<{\n  nodeId: string | null\n  ordering: CodeExecuteOrdering\n}>\n\nexport type CodeExecuteCancelEvent = CustomEvent<{\n  nodeId: string | null\n  scope: 'Single' | 'All'\n}>\n\nexport type ExecuteStatus =\n  | undefined\n  | 'Scheduled'\n  | 'ScheduledPreviouslyFailed'\n  | 'Running'\n  | 'RunningPreviouslyFailed'\n  | 'Succeeded'\n  | 'Failed'\n  | 'Cancelled'\n\nexport type ExecuteRequired =\n  | undefined\n  | 'NeverExecuted'\n  | 'SemanticsChanged'\n  | 'DependenciesChanged'\n  | 'DependenciesFailed'\n  | 'Failed'\n  | 'No'\n\nexport type DiscoverExecutableLanguagesEvent = CustomEvent<{\n  languages: FileFormatMap\n}>\n\n// Defines a set of methods and properties that all `Code` node based components\n// must implement to ensure a unified public API and interactions\nabstract class SharedCodeInterface<C extends Code> {\n  // Props\n  executeHandler?: (code: C) => Promise<C>\n\n  // Methods\n  abstract getTextContents(): Promise<string>\n\n  // Event Listeners\n  // `stencila-discover-executable-languages`\n  abstract onDiscoverExecutableLanguages(\n    event: DiscoverExecutableLanguagesEvent\n  ): void\n}\n\n// Ensure that Code components which have both `text` and `output` elements can toggle\n// visibility of the `code` part.\nabstract class ExecutableCodeComponent<C extends CodeChunk | CodeExpression> {\n  // Methods\n  abstract execute: (ordering?: CodeExecuteOrdering) => Promise<C | Error>\n\n  // Event Emitters\n  // `stencila-code-execute`\n  abstract codeExecuteEvent: EventEmitter<CodeExecuteEvent['detail']>\n\n  // `stencila-code-execute-cancel`\n  abstract codeExecuteCancelEvent: EventEmitter<\n    CodeExecuteCancelEvent['detail']\n  >\n\n  // Event Listeners\n  // `stencila-code-visibility-change`\n  abstract onAllCodeVisibilityChange(event: CodeVisibilityEvent): void\n\n  abstract executeStatus: ExecuteStatus\n\n  abstract executeRequired: ExecuteRequired\n\n  abstract compileDigest: string\n\n  abstract executeDigest: string\n\n  abstract executeEnded: string\n\n  abstract executeDuration: string\n}\n\n/**\n * Components which wrap `<stencila-editor>` component do not need to implement the\n * following interfaces as they can be delegated to the editor component.\n */\nexport abstract class EditorCodeMethods {\n  // Event Emitters\n  abstract contentChange: EventEmitter<string>\n\n  // stencila-language-change\n  abstract languageChange: EventEmitter<FileFormat>\n}\n\nabstract class EditorBasedCodeComponent<\n  C extends CodeChunk | CodeBlock\n> extends SharedCodeInterface<C> {\n  // Methods\n  abstract getContents(): Promise<C>\n}\n\n/**\n * Inline code components which do not wrap `stencila-editor` components.\n */\nabstract class NonEditorBasedCodeComponent<\n  C extends CodeFragment | CodeExpression\n> extends SharedCodeInterface<C> {\n  // Event Emitters\n  // `stencila-content-change`\n  abstract contentChange: EventEmitter<string>\n\n  // stencila-language-change\n  abstract languageChange: C extends CodeChunk ? void : EventEmitter<FileFormat>\n}\n\nexport type CodeComponent<C extends Code> = C extends CodeChunk\n  ? EditorBasedCodeComponent<C> & ExecutableCodeComponent<C>\n  : C extends CodeExpression\n  ? NonEditorBasedCodeComponent<C> & ExecutableCodeComponent<C>\n  : C extends CodeBlock\n  ? EditorBasedCodeComponent<C>\n  : C extends CodeFragment\n  ? NonEditorBasedCodeComponent<C>\n  : never\n"]}